
./Debug/flipflop_irq.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:

void startup(void) __attribute__((naked)) __attribute__((section (".start_section")) );

void startup ( void )
{
__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <startup+0xc>)
20000002:	4685      	mov	sp, r0
20000004:	f000 ff04 	bl	20000e10 <main>
20000008:	e7fe      	b.n	20000008 <startup+0x8>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	".L1: B .L1\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <setup_for_keypad>:
﻿#include "gpio.h"

void setup_for_keypad(GPIO* _gpio)
{
20000010:	b580      	push	{r7, lr}
20000012:	b082      	sub	sp, #8
20000014:	af00      	add	r7, sp, #0
20000016:	6078      	str	r0, [r7, #4]
    // Sätt pinnar 15-12 till utportar
    // och pinnar 11-8 till inportar.
    _gpio->moder &= 0x0000FFFF;
20000018:	687b      	ldr	r3, [r7, #4]
2000001a:	681b      	ldr	r3, [r3, #0]
2000001c:	041b      	lsls	r3, r3, #16
2000001e:	0c1a      	lsrs	r2, r3, #16
20000020:	687b      	ldr	r3, [r7, #4]
20000022:	601a      	str	r2, [r3, #0]
    _gpio->moder |= 0x5500FFFF;
20000024:	687b      	ldr	r3, [r7, #4]
20000026:	681b      	ldr	r3, [r3, #0]
20000028:	4a11      	ldr	r2, [pc, #68]	; (20000070 <setup_for_keypad+0x60>)
2000002a:	431a      	orrs	r2, r3
2000002c:	687b      	ldr	r3, [r7, #4]
2000002e:	601a      	str	r2, [r3, #0]

    // Sätt pinnar 15-12 till "push-pull"
    // och pinnar 11-8 till "open drain".
    _gpio->otyper &= 0xFFFF00FF;
20000030:	687b      	ldr	r3, [r7, #4]
20000032:	889b      	ldrh	r3, [r3, #4]
20000034:	22ff      	movs	r2, #255	; 0xff
20000036:	4013      	ands	r3, r2
20000038:	b29a      	uxth	r2, r3
2000003a:	687b      	ldr	r3, [r7, #4]
2000003c:	809a      	strh	r2, [r3, #4]
    _gpio->otyper |= 0x00000F00;
2000003e:	687b      	ldr	r3, [r7, #4]
20000040:	889b      	ldrh	r3, [r3, #4]
20000042:	22f0      	movs	r2, #240	; 0xf0
20000044:	0112      	lsls	r2, r2, #4
20000046:	4313      	orrs	r3, r2
20000048:	b29a      	uxth	r2, r3
2000004a:	687b      	ldr	r3, [r7, #4]
2000004c:	809a      	strh	r2, [r3, #4]

    // Sätt pinnar 15-12 till "floating"
    // och pinnar 11-8 till "pull-down"
    _gpio->pupdr &= 0x0000FFFF;
2000004e:	687b      	ldr	r3, [r7, #4]
20000050:	68db      	ldr	r3, [r3, #12]
20000052:	041b      	lsls	r3, r3, #16
20000054:	0c1a      	lsrs	r2, r3, #16
20000056:	687b      	ldr	r3, [r7, #4]
20000058:	60da      	str	r2, [r3, #12]
    _gpio->pupdr |= 0x00AA0000;
2000005a:	687b      	ldr	r3, [r7, #4]
2000005c:	68db      	ldr	r3, [r3, #12]
2000005e:	22aa      	movs	r2, #170	; 0xaa
20000060:	0412      	lsls	r2, r2, #16
20000062:	431a      	orrs	r2, r3
20000064:	687b      	ldr	r3, [r7, #4]
20000066:	60da      	str	r2, [r3, #12]
}
20000068:	46c0      	nop			; (mov r8, r8)
2000006a:	46bd      	mov	sp, r7
2000006c:	b002      	add	sp, #8
2000006e:	bd80      	pop	{r7, pc}
20000070:	5500ffff 	strpl	pc, [r0, #-4095]	; 0xfffff001

20000074 <setup_for_seg_disp>:

void setup_for_seg_disp(GPIO* _gpio)
{
20000074:	b580      	push	{r7, lr}
20000076:	b082      	sub	sp, #8
20000078:	af00      	add	r7, sp, #0
2000007a:	6078      	str	r0, [r7, #4]
    // Sätt pinnar 7-0 till utportar
    _gpio->moder &= 0xFFFF0000;
2000007c:	687b      	ldr	r3, [r7, #4]
2000007e:	681b      	ldr	r3, [r3, #0]
20000080:	0c1b      	lsrs	r3, r3, #16
20000082:	041a      	lsls	r2, r3, #16
20000084:	687b      	ldr	r3, [r7, #4]
20000086:	601a      	str	r2, [r3, #0]
    _gpio->moder |= 0x00005555;
20000088:	687b      	ldr	r3, [r7, #4]
2000008a:	681b      	ldr	r3, [r3, #0]
2000008c:	4a03      	ldr	r2, [pc, #12]	; (2000009c <setup_for_seg_disp+0x28>)
2000008e:	431a      	orrs	r2, r3
20000090:	687b      	ldr	r3, [r7, #4]
20000092:	601a      	str	r2, [r3, #0]
    //_gpio->otyper |= 0x000000FF;

    // Sätter pinnar 4-0 till "pull-down"
    //_gpio->pupdr &= 0xFFFFFF00;
    //_gpio->pupdr |= 0x000000AA;
}
20000094:	46c0      	nop			; (mov r8, r8)
20000096:	46bd      	mov	sp, r7
20000098:	b002      	add	sp, #8
2000009a:	bd80      	pop	{r7, pc}
2000009c:	00005555 	andeq	r5, r0, r5, asr r5

200000a0 <keyb>:

unsigned char keyb(void)
{
200000a0:	b590      	push	{r4, r7, lr}
200000a2:	b087      	sub	sp, #28
200000a4:	af00      	add	r7, sp, #0
    unsigned char keys[] = { 1, 2, 3, 10, 4, 5, 6, 11, 7, 8, 9, 12, 14, 0, 15, 13 };
200000a6:	1d3b      	adds	r3, r7, #4
200000a8:	4a1f      	ldr	r2, [pc, #124]	; (20000128 <keyb+0x88>)
200000aa:	ca13      	ldmia	r2!, {r0, r1, r4}
200000ac:	c313      	stmia	r3!, {r0, r1, r4}
200000ae:	6812      	ldr	r2, [r2, #0]
200000b0:	601a      	str	r2, [r3, #0]
    unsigned char row, col;
    for(row = 0; row < 4; row++) {
200000b2:	2317      	movs	r3, #23
200000b4:	18fb      	adds	r3, r7, r3
200000b6:	2200      	movs	r2, #0
200000b8:	701a      	strb	r2, [r3, #0]
200000ba:	e02a      	b.n	20000112 <keyb+0x72>
		deactivate_rows(GPIO_D);
200000bc:	4b1b      	ldr	r3, [pc, #108]	; (2000012c <keyb+0x8c>)
200000be:	0018      	movs	r0, r3
200000c0:	f000 f886 	bl	200001d0 <deactivate_rows>
		activate_row(GPIO_D, row);
200000c4:	2317      	movs	r3, #23
200000c6:	18fb      	adds	r3, r7, r3
200000c8:	781b      	ldrb	r3, [r3, #0]
200000ca:	4a18      	ldr	r2, [pc, #96]	; (2000012c <keyb+0x8c>)
200000cc:	0019      	movs	r1, r3
200000ce:	0010      	movs	r0, r2
200000d0:	f000 f856 	bl	20000180 <activate_row>
		col = read_col(GPIO_D);
200000d4:	2316      	movs	r3, #22
200000d6:	18fc      	adds	r4, r7, r3
200000d8:	4b14      	ldr	r3, [pc, #80]	; (2000012c <keyb+0x8c>)
200000da:	0018      	movs	r0, r3
200000dc:	f000 f883 	bl	200001e6 <read_col>
200000e0:	0003      	movs	r3, r0
200000e2:	7023      	strb	r3, [r4, #0]
		if(col != 0xFF) {
200000e4:	2316      	movs	r3, #22
200000e6:	18fb      	adds	r3, r7, r3
200000e8:	781b      	ldrb	r3, [r3, #0]
200000ea:	2bff      	cmp	r3, #255	; 0xff
200000ec:	d00a      	beq.n	20000104 <keyb+0x64>
			return keys[4 * row + col];
200000ee:	2317      	movs	r3, #23
200000f0:	18fb      	adds	r3, r7, r3
200000f2:	781b      	ldrb	r3, [r3, #0]
200000f4:	009a      	lsls	r2, r3, #2
200000f6:	2316      	movs	r3, #22
200000f8:	18fb      	adds	r3, r7, r3
200000fa:	781b      	ldrb	r3, [r3, #0]
200000fc:	18d3      	adds	r3, r2, r3
200000fe:	1d3a      	adds	r2, r7, #4
20000100:	5cd3      	ldrb	r3, [r2, r3]
20000102:	e00c      	b.n	2000011e <keyb+0x7e>
    for(row = 0; row < 4; row++) {
20000104:	2317      	movs	r3, #23
20000106:	18fb      	adds	r3, r7, r3
20000108:	781a      	ldrb	r2, [r3, #0]
2000010a:	2317      	movs	r3, #23
2000010c:	18fb      	adds	r3, r7, r3
2000010e:	3201      	adds	r2, #1
20000110:	701a      	strb	r2, [r3, #0]
20000112:	2317      	movs	r3, #23
20000114:	18fb      	adds	r3, r7, r3
20000116:	781b      	ldrb	r3, [r3, #0]
20000118:	2b03      	cmp	r3, #3
2000011a:	d9cf      	bls.n	200000bc <keyb+0x1c>
		}
    }
	//keyboardActivate(0);
    return 0xFF;
2000011c:	23ff      	movs	r3, #255	; 0xff
}
2000011e:	0018      	movs	r0, r3
20000120:	46bd      	mov	sp, r7
20000122:	b007      	add	sp, #28
20000124:	bd90      	pop	{r4, r7, pc}
20000126:	46c0      	nop			; (mov r8, r8)
20000128:	200012e0 	andcs	r1, r0, r0, ror #5
2000012c:	40020c00 	andmi	r0, r2, r0, lsl #24

20000130 <out7seg>:

void out7seg(GPIO* _gpio, unsigned char c)
{
20000130:	b590      	push	{r4, r7, lr}
20000132:	b08b      	sub	sp, #44	; 0x2c
20000134:	af00      	add	r7, sp, #0
20000136:	6078      	str	r0, [r7, #4]
20000138:	000a      	movs	r2, r1
2000013a:	1cfb      	adds	r3, r7, #3
2000013c:	701a      	strb	r2, [r3, #0]
    unsigned short result[] = {
2000013e:	2308      	movs	r3, #8
20000140:	18fb      	adds	r3, r7, r3
20000142:	4a0e      	ldr	r2, [pc, #56]	; (2000017c <out7seg+0x4c>)
20000144:	ca13      	ldmia	r2!, {r0, r1, r4}
20000146:	c313      	stmia	r3!, {r0, r1, r4}
20000148:	ca13      	ldmia	r2!, {r0, r1, r4}
2000014a:	c313      	stmia	r3!, {r0, r1, r4}
2000014c:	ca03      	ldmia	r2!, {r0, r1}
2000014e:	c303      	stmia	r3!, {r0, r1}
	0x5E, // D
	0x80, // E
	0x76  // F
    };

    if(c > 0xF) {
20000150:	1cfb      	adds	r3, r7, #3
20000152:	781b      	ldrb	r3, [r3, #0]
20000154:	2b0f      	cmp	r3, #15
20000156:	d903      	bls.n	20000160 <out7seg+0x30>
	_gpio->odrLow = 0x00;
20000158:	687b      	ldr	r3, [r7, #4]
2000015a:	2200      	movs	r2, #0
2000015c:	751a      	strb	r2, [r3, #20]
    } else {
	_gpio->odrLow = result[c];
    }
}
2000015e:	e008      	b.n	20000172 <out7seg+0x42>
	_gpio->odrLow = result[c];
20000160:	1cfb      	adds	r3, r7, #3
20000162:	781a      	ldrb	r2, [r3, #0]
20000164:	2308      	movs	r3, #8
20000166:	18fb      	adds	r3, r7, r3
20000168:	0052      	lsls	r2, r2, #1
2000016a:	5ad3      	ldrh	r3, [r2, r3]
2000016c:	b2da      	uxtb	r2, r3
2000016e:	687b      	ldr	r3, [r7, #4]
20000170:	751a      	strb	r2, [r3, #20]
}
20000172:	46c0      	nop			; (mov r8, r8)
20000174:	46bd      	mov	sp, r7
20000176:	b00b      	add	sp, #44	; 0x2c
20000178:	bd90      	pop	{r4, r7, pc}
2000017a:	46c0      	nop			; (mov r8, r8)
2000017c:	200012f0 	strdcs	r1, [r0], -r0

20000180 <activate_row>:

void activate_row(GPIO* _gpio, unsigned char row)
{
20000180:	b580      	push	{r7, lr}
20000182:	b082      	sub	sp, #8
20000184:	af00      	add	r7, sp, #0
20000186:	6078      	str	r0, [r7, #4]
20000188:	000a      	movs	r2, r1
2000018a:	1cfb      	adds	r3, r7, #3
2000018c:	701a      	strb	r2, [r3, #0]
    switch(row) {
2000018e:	1cfb      	adds	r3, r7, #3
20000190:	781b      	ldrb	r3, [r3, #0]
20000192:	2b01      	cmp	r3, #1
20000194:	d00c      	beq.n	200001b0 <activate_row+0x30>
20000196:	dc02      	bgt.n	2000019e <activate_row+0x1e>
20000198:	2b00      	cmp	r3, #0
2000019a:	d005      	beq.n	200001a8 <activate_row+0x28>
	break;
    case 3:
	_gpio->odrHigh = 0x80;
	break;
    }
}
2000019c:	e014      	b.n	200001c8 <activate_row+0x48>
    switch(row) {
2000019e:	2b02      	cmp	r3, #2
200001a0:	d00a      	beq.n	200001b8 <activate_row+0x38>
200001a2:	2b03      	cmp	r3, #3
200001a4:	d00c      	beq.n	200001c0 <activate_row+0x40>
}
200001a6:	e00f      	b.n	200001c8 <activate_row+0x48>
	_gpio->odrHigh = 0x10;
200001a8:	687b      	ldr	r3, [r7, #4]
200001aa:	2210      	movs	r2, #16
200001ac:	755a      	strb	r2, [r3, #21]
	break;
200001ae:	e00b      	b.n	200001c8 <activate_row+0x48>
	_gpio->odrHigh = 0x20;
200001b0:	687b      	ldr	r3, [r7, #4]
200001b2:	2220      	movs	r2, #32
200001b4:	755a      	strb	r2, [r3, #21]
	break;
200001b6:	e007      	b.n	200001c8 <activate_row+0x48>
	_gpio->odrHigh = 0x40;
200001b8:	687b      	ldr	r3, [r7, #4]
200001ba:	2240      	movs	r2, #64	; 0x40
200001bc:	755a      	strb	r2, [r3, #21]
	break;
200001be:	e003      	b.n	200001c8 <activate_row+0x48>
	_gpio->odrHigh = 0x80;
200001c0:	687b      	ldr	r3, [r7, #4]
200001c2:	2280      	movs	r2, #128	; 0x80
200001c4:	755a      	strb	r2, [r3, #21]
	break;
200001c6:	46c0      	nop			; (mov r8, r8)
}
200001c8:	46c0      	nop			; (mov r8, r8)
200001ca:	46bd      	mov	sp, r7
200001cc:	b002      	add	sp, #8
200001ce:	bd80      	pop	{r7, pc}

200001d0 <deactivate_rows>:

void deactivate_rows(GPIO* _gpio)
{
200001d0:	b580      	push	{r7, lr}
200001d2:	b082      	sub	sp, #8
200001d4:	af00      	add	r7, sp, #0
200001d6:	6078      	str	r0, [r7, #4]
    _gpio->odrHigh = 0x00;
200001d8:	687b      	ldr	r3, [r7, #4]
200001da:	2200      	movs	r2, #0
200001dc:	755a      	strb	r2, [r3, #21]
}
200001de:	46c0      	nop			; (mov r8, r8)
200001e0:	46bd      	mov	sp, r7
200001e2:	b002      	add	sp, #8
200001e4:	bd80      	pop	{r7, pc}

200001e6 <read_col>:

unsigned char read_col(GPIO* _gpio)
{
200001e6:	b580      	push	{r7, lr}
200001e8:	b082      	sub	sp, #8
200001ea:	af00      	add	r7, sp, #0
200001ec:	6078      	str	r0, [r7, #4]
    if(_gpio->idrHigh & 0x01)
200001ee:	687b      	ldr	r3, [r7, #4]
200001f0:	7c5b      	ldrb	r3, [r3, #17]
200001f2:	001a      	movs	r2, r3
200001f4:	2301      	movs	r3, #1
200001f6:	4013      	ands	r3, r2
200001f8:	d001      	beq.n	200001fe <read_col+0x18>
	return 0;
200001fa:	2300      	movs	r3, #0
200001fc:	e018      	b.n	20000230 <read_col+0x4a>
    if(_gpio->idrHigh & 0x02)
200001fe:	687b      	ldr	r3, [r7, #4]
20000200:	7c5b      	ldrb	r3, [r3, #17]
20000202:	001a      	movs	r2, r3
20000204:	2302      	movs	r3, #2
20000206:	4013      	ands	r3, r2
20000208:	d001      	beq.n	2000020e <read_col+0x28>
	return 1;
2000020a:	2301      	movs	r3, #1
2000020c:	e010      	b.n	20000230 <read_col+0x4a>
    if(_gpio->idrHigh & 0x04)
2000020e:	687b      	ldr	r3, [r7, #4]
20000210:	7c5b      	ldrb	r3, [r3, #17]
20000212:	001a      	movs	r2, r3
20000214:	2304      	movs	r3, #4
20000216:	4013      	ands	r3, r2
20000218:	d001      	beq.n	2000021e <read_col+0x38>
	return 2;
2000021a:	2302      	movs	r3, #2
2000021c:	e008      	b.n	20000230 <read_col+0x4a>
    if(_gpio->idrHigh & 0x08)
2000021e:	687b      	ldr	r3, [r7, #4]
20000220:	7c5b      	ldrb	r3, [r3, #17]
20000222:	001a      	movs	r2, r3
20000224:	2308      	movs	r3, #8
20000226:	4013      	ands	r3, r2
20000228:	d001      	beq.n	2000022e <read_col+0x48>
	return 3;
2000022a:	2303      	movs	r3, #3
2000022c:	e000      	b.n	20000230 <read_col+0x4a>
    return 0xFF;
2000022e:	23ff      	movs	r3, #255	; 0xff
}
20000230:	0018      	movs	r0, r3
20000232:	46bd      	mov	sp, r7
20000234:	b002      	add	sp, #8
20000236:	bd80      	pop	{r7, pc}

20000238 <setup_for_ascii_display>:

void setup_for_ascii_display()
{
20000238:	b580      	push	{r7, lr}
2000023a:	af00      	add	r7, sp, #0
    // Sätt alla pinnar till utportar.
    GPIO_E->moder = 0x55555555;
2000023c:	4b03      	ldr	r3, [pc, #12]	; (2000024c <setup_for_ascii_display+0x14>)
2000023e:	4a04      	ldr	r2, [pc, #16]	; (20000250 <setup_for_ascii_display+0x18>)
20000240:	601a      	str	r2, [r3, #0]
    // GPIO_E->ospeedr = 0x00000000;

    // inportar är "pull-up"
    // GPIO_E->pupdr = 0x55550000;

    ascii_init();
20000242:	f000 f807 	bl	20000254 <ascii_init>
}
20000246:	46c0      	nop			; (mov r8, r8)
20000248:	46bd      	mov	sp, r7
2000024a:	bd80      	pop	{r7, pc}
2000024c:	40021000 	andmi	r1, r2, r0
20000250:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000254 <ascii_init>:

void ascii_init(void)
{
20000254:	b580      	push	{r7, lr}
20000256:	af00      	add	r7, sp, #0
    while((ascii_read_status() & 0x80) == 0x80) {
20000258:	46c0      	nop			; (mov r8, r8)
2000025a:	f000 f8bd 	bl	200003d8 <ascii_read_status>
2000025e:	0003      	movs	r3, r0
20000260:	001a      	movs	r2, r3
20000262:	2380      	movs	r3, #128	; 0x80
20000264:	4013      	ands	r3, r2
20000266:	2b80      	cmp	r3, #128	; 0x80
20000268:	d0f7      	beq.n	2000025a <ascii_init+0x6>
    } // vänta tills display är klar att ta emot komando.
    delay_mikro(20);
2000026a:	2014      	movs	r0, #20
2000026c:	f000 fe06 	bl	20000e7c <delay_mikro>
    // Function Set - 2 rader, 5x8 punkters tecken.
    ascii_write_cmd(0x38);
20000270:	2038      	movs	r0, #56	; 0x38
20000272:	f000 f887 	bl	20000384 <ascii_write_cmd>
    delay_mikro(39);
20000276:	2027      	movs	r0, #39	; 0x27
20000278:	f000 fe00 	bl	20000e7c <delay_mikro>

    while((ascii_read_status() & 0x80) == 0x80) {
2000027c:	46c0      	nop			; (mov r8, r8)
2000027e:	f000 f8ab 	bl	200003d8 <ascii_read_status>
20000282:	0003      	movs	r3, r0
20000284:	001a      	movs	r2, r3
20000286:	2380      	movs	r3, #128	; 0x80
20000288:	4013      	ands	r3, r2
2000028a:	2b80      	cmp	r3, #128	; 0x80
2000028c:	d0f7      	beq.n	2000027e <ascii_init+0x2a>
    } // vänta tills display är klar att ta emot komando.
    delay_mikro(20);
2000028e:	2014      	movs	r0, #20
20000290:	f000 fdf4 	bl	20000e7c <delay_mikro>
    // Tänd display, tänd markör ("cursor"), konstant visning.
    ascii_write_cmd(0x0E);
20000294:	200e      	movs	r0, #14
20000296:	f000 f875 	bl	20000384 <ascii_write_cmd>
    delay_mikro(39);
2000029a:	2027      	movs	r0, #39	; 0x27
2000029c:	f000 fdee 	bl	20000e7c <delay_mikro>

    while((ascii_read_status() & 0x80) == 0x80) {
200002a0:	46c0      	nop			; (mov r8, r8)
200002a2:	f000 f899 	bl	200003d8 <ascii_read_status>
200002a6:	0003      	movs	r3, r0
200002a8:	001a      	movs	r2, r3
200002aa:	2380      	movs	r3, #128	; 0x80
200002ac:	4013      	ands	r3, r2
200002ae:	2b80      	cmp	r3, #128	; 0x80
200002b0:	d0f7      	beq.n	200002a2 <ascii_init+0x4e>
    } // vänta tills display är klar att ta emot komando.
    delay_mikro(20);
200002b2:	2014      	movs	r0, #20
200002b4:	f000 fde2 	bl	20000e7c <delay_mikro>
    // Clear display.
    ascii_write_cmd(0x01);
200002b8:	2001      	movs	r0, #1
200002ba:	f000 f863 	bl	20000384 <ascii_write_cmd>
    delay_mikro(39);
200002be:	2027      	movs	r0, #39	; 0x27
200002c0:	f000 fddc 	bl	20000e7c <delay_mikro>

    while((ascii_read_status() & 0x80) == 0x80) {
200002c4:	46c0      	nop			; (mov r8, r8)
200002c6:	f000 f887 	bl	200003d8 <ascii_read_status>
200002ca:	0003      	movs	r3, r0
200002cc:	001a      	movs	r2, r3
200002ce:	2380      	movs	r3, #128	; 0x80
200002d0:	4013      	ands	r3, r2
200002d2:	2b80      	cmp	r3, #128	; 0x80
200002d4:	d0f7      	beq.n	200002c6 <ascii_init+0x72>
    } // vänta tills display är klar att ta emot komando.
    delay_mikro(20);
200002d6:	2014      	movs	r0, #20
200002d8:	f000 fdd0 	bl	20000e7c <delay_mikro>
    // Adressering med "increment", inget skift av adressbuffern.
    ascii_write_cmd(0x06);
200002dc:	2006      	movs	r0, #6
200002de:	f000 f851 	bl	20000384 <ascii_write_cmd>
    delay_mikro(39);
200002e2:	2027      	movs	r0, #39	; 0x27
200002e4:	f000 fdca 	bl	20000e7c <delay_mikro>
}
200002e8:	46c0      	nop			; (mov r8, r8)
200002ea:	46bd      	mov	sp, r7
200002ec:	bd80      	pop	{r7, pc}

200002ee <ascii_ctrl_bit_set>:

void ascii_ctrl_bit_set(unsigned char x)
{
200002ee:	b580      	push	{r7, lr}
200002f0:	b084      	sub	sp, #16
200002f2:	af00      	add	r7, sp, #0
200002f4:	0002      	movs	r2, r0
200002f6:	1dfb      	adds	r3, r7, #7
200002f8:	701a      	strb	r2, [r3, #0]
    // GPIO_E->odrLow |= x;

    unsigned char c;
    c = GPIO_E->odrLow;
200002fa:	4a0d      	ldr	r2, [pc, #52]	; (20000330 <ascii_ctrl_bit_set+0x42>)
200002fc:	230f      	movs	r3, #15
200002fe:	18fb      	adds	r3, r7, r3
20000300:	7d12      	ldrb	r2, [r2, #20]
20000302:	701a      	strb	r2, [r3, #0]
    c |= (B_SELECT | x);
20000304:	1dfa      	adds	r2, r7, #7
20000306:	230f      	movs	r3, #15
20000308:	18fb      	adds	r3, r7, r3
2000030a:	7812      	ldrb	r2, [r2, #0]
2000030c:	781b      	ldrb	r3, [r3, #0]
2000030e:	4313      	orrs	r3, r2
20000310:	b2da      	uxtb	r2, r3
20000312:	230f      	movs	r3, #15
20000314:	18fb      	adds	r3, r7, r3
20000316:	2104      	movs	r1, #4
20000318:	430a      	orrs	r2, r1
2000031a:	701a      	strb	r2, [r3, #0]
    GPIO_E->odrLow = c;
2000031c:	4a04      	ldr	r2, [pc, #16]	; (20000330 <ascii_ctrl_bit_set+0x42>)
2000031e:	230f      	movs	r3, #15
20000320:	18fb      	adds	r3, r7, r3
20000322:	781b      	ldrb	r3, [r3, #0]
20000324:	7513      	strb	r3, [r2, #20]
}
20000326:	46c0      	nop			; (mov r8, r8)
20000328:	46bd      	mov	sp, r7
2000032a:	b004      	add	sp, #16
2000032c:	bd80      	pop	{r7, pc}
2000032e:	46c0      	nop			; (mov r8, r8)
20000330:	40021000 	andmi	r1, r2, r0

20000334 <ascii_ctrl_bit_clear>:

void ascii_ctrl_bit_clear(unsigned char x)
{
20000334:	b580      	push	{r7, lr}
20000336:	b084      	sub	sp, #16
20000338:	af00      	add	r7, sp, #0
2000033a:	0002      	movs	r2, r0
2000033c:	1dfb      	adds	r3, r7, #7
2000033e:	701a      	strb	r2, [r3, #0]
    // GPIO_E->odrLow &= (~x);

    unsigned char c;
    c = GPIO_E->odrLow;
20000340:	4a0f      	ldr	r2, [pc, #60]	; (20000380 <ascii_ctrl_bit_clear+0x4c>)
20000342:	230f      	movs	r3, #15
20000344:	18fb      	adds	r3, r7, r3
20000346:	7d12      	ldrb	r2, [r2, #20]
20000348:	701a      	strb	r2, [r3, #0]
    c = (B_SELECT | c & ~x);
2000034a:	1dfb      	adds	r3, r7, #7
2000034c:	781b      	ldrb	r3, [r3, #0]
2000034e:	b25b      	sxtb	r3, r3
20000350:	43db      	mvns	r3, r3
20000352:	b25b      	sxtb	r3, r3
20000354:	220f      	movs	r2, #15
20000356:	18ba      	adds	r2, r7, r2
20000358:	7812      	ldrb	r2, [r2, #0]
2000035a:	b252      	sxtb	r2, r2
2000035c:	4013      	ands	r3, r2
2000035e:	b25b      	sxtb	r3, r3
20000360:	2204      	movs	r2, #4
20000362:	4313      	orrs	r3, r2
20000364:	b25a      	sxtb	r2, r3
20000366:	230f      	movs	r3, #15
20000368:	18fb      	adds	r3, r7, r3
2000036a:	701a      	strb	r2, [r3, #0]
    GPIO_E->odrLow = c;
2000036c:	4a04      	ldr	r2, [pc, #16]	; (20000380 <ascii_ctrl_bit_clear+0x4c>)
2000036e:	230f      	movs	r3, #15
20000370:	18fb      	adds	r3, r7, r3
20000372:	781b      	ldrb	r3, [r3, #0]
20000374:	7513      	strb	r3, [r2, #20]
}
20000376:	46c0      	nop			; (mov r8, r8)
20000378:	46bd      	mov	sp, r7
2000037a:	b004      	add	sp, #16
2000037c:	bd80      	pop	{r7, pc}
2000037e:	46c0      	nop			; (mov r8, r8)
20000380:	40021000 	andmi	r1, r2, r0

20000384 <ascii_write_cmd>:

void ascii_write_cmd(unsigned char command)
{
20000384:	b580      	push	{r7, lr}
20000386:	b082      	sub	sp, #8
20000388:	af00      	add	r7, sp, #0
2000038a:	0002      	movs	r2, r0
2000038c:	1dfb      	adds	r3, r7, #7
2000038e:	701a      	strb	r2, [r3, #0]
    // Doesn't wait or check for the status flag...
    ascii_ctrl_bit_clear(B_RS);
20000390:	2001      	movs	r0, #1
20000392:	f7ff ffcf 	bl	20000334 <ascii_ctrl_bit_clear>
    ascii_ctrl_bit_clear(B_RW);
20000396:	2002      	movs	r0, #2
20000398:	f7ff ffcc 	bl	20000334 <ascii_ctrl_bit_clear>
    ascii_write_controller(command);
2000039c:	1dfb      	adds	r3, r7, #7
2000039e:	781b      	ldrb	r3, [r3, #0]
200003a0:	0018      	movs	r0, r3
200003a2:	f000 f861 	bl	20000468 <ascii_write_controller>
}
200003a6:	46c0      	nop			; (mov r8, r8)
200003a8:	46bd      	mov	sp, r7
200003aa:	b002      	add	sp, #8
200003ac:	bd80      	pop	{r7, pc}

200003ae <ascii_write_data>:

void ascii_write_data(unsigned char data)
{
200003ae:	b580      	push	{r7, lr}
200003b0:	b082      	sub	sp, #8
200003b2:	af00      	add	r7, sp, #0
200003b4:	0002      	movs	r2, r0
200003b6:	1dfb      	adds	r3, r7, #7
200003b8:	701a      	strb	r2, [r3, #0]
    ascii_ctrl_bit_set(B_RS);
200003ba:	2001      	movs	r0, #1
200003bc:	f7ff ff97 	bl	200002ee <ascii_ctrl_bit_set>
    ascii_ctrl_bit_clear(B_RW);
200003c0:	2002      	movs	r0, #2
200003c2:	f7ff ffb7 	bl	20000334 <ascii_ctrl_bit_clear>
    ascii_write_controller(data);
200003c6:	1dfb      	adds	r3, r7, #7
200003c8:	781b      	ldrb	r3, [r3, #0]
200003ca:	0018      	movs	r0, r3
200003cc:	f000 f84c 	bl	20000468 <ascii_write_controller>
}
200003d0:	46c0      	nop			; (mov r8, r8)
200003d2:	46bd      	mov	sp, r7
200003d4:	b002      	add	sp, #8
200003d6:	bd80      	pop	{r7, pc}

200003d8 <ascii_read_status>:

unsigned char ascii_read_status(void)
{
200003d8:	b590      	push	{r4, r7, lr}
200003da:	b083      	sub	sp, #12
200003dc:	af00      	add	r7, sp, #0
    unsigned char read_value;

    // Sätt pinnar 15-8 till ingångar.
    GPIO_E->moder &= 0x0000FFFF;
200003de:	4b0e      	ldr	r3, [pc, #56]	; (20000418 <ascii_read_status+0x40>)
200003e0:	4a0d      	ldr	r2, [pc, #52]	; (20000418 <ascii_read_status+0x40>)
200003e2:	6812      	ldr	r2, [r2, #0]
200003e4:	0412      	lsls	r2, r2, #16
200003e6:	0c12      	lsrs	r2, r2, #16
200003e8:	601a      	str	r2, [r3, #0]

    ascii_ctrl_bit_clear(B_RS);
200003ea:	2001      	movs	r0, #1
200003ec:	f7ff ffa2 	bl	20000334 <ascii_ctrl_bit_clear>
    ascii_ctrl_bit_set(B_RW);
200003f0:	2002      	movs	r0, #2
200003f2:	f7ff ff7c 	bl	200002ee <ascii_ctrl_bit_set>
    read_value = ascii_read_controller();
200003f6:	1dfc      	adds	r4, r7, #7
200003f8:	f000 f84e 	bl	20000498 <ascii_read_controller>
200003fc:	0003      	movs	r3, r0
200003fe:	7023      	strb	r3, [r4, #0]

    // Sätt pinnar 15-8 till utgångar igen.
    GPIO_E->moder |= 0x55550000;
20000400:	4b05      	ldr	r3, [pc, #20]	; (20000418 <ascii_read_status+0x40>)
20000402:	4a05      	ldr	r2, [pc, #20]	; (20000418 <ascii_read_status+0x40>)
20000404:	6812      	ldr	r2, [r2, #0]
20000406:	4905      	ldr	r1, [pc, #20]	; (2000041c <ascii_read_status+0x44>)
20000408:	430a      	orrs	r2, r1
2000040a:	601a      	str	r2, [r3, #0]

    return read_value;
2000040c:	1dfb      	adds	r3, r7, #7
2000040e:	781b      	ldrb	r3, [r3, #0]
}
20000410:	0018      	movs	r0, r3
20000412:	46bd      	mov	sp, r7
20000414:	b003      	add	sp, #12
20000416:	bd90      	pop	{r4, r7, pc}
20000418:	40021000 	andmi	r1, r2, r0
2000041c:	55550000 	ldrbpl	r0, [r5, #-0]

20000420 <ascii_read_data>:

unsigned char ascii_read_data(void)
{
20000420:	b590      	push	{r4, r7, lr}
20000422:	b083      	sub	sp, #12
20000424:	af00      	add	r7, sp, #0
    unsigned char read_value;

    // Sätt pinnar 15-8 till ingångar.
    GPIO_E->moder &= 0x0000FFFF;
20000426:	4b0e      	ldr	r3, [pc, #56]	; (20000460 <ascii_read_data+0x40>)
20000428:	4a0d      	ldr	r2, [pc, #52]	; (20000460 <ascii_read_data+0x40>)
2000042a:	6812      	ldr	r2, [r2, #0]
2000042c:	0412      	lsls	r2, r2, #16
2000042e:	0c12      	lsrs	r2, r2, #16
20000430:	601a      	str	r2, [r3, #0]

    ascii_ctrl_bit_set(B_RS);
20000432:	2001      	movs	r0, #1
20000434:	f7ff ff5b 	bl	200002ee <ascii_ctrl_bit_set>
    ascii_ctrl_bit_set(B_RW);
20000438:	2002      	movs	r0, #2
2000043a:	f7ff ff58 	bl	200002ee <ascii_ctrl_bit_set>
    read_value = ascii_read_controller();
2000043e:	1dfc      	adds	r4, r7, #7
20000440:	f000 f82a 	bl	20000498 <ascii_read_controller>
20000444:	0003      	movs	r3, r0
20000446:	7023      	strb	r3, [r4, #0]

    // Sätt pinnar 15-8 till utgångar igen.
    GPIO_E->moder |= 0xFFFF0000;
20000448:	4b05      	ldr	r3, [pc, #20]	; (20000460 <ascii_read_data+0x40>)
2000044a:	4a05      	ldr	r2, [pc, #20]	; (20000460 <ascii_read_data+0x40>)
2000044c:	6812      	ldr	r2, [r2, #0]
2000044e:	4905      	ldr	r1, [pc, #20]	; (20000464 <ascii_read_data+0x44>)
20000450:	430a      	orrs	r2, r1
20000452:	601a      	str	r2, [r3, #0]

    return read_value;
20000454:	1dfb      	adds	r3, r7, #7
20000456:	781b      	ldrb	r3, [r3, #0]
}
20000458:	0018      	movs	r0, r3
2000045a:	46bd      	mov	sp, r7
2000045c:	b003      	add	sp, #12
2000045e:	bd90      	pop	{r4, r7, pc}
20000460:	40021000 	andmi	r1, r2, r0
20000464:	ffff0000 			; <UNDEFINED> instruction: 0xffff0000

20000468 <ascii_write_controller>:

void ascii_write_controller(unsigned char byte)
{
20000468:	b580      	push	{r7, lr}
2000046a:	b082      	sub	sp, #8
2000046c:	af00      	add	r7, sp, #0
2000046e:	0002      	movs	r2, r0
20000470:	1dfb      	adds	r3, r7, #7
20000472:	701a      	strb	r2, [r3, #0]
    // Delay40ns is redundant
    ascii_ctrl_bit_set(B_E);
20000474:	2040      	movs	r0, #64	; 0x40
20000476:	f7ff ff3a 	bl	200002ee <ascii_ctrl_bit_set>
    GPIO_E->odrHigh = byte;
2000047a:	4a06      	ldr	r2, [pc, #24]	; (20000494 <ascii_write_controller+0x2c>)
2000047c:	1dfb      	adds	r3, r7, #7
2000047e:	781b      	ldrb	r3, [r3, #0]
20000480:	7553      	strb	r3, [r2, #21]
    delay_250ns();
20000482:	f000 fcd3 	bl	20000e2c <delay_250ns>
    ascii_ctrl_bit_clear(B_E);
20000486:	2040      	movs	r0, #64	; 0x40
20000488:	f7ff ff54 	bl	20000334 <ascii_ctrl_bit_clear>
    // Delay10ns is redundant
}
2000048c:	46c0      	nop			; (mov r8, r8)
2000048e:	46bd      	mov	sp, r7
20000490:	b002      	add	sp, #8
20000492:	bd80      	pop	{r7, pc}
20000494:	40021000 	andmi	r1, r2, r0

20000498 <ascii_read_controller>:

unsigned char ascii_read_controller(void)
{
20000498:	b580      	push	{r7, lr}
2000049a:	b082      	sub	sp, #8
2000049c:	af00      	add	r7, sp, #0
    unsigned char read_value;
    ascii_ctrl_bit_set(B_E);
2000049e:	2040      	movs	r0, #64	; 0x40
200004a0:	f7ff ff25 	bl	200002ee <ascii_ctrl_bit_set>
    delay_250ns();
200004a4:	f000 fcc2 	bl	20000e2c <delay_250ns>
    delay_250ns();
200004a8:	f000 fcc0 	bl	20000e2c <delay_250ns>
    read_value = GPIO_E->idrHigh;
200004ac:	4a06      	ldr	r2, [pc, #24]	; (200004c8 <ascii_read_controller+0x30>)
200004ae:	1dfb      	adds	r3, r7, #7
200004b0:	7c52      	ldrb	r2, [r2, #17]
200004b2:	701a      	strb	r2, [r3, #0]
    ascii_ctrl_bit_clear(B_E);
200004b4:	2040      	movs	r0, #64	; 0x40
200004b6:	f7ff ff3d 	bl	20000334 <ascii_ctrl_bit_clear>
    return read_value;
200004ba:	1dfb      	adds	r3, r7, #7
200004bc:	781b      	ldrb	r3, [r3, #0]
}
200004be:	0018      	movs	r0, r3
200004c0:	46bd      	mov	sp, r7
200004c2:	b002      	add	sp, #8
200004c4:	bd80      	pop	{r7, pc}
200004c6:	46c0      	nop			; (mov r8, r8)
200004c8:	40021000 	andmi	r1, r2, r0

200004cc <ascii_gotoxy>:

void ascii_gotoxy(int x, int y)
{
200004cc:	b580      	push	{r7, lr}
200004ce:	b084      	sub	sp, #16
200004d0:	af00      	add	r7, sp, #0
200004d2:	6078      	str	r0, [r7, #4]
200004d4:	6039      	str	r1, [r7, #0]
    if(!(y == 1 || y == 2))
200004d6:	683b      	ldr	r3, [r7, #0]
200004d8:	2b01      	cmp	r3, #1
200004da:	d002      	beq.n	200004e2 <ascii_gotoxy+0x16>
200004dc:	683b      	ldr	r3, [r7, #0]
200004de:	2b02      	cmp	r3, #2
200004e0:	d11a      	bne.n	20000518 <ascii_gotoxy+0x4c>
	return;
    unsigned char address = x - 1;
200004e2:	687b      	ldr	r3, [r7, #4]
200004e4:	b2da      	uxtb	r2, r3
200004e6:	230f      	movs	r3, #15
200004e8:	18fb      	adds	r3, r7, r3
200004ea:	3a01      	subs	r2, #1
200004ec:	701a      	strb	r2, [r3, #0]
    if(y == 2) {
200004ee:	683b      	ldr	r3, [r7, #0]
200004f0:	2b02      	cmp	r3, #2
200004f2:	d106      	bne.n	20000502 <ascii_gotoxy+0x36>
	address += 0x40;
200004f4:	230f      	movs	r3, #15
200004f6:	18fb      	adds	r3, r7, r3
200004f8:	220f      	movs	r2, #15
200004fa:	18ba      	adds	r2, r7, r2
200004fc:	7812      	ldrb	r2, [r2, #0]
200004fe:	3240      	adds	r2, #64	; 0x40
20000500:	701a      	strb	r2, [r3, #0]
    }
    ascii_write_cmd(0x80 | address);
20000502:	230f      	movs	r3, #15
20000504:	18fb      	adds	r3, r7, r3
20000506:	781b      	ldrb	r3, [r3, #0]
20000508:	2280      	movs	r2, #128	; 0x80
2000050a:	4252      	negs	r2, r2
2000050c:	4313      	orrs	r3, r2
2000050e:	b2db      	uxtb	r3, r3
20000510:	0018      	movs	r0, r3
20000512:	f7ff ff37 	bl	20000384 <ascii_write_cmd>
20000516:	e000      	b.n	2000051a <ascii_gotoxy+0x4e>
	return;
20000518:	46c0      	nop			; (mov r8, r8)
}
2000051a:	46bd      	mov	sp, r7
2000051c:	b004      	add	sp, #16
2000051e:	bd80      	pop	{r7, pc}

20000520 <ascii_write_char>:

void ascii_write_char(unsigned char c)
{
20000520:	b580      	push	{r7, lr}
20000522:	b082      	sub	sp, #8
20000524:	af00      	add	r7, sp, #0
20000526:	0002      	movs	r2, r0
20000528:	1dfb      	adds	r3, r7, #7
2000052a:	701a      	strb	r2, [r3, #0]
    while((ascii_read_status() & 0x80) == 0x80) {
2000052c:	46c0      	nop			; (mov r8, r8)
2000052e:	f7ff ff53 	bl	200003d8 <ascii_read_status>
20000532:	0003      	movs	r3, r0
20000534:	001a      	movs	r2, r3
20000536:	2380      	movs	r3, #128	; 0x80
20000538:	4013      	ands	r3, r2
2000053a:	2b80      	cmp	r3, #128	; 0x80
2000053c:	d0f7      	beq.n	2000052e <ascii_write_char+0xe>
    } // vänta tills display är klar att ta emot komando.
    delay_mikro(8);
2000053e:	2008      	movs	r0, #8
20000540:	f000 fc9c 	bl	20000e7c <delay_mikro>
    ascii_write_data(c);
20000544:	1dfb      	adds	r3, r7, #7
20000546:	781b      	ldrb	r3, [r3, #0]
20000548:	0018      	movs	r0, r3
2000054a:	f7ff ff30 	bl	200003ae <ascii_write_data>
    delay_mikro(43);
2000054e:	202b      	movs	r0, #43	; 0x2b
20000550:	f000 fc94 	bl	20000e7c <delay_mikro>
    // delay_mikro(100000);
}
20000554:	46c0      	nop			; (mov r8, r8)
20000556:	46bd      	mov	sp, r7
20000558:	b002      	add	sp, #8
2000055a:	bd80      	pop	{r7, pc}

2000055c <graphic_ctrl_bit_set>:

#define Lab 3

/* välj grafik-display och ettställ de bitar som är 1 i x */
void graphic_ctrl_bit_set(uint8_t x)
{
2000055c:	b580      	push	{r7, lr}
2000055e:	b084      	sub	sp, #16
20000560:	af00      	add	r7, sp, #0
20000562:	0002      	movs	r2, r0
20000564:	1dfb      	adds	r3, r7, #7
20000566:	701a      	strb	r2, [r3, #0]
    uint8_t c;
    c = GPIO_E->odrLow;
20000568:	4a12      	ldr	r2, [pc, #72]	; (200005b4 <graphic_ctrl_bit_set+0x58>)
2000056a:	230f      	movs	r3, #15
2000056c:	18fb      	adds	r3, r7, r3
2000056e:	7d12      	ldrb	r2, [r2, #20]
20000570:	701a      	strb	r2, [r3, #0]
    c &= ~B_SELECT;
20000572:	230f      	movs	r3, #15
20000574:	18fb      	adds	r3, r7, r3
20000576:	220f      	movs	r2, #15
20000578:	18ba      	adds	r2, r7, r2
2000057a:	7812      	ldrb	r2, [r2, #0]
2000057c:	2104      	movs	r1, #4
2000057e:	438a      	bics	r2, r1
20000580:	701a      	strb	r2, [r3, #0]
    c |= (~B_SELECT & x);
20000582:	1dfb      	adds	r3, r7, #7
20000584:	781b      	ldrb	r3, [r3, #0]
20000586:	b25b      	sxtb	r3, r3
20000588:	2204      	movs	r2, #4
2000058a:	4393      	bics	r3, r2
2000058c:	b25a      	sxtb	r2, r3
2000058e:	230f      	movs	r3, #15
20000590:	18fb      	adds	r3, r7, r3
20000592:	781b      	ldrb	r3, [r3, #0]
20000594:	b25b      	sxtb	r3, r3
20000596:	4313      	orrs	r3, r2
20000598:	b25a      	sxtb	r2, r3
2000059a:	230f      	movs	r3, #15
2000059c:	18fb      	adds	r3, r7, r3
2000059e:	701a      	strb	r2, [r3, #0]
    GPIO_E->odrLow = c;
200005a0:	4a04      	ldr	r2, [pc, #16]	; (200005b4 <graphic_ctrl_bit_set+0x58>)
200005a2:	230f      	movs	r3, #15
200005a4:	18fb      	adds	r3, r7, r3
200005a6:	781b      	ldrb	r3, [r3, #0]
200005a8:	7513      	strb	r3, [r2, #20]
}
200005aa:	46c0      	nop			; (mov r8, r8)
200005ac:	46bd      	mov	sp, r7
200005ae:	b004      	add	sp, #16
200005b0:	bd80      	pop	{r7, pc}
200005b2:	46c0      	nop			; (mov r8, r8)
200005b4:	40021000 	andmi	r1, r2, r0

200005b8 <graphic_ctrl_bit_clear>:

/* välj grafik-display och nollställ de bitar som är 1 i x */
void graphic_ctrl_bit_clear(uint8_t x)
{
200005b8:	b580      	push	{r7, lr}
200005ba:	b084      	sub	sp, #16
200005bc:	af00      	add	r7, sp, #0
200005be:	0002      	movs	r2, r0
200005c0:	1dfb      	adds	r3, r7, #7
200005c2:	701a      	strb	r2, [r3, #0]
    uint8_t c;
    c = GPIO_E->odrLow;
200005c4:	4a11      	ldr	r2, [pc, #68]	; (2000060c <graphic_ctrl_bit_clear+0x54>)
200005c6:	230f      	movs	r3, #15
200005c8:	18fb      	adds	r3, r7, r3
200005ca:	7d12      	ldrb	r2, [r2, #20]
200005cc:	701a      	strb	r2, [r3, #0]
    c &= ~B_SELECT;
200005ce:	230f      	movs	r3, #15
200005d0:	18fb      	adds	r3, r7, r3
200005d2:	220f      	movs	r2, #15
200005d4:	18ba      	adds	r2, r7, r2
200005d6:	7812      	ldrb	r2, [r2, #0]
200005d8:	2104      	movs	r1, #4
200005da:	438a      	bics	r2, r1
200005dc:	701a      	strb	r2, [r3, #0]
    c &= ~x;
200005de:	1dfb      	adds	r3, r7, #7
200005e0:	781b      	ldrb	r3, [r3, #0]
200005e2:	b25b      	sxtb	r3, r3
200005e4:	43db      	mvns	r3, r3
200005e6:	b25b      	sxtb	r3, r3
200005e8:	220f      	movs	r2, #15
200005ea:	18ba      	adds	r2, r7, r2
200005ec:	7812      	ldrb	r2, [r2, #0]
200005ee:	b252      	sxtb	r2, r2
200005f0:	4013      	ands	r3, r2
200005f2:	b25a      	sxtb	r2, r3
200005f4:	230f      	movs	r3, #15
200005f6:	18fb      	adds	r3, r7, r3
200005f8:	701a      	strb	r2, [r3, #0]
    GPIO_E->odrLow = c;
200005fa:	4a04      	ldr	r2, [pc, #16]	; (2000060c <graphic_ctrl_bit_clear+0x54>)
200005fc:	230f      	movs	r3, #15
200005fe:	18fb      	adds	r3, r7, r3
20000600:	781b      	ldrb	r3, [r3, #0]
20000602:	7513      	strb	r3, [r2, #20]
}
20000604:	46c0      	nop			; (mov r8, r8)
20000606:	46bd      	mov	sp, r7
20000608:	b004      	add	sp, #16
2000060a:	bd80      	pop	{r7, pc}
2000060c:	40021000 	andmi	r1, r2, r0

20000610 <select_controller>:

/* konfigurera cs-signalerna */
void select_controller(uint8_t controller)
{
20000610:	b580      	push	{r7, lr}
20000612:	b082      	sub	sp, #8
20000614:	af00      	add	r7, sp, #0
20000616:	0002      	movs	r2, r0
20000618:	1dfb      	adds	r3, r7, #7
2000061a:	701a      	strb	r2, [r3, #0]
    switch(controller) {
2000061c:	1dfb      	adds	r3, r7, #7
2000061e:	781b      	ldrb	r3, [r3, #0]
20000620:	2b08      	cmp	r3, #8
20000622:	d00c      	beq.n	2000063e <select_controller+0x2e>
20000624:	dc02      	bgt.n	2000062c <select_controller+0x1c>
20000626:	2b00      	cmp	r3, #0
20000628:	d005      	beq.n	20000636 <select_controller+0x26>
	break;
    case B_CS1 | B_CS2:
	graphic_ctrl_bit_set(B_CS1 | B_CS2);
	break;
    }
}
2000062a:	e01a      	b.n	20000662 <select_controller+0x52>
    switch(controller) {
2000062c:	2b10      	cmp	r3, #16
2000062e:	d00d      	beq.n	2000064c <select_controller+0x3c>
20000630:	2b18      	cmp	r3, #24
20000632:	d012      	beq.n	2000065a <select_controller+0x4a>
}
20000634:	e015      	b.n	20000662 <select_controller+0x52>
	graphic_ctrl_bit_clear(B_CS1 | B_CS2);
20000636:	2018      	movs	r0, #24
20000638:	f7ff ffbe 	bl	200005b8 <graphic_ctrl_bit_clear>
	break;
2000063c:	e011      	b.n	20000662 <select_controller+0x52>
	graphic_ctrl_bit_set(B_CS1);
2000063e:	2008      	movs	r0, #8
20000640:	f7ff ff8c 	bl	2000055c <graphic_ctrl_bit_set>
	graphic_ctrl_bit_clear(B_CS2);
20000644:	2010      	movs	r0, #16
20000646:	f7ff ffb7 	bl	200005b8 <graphic_ctrl_bit_clear>
	break;
2000064a:	e00a      	b.n	20000662 <select_controller+0x52>
	graphic_ctrl_bit_set(B_CS2);
2000064c:	2010      	movs	r0, #16
2000064e:	f7ff ff85 	bl	2000055c <graphic_ctrl_bit_set>
	graphic_ctrl_bit_clear(B_CS1);
20000652:	2008      	movs	r0, #8
20000654:	f7ff ffb0 	bl	200005b8 <graphic_ctrl_bit_clear>
	break;
20000658:	e003      	b.n	20000662 <select_controller+0x52>
	graphic_ctrl_bit_set(B_CS1 | B_CS2);
2000065a:	2018      	movs	r0, #24
2000065c:	f7ff ff7e 	bl	2000055c <graphic_ctrl_bit_set>
	break;
20000660:	46c0      	nop			; (mov r8, r8)
}
20000662:	46c0      	nop			; (mov r8, r8)
20000664:	46bd      	mov	sp, r7
20000666:	b002      	add	sp, #8
20000668:	bd80      	pop	{r7, pc}

2000066a <graphic_initialize>:

void graphic_initialize(void)
{
2000066a:	b580      	push	{r7, lr}
2000066c:	af00      	add	r7, sp, #0
    graphic_ctrl_bit_set(B_E);
2000066e:	2040      	movs	r0, #64	; 0x40
20000670:	f7ff ff74 	bl	2000055c <graphic_ctrl_bit_set>
    delay_mikro(10);
20000674:	200a      	movs	r0, #10
20000676:	f000 fc01 	bl	20000e7c <delay_mikro>
    graphic_ctrl_bit_clear(B_CS1 | B_CS2 | B_RST | B_E);
2000067a:	2078      	movs	r0, #120	; 0x78
2000067c:	f7ff ff9c 	bl	200005b8 <graphic_ctrl_bit_clear>
    delay_milli(30);
20000680:	201e      	movs	r0, #30
20000682:	f000 fc12 	bl	20000eaa <delay_milli>
    graphic_ctrl_bit_set(B_RST);
20000686:	2020      	movs	r0, #32
20000688:	f7ff ff68 	bl	2000055c <graphic_ctrl_bit_set>
    delay_milli(100);
2000068c:	2064      	movs	r0, #100	; 0x64
2000068e:	f000 fc0c 	bl	20000eaa <delay_milli>
    graphic_write_command(LCD_OFF, B_CS1 | B_CS2);
20000692:	2118      	movs	r1, #24
20000694:	203e      	movs	r0, #62	; 0x3e
20000696:	f000 f8df 	bl	20000858 <graphic_write_command>
    graphic_write_command(LCD_ON, B_CS1 | B_CS2);
2000069a:	2118      	movs	r1, #24
2000069c:	203f      	movs	r0, #63	; 0x3f
2000069e:	f000 f8db 	bl	20000858 <graphic_write_command>
    graphic_write_command(LCD_DISP_START, B_CS1 | B_CS2);
200006a2:	2118      	movs	r1, #24
200006a4:	20c0      	movs	r0, #192	; 0xc0
200006a6:	f000 f8d7 	bl	20000858 <graphic_write_command>
    graphic_write_command(LCD_SET_ADD, B_CS1 | B_CS2);
200006aa:	2118      	movs	r1, #24
200006ac:	2040      	movs	r0, #64	; 0x40
200006ae:	f000 f8d3 	bl	20000858 <graphic_write_command>
    graphic_write_command(LCD_SET_PAGE, B_CS1 | B_CS2);
200006b2:	2118      	movs	r1, #24
200006b4:	20b8      	movs	r0, #184	; 0xb8
200006b6:	f000 f8cf 	bl	20000858 <graphic_write_command>
    select_controller(0);
200006ba:	2000      	movs	r0, #0
200006bc:	f7ff ffa8 	bl	20000610 <select_controller>
}
200006c0:	46c0      	nop			; (mov r8, r8)
200006c2:	46bd      	mov	sp, r7
200006c4:	bd80      	pop	{r7, pc}

200006c6 <graphic_wait_ready>:

static void graphic_wait_ready(void)
{
200006c6:	b580      	push	{r7, lr}
200006c8:	b082      	sub	sp, #8
200006ca:	af00      	add	r7, sp, #0
    uint8_t c;
    graphic_ctrl_bit_clear(B_E);
200006cc:	2040      	movs	r0, #64	; 0x40
200006ce:	f7ff ff73 	bl	200005b8 <graphic_ctrl_bit_clear>
    GPIO_E->moder = 0x00005555; // 15-8 inputs, 7-0 outputs
200006d2:	4b14      	ldr	r3, [pc, #80]	; (20000724 <graphic_wait_ready+0x5e>)
200006d4:	4a14      	ldr	r2, [pc, #80]	; (20000728 <graphic_wait_ready+0x62>)
200006d6:	601a      	str	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_RS);
200006d8:	2001      	movs	r0, #1
200006da:	f7ff ff6d 	bl	200005b8 <graphic_ctrl_bit_clear>
    graphic_ctrl_bit_set(B_RW);
200006de:	2002      	movs	r0, #2
200006e0:	f7ff ff3c 	bl	2000055c <graphic_ctrl_bit_set>
    delay_500ns();
200006e4:	f000 fbb8 	bl	20000e58 <delay_500ns>
    while(1) {
	graphic_ctrl_bit_set(B_E);
200006e8:	2040      	movs	r0, #64	; 0x40
200006ea:	f7ff ff37 	bl	2000055c <graphic_ctrl_bit_set>
	delay_500ns();
200006ee:	f000 fbb3 	bl	20000e58 <delay_500ns>
	c = GPIO_E->idrHigh & LCD_BUSY;
200006f2:	4b0c      	ldr	r3, [pc, #48]	; (20000724 <graphic_wait_ready+0x5e>)
200006f4:	7c5b      	ldrb	r3, [r3, #17]
200006f6:	b2da      	uxtb	r2, r3
200006f8:	1dfb      	adds	r3, r7, #7
200006fa:	217f      	movs	r1, #127	; 0x7f
200006fc:	438a      	bics	r2, r1
200006fe:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20000700:	2040      	movs	r0, #64	; 0x40
20000702:	f7ff ff59 	bl	200005b8 <graphic_ctrl_bit_clear>
	delay_500ns();
20000706:	f000 fba7 	bl	20000e58 <delay_500ns>
	if(c == 0)
2000070a:	1dfb      	adds	r3, r7, #7
2000070c:	781b      	ldrb	r3, [r3, #0]
2000070e:	2b00      	cmp	r3, #0
20000710:	d000      	beq.n	20000714 <graphic_wait_ready+0x4e>
	graphic_ctrl_bit_set(B_E);
20000712:	e7e9      	b.n	200006e8 <graphic_wait_ready+0x22>
	    break;
20000714:	46c0      	nop			; (mov r8, r8)
    }
    GPIO_E->moder = 0x55555555; // 15-0 outputs
20000716:	4b03      	ldr	r3, [pc, #12]	; (20000724 <graphic_wait_ready+0x5e>)
20000718:	4a04      	ldr	r2, [pc, #16]	; (2000072c <graphic_wait_ready+0x66>)
2000071a:	601a      	str	r2, [r3, #0]
}
2000071c:	46c0      	nop			; (mov r8, r8)
2000071e:	46bd      	mov	sp, r7
20000720:	b002      	add	sp, #8
20000722:	bd80      	pop	{r7, pc}
20000724:	40021000 	andmi	r1, r2, r0
20000728:	00005555 	andeq	r5, r0, r5, asr r5
2000072c:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000730 <graphic_read>:

static uint8_t graphic_read(uint8_t controller)
{
20000730:	b580      	push	{r7, lr}
20000732:	b084      	sub	sp, #16
20000734:	af00      	add	r7, sp, #0
20000736:	0002      	movs	r2, r0
20000738:	1dfb      	adds	r3, r7, #7
2000073a:	701a      	strb	r2, [r3, #0]
    uint8_t c;
    graphic_ctrl_bit_clear(B_E);
2000073c:	2040      	movs	r0, #64	; 0x40
2000073e:	f7ff ff3b 	bl	200005b8 <graphic_ctrl_bit_clear>
    GPIO_E->moder = 0x00005555; // 15-8 inputs, 7-0 outputs
20000742:	4b1c      	ldr	r3, [pc, #112]	; (200007b4 <graphic_read+0x84>)
20000744:	4a1c      	ldr	r2, [pc, #112]	; (200007b8 <graphic_read+0x88>)
20000746:	601a      	str	r2, [r3, #0]
    graphic_ctrl_bit_set(B_RS | B_RW);
20000748:	2003      	movs	r0, #3
2000074a:	f7ff ff07 	bl	2000055c <graphic_ctrl_bit_set>
    select_controller(controller);
2000074e:	1dfb      	adds	r3, r7, #7
20000750:	781b      	ldrb	r3, [r3, #0]
20000752:	0018      	movs	r0, r3
20000754:	f7ff ff5c 	bl	20000610 <select_controller>
    delay_500ns();
20000758:	f000 fb7e 	bl	20000e58 <delay_500ns>
    graphic_ctrl_bit_set(B_E);
2000075c:	2040      	movs	r0, #64	; 0x40
2000075e:	f7ff fefd 	bl	2000055c <graphic_ctrl_bit_set>
    delay_500ns();
20000762:	f000 fb79 	bl	20000e58 <delay_500ns>
    c = GPIO_E->idrHigh;
20000766:	4a13      	ldr	r2, [pc, #76]	; (200007b4 <graphic_read+0x84>)
20000768:	230f      	movs	r3, #15
2000076a:	18fb      	adds	r3, r7, r3
2000076c:	7c52      	ldrb	r2, [r2, #17]
2000076e:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_E);
20000770:	2040      	movs	r0, #64	; 0x40
20000772:	f7ff ff21 	bl	200005b8 <graphic_ctrl_bit_clear>
    GPIO_E->moder = 0x55555555; // 15-0 outputs
20000776:	4b0f      	ldr	r3, [pc, #60]	; (200007b4 <graphic_read+0x84>)
20000778:	4a10      	ldr	r2, [pc, #64]	; (200007bc <graphic_read+0x8c>)
2000077a:	601a      	str	r2, [r3, #0]
    if(controller & B_CS1) {
2000077c:	1dfb      	adds	r3, r7, #7
2000077e:	781b      	ldrb	r3, [r3, #0]
20000780:	2208      	movs	r2, #8
20000782:	4013      	ands	r3, r2
20000784:	d004      	beq.n	20000790 <graphic_read+0x60>
	select_controller(B_CS1);
20000786:	2008      	movs	r0, #8
20000788:	f7ff ff42 	bl	20000610 <select_controller>
	graphic_wait_ready();
2000078c:	f7ff ff9b 	bl	200006c6 <graphic_wait_ready>
    }
    if(controller & B_CS2) {
20000790:	1dfb      	adds	r3, r7, #7
20000792:	781b      	ldrb	r3, [r3, #0]
20000794:	2210      	movs	r2, #16
20000796:	4013      	ands	r3, r2
20000798:	d004      	beq.n	200007a4 <graphic_read+0x74>
	select_controller(B_CS2);
2000079a:	2010      	movs	r0, #16
2000079c:	f7ff ff38 	bl	20000610 <select_controller>
	graphic_wait_ready();
200007a0:	f7ff ff91 	bl	200006c6 <graphic_wait_ready>
    }
    return c;
200007a4:	230f      	movs	r3, #15
200007a6:	18fb      	adds	r3, r7, r3
200007a8:	781b      	ldrb	r3, [r3, #0]
}
200007aa:	0018      	movs	r0, r3
200007ac:	46bd      	mov	sp, r7
200007ae:	b004      	add	sp, #16
200007b0:	bd80      	pop	{r7, pc}
200007b2:	46c0      	nop			; (mov r8, r8)
200007b4:	40021000 	andmi	r1, r2, r0
200007b8:	00005555 	andeq	r5, r0, r5, asr r5
200007bc:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200007c0 <graphic_read_data>:

static uint8_t graphic_read_data(uint8_t controller)
{
200007c0:	b580      	push	{r7, lr}
200007c2:	b082      	sub	sp, #8
200007c4:	af00      	add	r7, sp, #0
200007c6:	0002      	movs	r2, r0
200007c8:	1dfb      	adds	r3, r7, #7
200007ca:	701a      	strb	r2, [r3, #0]
    graphic_read(controller);
200007cc:	1dfb      	adds	r3, r7, #7
200007ce:	781b      	ldrb	r3, [r3, #0]
200007d0:	0018      	movs	r0, r3
200007d2:	f7ff ffad 	bl	20000730 <graphic_read>
    return graphic_read(controller);
200007d6:	1dfb      	adds	r3, r7, #7
200007d8:	781b      	ldrb	r3, [r3, #0]
200007da:	0018      	movs	r0, r3
200007dc:	f7ff ffa8 	bl	20000730 <graphic_read>
200007e0:	0003      	movs	r3, r0
}
200007e2:	0018      	movs	r0, r3
200007e4:	46bd      	mov	sp, r7
200007e6:	b002      	add	sp, #8
200007e8:	bd80      	pop	{r7, pc}

200007ea <graphic_write>:

static void graphic_write(uint8_t value, uint8_t controller)
{
200007ea:	b580      	push	{r7, lr}
200007ec:	b082      	sub	sp, #8
200007ee:	af00      	add	r7, sp, #0
200007f0:	0002      	movs	r2, r0
200007f2:	1dfb      	adds	r3, r7, #7
200007f4:	701a      	strb	r2, [r3, #0]
200007f6:	1dbb      	adds	r3, r7, #6
200007f8:	1c0a      	adds	r2, r1, #0
200007fa:	701a      	strb	r2, [r3, #0]
    GPIO_E->odrHigh = value;
200007fc:	4a15      	ldr	r2, [pc, #84]	; (20000854 <graphic_write+0x6a>)
200007fe:	1dfb      	adds	r3, r7, #7
20000800:	781b      	ldrb	r3, [r3, #0]
20000802:	7553      	strb	r3, [r2, #21]
    select_controller(controller);
20000804:	1dbb      	adds	r3, r7, #6
20000806:	781b      	ldrb	r3, [r3, #0]
20000808:	0018      	movs	r0, r3
2000080a:	f7ff ff01 	bl	20000610 <select_controller>
    delay_500ns();
2000080e:	f000 fb23 	bl	20000e58 <delay_500ns>
    graphic_ctrl_bit_set(B_E);
20000812:	2040      	movs	r0, #64	; 0x40
20000814:	f7ff fea2 	bl	2000055c <graphic_ctrl_bit_set>
    delay_500ns();
20000818:	f000 fb1e 	bl	20000e58 <delay_500ns>
    graphic_ctrl_bit_clear(B_E);
2000081c:	2040      	movs	r0, #64	; 0x40
2000081e:	f7ff fecb 	bl	200005b8 <graphic_ctrl_bit_clear>
    if(controller & B_CS1) {
20000822:	1dbb      	adds	r3, r7, #6
20000824:	781b      	ldrb	r3, [r3, #0]
20000826:	2208      	movs	r2, #8
20000828:	4013      	ands	r3, r2
2000082a:	d004      	beq.n	20000836 <graphic_write+0x4c>
	select_controller(B_CS1);
2000082c:	2008      	movs	r0, #8
2000082e:	f7ff feef 	bl	20000610 <select_controller>
	graphic_wait_ready();
20000832:	f7ff ff48 	bl	200006c6 <graphic_wait_ready>
    }
    if(controller & B_CS2) {
20000836:	1dbb      	adds	r3, r7, #6
20000838:	781b      	ldrb	r3, [r3, #0]
2000083a:	2210      	movs	r2, #16
2000083c:	4013      	ands	r3, r2
2000083e:	d004      	beq.n	2000084a <graphic_write+0x60>
	select_controller(B_CS2);
20000840:	2010      	movs	r0, #16
20000842:	f7ff fee5 	bl	20000610 <select_controller>
	graphic_wait_ready();
20000846:	f7ff ff3e 	bl	200006c6 <graphic_wait_ready>
    }
}
2000084a:	46c0      	nop			; (mov r8, r8)
2000084c:	46bd      	mov	sp, r7
2000084e:	b002      	add	sp, #8
20000850:	bd80      	pop	{r7, pc}
20000852:	46c0      	nop			; (mov r8, r8)
20000854:	40021000 	andmi	r1, r2, r0

20000858 <graphic_write_command>:

static void graphic_write_command(uint8_t command, uint8_t controller)
{
20000858:	b580      	push	{r7, lr}
2000085a:	b082      	sub	sp, #8
2000085c:	af00      	add	r7, sp, #0
2000085e:	0002      	movs	r2, r0
20000860:	1dfb      	adds	r3, r7, #7
20000862:	701a      	strb	r2, [r3, #0]
20000864:	1dbb      	adds	r3, r7, #6
20000866:	1c0a      	adds	r2, r1, #0
20000868:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_E);
2000086a:	2040      	movs	r0, #64	; 0x40
2000086c:	f7ff fea4 	bl	200005b8 <graphic_ctrl_bit_clear>
    select_controller(controller);
20000870:	1dbb      	adds	r3, r7, #6
20000872:	781b      	ldrb	r3, [r3, #0]
20000874:	0018      	movs	r0, r3
20000876:	f7ff fecb 	bl	20000610 <select_controller>
    graphic_ctrl_bit_clear(B_RS | B_RW);
2000087a:	2003      	movs	r0, #3
2000087c:	f7ff fe9c 	bl	200005b8 <graphic_ctrl_bit_clear>
    graphic_write(command, controller);
20000880:	1dbb      	adds	r3, r7, #6
20000882:	781a      	ldrb	r2, [r3, #0]
20000884:	1dfb      	adds	r3, r7, #7
20000886:	781b      	ldrb	r3, [r3, #0]
20000888:	0011      	movs	r1, r2
2000088a:	0018      	movs	r0, r3
2000088c:	f7ff ffad 	bl	200007ea <graphic_write>
}
20000890:	46c0      	nop			; (mov r8, r8)
20000892:	46bd      	mov	sp, r7
20000894:	b002      	add	sp, #8
20000896:	bd80      	pop	{r7, pc}

20000898 <graphic_write_data>:

static void graphic_write_data(uint8_t data, uint8_t controller)
{
20000898:	b580      	push	{r7, lr}
2000089a:	b082      	sub	sp, #8
2000089c:	af00      	add	r7, sp, #0
2000089e:	0002      	movs	r2, r0
200008a0:	1dfb      	adds	r3, r7, #7
200008a2:	701a      	strb	r2, [r3, #0]
200008a4:	1dbb      	adds	r3, r7, #6
200008a6:	1c0a      	adds	r2, r1, #0
200008a8:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_E);
200008aa:	2040      	movs	r0, #64	; 0x40
200008ac:	f7ff fe84 	bl	200005b8 <graphic_ctrl_bit_clear>
    select_controller(controller);
200008b0:	1dbb      	adds	r3, r7, #6
200008b2:	781b      	ldrb	r3, [r3, #0]
200008b4:	0018      	movs	r0, r3
200008b6:	f7ff feab 	bl	20000610 <select_controller>
    graphic_ctrl_bit_set(B_RS);
200008ba:	2001      	movs	r0, #1
200008bc:	f7ff fe4e 	bl	2000055c <graphic_ctrl_bit_set>
    graphic_ctrl_bit_clear(B_RW);
200008c0:	2002      	movs	r0, #2
200008c2:	f7ff fe79 	bl	200005b8 <graphic_ctrl_bit_clear>
    graphic_write(data, controller);
200008c6:	1dbb      	adds	r3, r7, #6
200008c8:	781a      	ldrb	r2, [r3, #0]
200008ca:	1dfb      	adds	r3, r7, #7
200008cc:	781b      	ldrb	r3, [r3, #0]
200008ce:	0011      	movs	r1, r2
200008d0:	0018      	movs	r0, r3
200008d2:	f7ff ff8a 	bl	200007ea <graphic_write>
}
200008d6:	46c0      	nop			; (mov r8, r8)
200008d8:	46bd      	mov	sp, r7
200008da:	b002      	add	sp, #8
200008dc:	bd80      	pop	{r7, pc}

200008de <graphic_clear_screen>:

void graphic_clear_screen(void)
{
200008de:	b580      	push	{r7, lr}
200008e0:	b082      	sub	sp, #8
200008e2:	af00      	add	r7, sp, #0
    uint8_t i, j;
    for(j = 0; j < 8; j++) {
200008e4:	1dbb      	adds	r3, r7, #6
200008e6:	2200      	movs	r2, #0
200008e8:	701a      	strb	r2, [r3, #0]
200008ea:	e023      	b.n	20000934 <graphic_clear_screen+0x56>
	graphic_write_command(LCD_SET_PAGE | j, B_CS1 | B_CS2);
200008ec:	1dbb      	adds	r3, r7, #6
200008ee:	781b      	ldrb	r3, [r3, #0]
200008f0:	2248      	movs	r2, #72	; 0x48
200008f2:	4252      	negs	r2, r2
200008f4:	4313      	orrs	r3, r2
200008f6:	b2db      	uxtb	r3, r3
200008f8:	2118      	movs	r1, #24
200008fa:	0018      	movs	r0, r3
200008fc:	f7ff ffac 	bl	20000858 <graphic_write_command>
	graphic_write_command(LCD_SET_ADD | 0, B_CS1 | B_CS2);
20000900:	2118      	movs	r1, #24
20000902:	2040      	movs	r0, #64	; 0x40
20000904:	f7ff ffa8 	bl	20000858 <graphic_write_command>
	for(i = 0; i <= 63; i++) {
20000908:	1dfb      	adds	r3, r7, #7
2000090a:	2200      	movs	r2, #0
2000090c:	701a      	strb	r2, [r3, #0]
2000090e:	e008      	b.n	20000922 <graphic_clear_screen+0x44>
	    graphic_write_data(0, B_CS1 | B_CS2);
20000910:	2118      	movs	r1, #24
20000912:	2000      	movs	r0, #0
20000914:	f7ff ffc0 	bl	20000898 <graphic_write_data>
	for(i = 0; i <= 63; i++) {
20000918:	1dfb      	adds	r3, r7, #7
2000091a:	781a      	ldrb	r2, [r3, #0]
2000091c:	1dfb      	adds	r3, r7, #7
2000091e:	3201      	adds	r2, #1
20000920:	701a      	strb	r2, [r3, #0]
20000922:	1dfb      	adds	r3, r7, #7
20000924:	781b      	ldrb	r3, [r3, #0]
20000926:	2b3f      	cmp	r3, #63	; 0x3f
20000928:	d9f2      	bls.n	20000910 <graphic_clear_screen+0x32>
    for(j = 0; j < 8; j++) {
2000092a:	1dbb      	adds	r3, r7, #6
2000092c:	781a      	ldrb	r2, [r3, #0]
2000092e:	1dbb      	adds	r3, r7, #6
20000930:	3201      	adds	r2, #1
20000932:	701a      	strb	r2, [r3, #0]
20000934:	1dbb      	adds	r3, r7, #6
20000936:	781b      	ldrb	r3, [r3, #0]
20000938:	2b07      	cmp	r3, #7
2000093a:	d9d7      	bls.n	200008ec <graphic_clear_screen+0xe>
	}
    }
}
2000093c:	46c0      	nop			; (mov r8, r8)
2000093e:	46bd      	mov	sp, r7
20000940:	b002      	add	sp, #8
20000942:	bd80      	pop	{r7, pc}

20000944 <pixel>:

uint8_t backBuffer[1024]; // 128 * 64 / 8

void pixel(int x, int y, int set)
{
20000944:	b590      	push	{r4, r7, lr}
20000946:	b089      	sub	sp, #36	; 0x24
20000948:	af00      	add	r7, sp, #0
2000094a:	60f8      	str	r0, [r7, #12]
2000094c:	60b9      	str	r1, [r7, #8]
2000094e:	607a      	str	r2, [r7, #4]
    uint8_t mask, c, controller;
    int index;
    if((x < 1) || (y < 1) || (x > 128) || (y > 64))
20000950:	68fb      	ldr	r3, [r7, #12]
20000952:	2b00      	cmp	r3, #0
20000954:	dc00      	bgt.n	20000958 <pixel+0x14>
20000956:	e0bc      	b.n	20000ad2 <pixel+0x18e>
20000958:	68bb      	ldr	r3, [r7, #8]
2000095a:	2b00      	cmp	r3, #0
2000095c:	dc00      	bgt.n	20000960 <pixel+0x1c>
2000095e:	e0b8      	b.n	20000ad2 <pixel+0x18e>
20000960:	68fb      	ldr	r3, [r7, #12]
20000962:	2b80      	cmp	r3, #128	; 0x80
20000964:	dd00      	ble.n	20000968 <pixel+0x24>
20000966:	e0b4      	b.n	20000ad2 <pixel+0x18e>
20000968:	68bb      	ldr	r3, [r7, #8]
2000096a:	2b40      	cmp	r3, #64	; 0x40
2000096c:	dd00      	ble.n	20000970 <pixel+0x2c>
2000096e:	e0b0      	b.n	20000ad2 <pixel+0x18e>
	return;
    index = (y - 1) / 8;
20000970:	68bb      	ldr	r3, [r7, #8]
20000972:	3b01      	subs	r3, #1
20000974:	2b00      	cmp	r3, #0
20000976:	da00      	bge.n	2000097a <pixel+0x36>
20000978:	3307      	adds	r3, #7
2000097a:	10db      	asrs	r3, r3, #3
2000097c:	61bb      	str	r3, [r7, #24]
    switch((y - 1) % 8) {
2000097e:	68bb      	ldr	r3, [r7, #8]
20000980:	3b01      	subs	r3, #1
20000982:	4a56      	ldr	r2, [pc, #344]	; (20000adc <pixel+0x198>)
20000984:	4013      	ands	r3, r2
20000986:	d504      	bpl.n	20000992 <pixel+0x4e>
20000988:	3b01      	subs	r3, #1
2000098a:	2208      	movs	r2, #8
2000098c:	4252      	negs	r2, r2
2000098e:	4313      	orrs	r3, r2
20000990:	3301      	adds	r3, #1
20000992:	2b07      	cmp	r3, #7
20000994:	d82c      	bhi.n	200009f0 <pixel+0xac>
20000996:	009a      	lsls	r2, r3, #2
20000998:	4b51      	ldr	r3, [pc, #324]	; (20000ae0 <pixel+0x19c>)
2000099a:	18d3      	adds	r3, r2, r3
2000099c:	681b      	ldr	r3, [r3, #0]
2000099e:	469f      	mov	pc, r3
    case 0:
	mask = 1;
200009a0:	231f      	movs	r3, #31
200009a2:	18fb      	adds	r3, r7, r3
200009a4:	2201      	movs	r2, #1
200009a6:	701a      	strb	r2, [r3, #0]
	break;
200009a8:	e022      	b.n	200009f0 <pixel+0xac>
    case 1:
	mask = 2;
200009aa:	231f      	movs	r3, #31
200009ac:	18fb      	adds	r3, r7, r3
200009ae:	2202      	movs	r2, #2
200009b0:	701a      	strb	r2, [r3, #0]
	break;
200009b2:	e01d      	b.n	200009f0 <pixel+0xac>
    case 2:
	mask = 4;
200009b4:	231f      	movs	r3, #31
200009b6:	18fb      	adds	r3, r7, r3
200009b8:	2204      	movs	r2, #4
200009ba:	701a      	strb	r2, [r3, #0]
	break;
200009bc:	e018      	b.n	200009f0 <pixel+0xac>
    case 3:
	mask = 8;
200009be:	231f      	movs	r3, #31
200009c0:	18fb      	adds	r3, r7, r3
200009c2:	2208      	movs	r2, #8
200009c4:	701a      	strb	r2, [r3, #0]
	break;
200009c6:	e013      	b.n	200009f0 <pixel+0xac>
    case 4:
	mask = 0x10;
200009c8:	231f      	movs	r3, #31
200009ca:	18fb      	adds	r3, r7, r3
200009cc:	2210      	movs	r2, #16
200009ce:	701a      	strb	r2, [r3, #0]
	break;
200009d0:	e00e      	b.n	200009f0 <pixel+0xac>
    case 5:
	mask = 0x20;
200009d2:	231f      	movs	r3, #31
200009d4:	18fb      	adds	r3, r7, r3
200009d6:	2220      	movs	r2, #32
200009d8:	701a      	strb	r2, [r3, #0]
	break;
200009da:	e009      	b.n	200009f0 <pixel+0xac>
    case 6:
	mask = 0x40;
200009dc:	231f      	movs	r3, #31
200009de:	18fb      	adds	r3, r7, r3
200009e0:	2240      	movs	r2, #64	; 0x40
200009e2:	701a      	strb	r2, [r3, #0]
	break;
200009e4:	e004      	b.n	200009f0 <pixel+0xac>
    case 7:
	mask = 0x80;
200009e6:	231f      	movs	r3, #31
200009e8:	18fb      	adds	r3, r7, r3
200009ea:	2280      	movs	r2, #128	; 0x80
200009ec:	701a      	strb	r2, [r3, #0]
	break;
200009ee:	46c0      	nop			; (mov r8, r8)
    }

    if(set == 0) mask = ~mask;
200009f0:	687b      	ldr	r3, [r7, #4]
200009f2:	2b00      	cmp	r3, #0
200009f4:	d106      	bne.n	20000a04 <pixel+0xc0>
200009f6:	231f      	movs	r3, #31
200009f8:	18fb      	adds	r3, r7, r3
200009fa:	221f      	movs	r2, #31
200009fc:	18ba      	adds	r2, r7, r2
200009fe:	7812      	ldrb	r2, [r2, #0]
20000a00:	43d2      	mvns	r2, r2
20000a02:	701a      	strb	r2, [r3, #0]
    if(x > 64) {
20000a04:	68fb      	ldr	r3, [r7, #12]
20000a06:	2b40      	cmp	r3, #64	; 0x40
20000a08:	dd07      	ble.n	20000a1a <pixel+0xd6>
	controller = B_CS2;
20000a0a:	231e      	movs	r3, #30
20000a0c:	18fb      	adds	r3, r7, r3
20000a0e:	2210      	movs	r2, #16
20000a10:	701a      	strb	r2, [r3, #0]
	x = x - 65;
20000a12:	68fb      	ldr	r3, [r7, #12]
20000a14:	3b41      	subs	r3, #65	; 0x41
20000a16:	60fb      	str	r3, [r7, #12]
20000a18:	e006      	b.n	20000a28 <pixel+0xe4>
    } else {
	controller = B_CS1;
20000a1a:	231e      	movs	r3, #30
20000a1c:	18fb      	adds	r3, r7, r3
20000a1e:	2208      	movs	r2, #8
20000a20:	701a      	strb	r2, [r3, #0]
	x = x - 1;
20000a22:	68fb      	ldr	r3, [r7, #12]
20000a24:	3b01      	subs	r3, #1
20000a26:	60fb      	str	r3, [r7, #12]
    }
    graphic_write_command(LCD_SET_ADD | x, controller);
20000a28:	68fb      	ldr	r3, [r7, #12]
20000a2a:	b25b      	sxtb	r3, r3
20000a2c:	2240      	movs	r2, #64	; 0x40
20000a2e:	4313      	orrs	r3, r2
20000a30:	b25b      	sxtb	r3, r3
20000a32:	b2da      	uxtb	r2, r3
20000a34:	231e      	movs	r3, #30
20000a36:	18fb      	adds	r3, r7, r3
20000a38:	781b      	ldrb	r3, [r3, #0]
20000a3a:	0019      	movs	r1, r3
20000a3c:	0010      	movs	r0, r2
20000a3e:	f7ff ff0b 	bl	20000858 <graphic_write_command>
    graphic_write_command(LCD_SET_PAGE | index, controller);
20000a42:	69bb      	ldr	r3, [r7, #24]
20000a44:	b25b      	sxtb	r3, r3
20000a46:	2248      	movs	r2, #72	; 0x48
20000a48:	4252      	negs	r2, r2
20000a4a:	4313      	orrs	r3, r2
20000a4c:	b25b      	sxtb	r3, r3
20000a4e:	b2da      	uxtb	r2, r3
20000a50:	231e      	movs	r3, #30
20000a52:	18fb      	adds	r3, r7, r3
20000a54:	781b      	ldrb	r3, [r3, #0]
20000a56:	0019      	movs	r1, r3
20000a58:	0010      	movs	r0, r2
20000a5a:	f7ff fefd 	bl	20000858 <graphic_write_command>
    c = graphic_read_data(controller);
20000a5e:	2317      	movs	r3, #23
20000a60:	18fc      	adds	r4, r7, r3
20000a62:	231e      	movs	r3, #30
20000a64:	18fb      	adds	r3, r7, r3
20000a66:	781b      	ldrb	r3, [r3, #0]
20000a68:	0018      	movs	r0, r3
20000a6a:	f7ff fea9 	bl	200007c0 <graphic_read_data>
20000a6e:	0003      	movs	r3, r0
20000a70:	7023      	strb	r3, [r4, #0]
    graphic_write_command(LCD_SET_ADD | x, controller);
20000a72:	68fb      	ldr	r3, [r7, #12]
20000a74:	b25b      	sxtb	r3, r3
20000a76:	2240      	movs	r2, #64	; 0x40
20000a78:	4313      	orrs	r3, r2
20000a7a:	b25b      	sxtb	r3, r3
20000a7c:	b2da      	uxtb	r2, r3
20000a7e:	231e      	movs	r3, #30
20000a80:	18fb      	adds	r3, r7, r3
20000a82:	781b      	ldrb	r3, [r3, #0]
20000a84:	0019      	movs	r1, r3
20000a86:	0010      	movs	r0, r2
20000a88:	f7ff fee6 	bl	20000858 <graphic_write_command>
    if(set)
20000a8c:	687b      	ldr	r3, [r7, #4]
20000a8e:	2b00      	cmp	r3, #0
20000a90:	d00a      	beq.n	20000aa8 <pixel+0x164>
	mask = mask | c;
20000a92:	231f      	movs	r3, #31
20000a94:	18fb      	adds	r3, r7, r3
20000a96:	221f      	movs	r2, #31
20000a98:	18b9      	adds	r1, r7, r2
20000a9a:	2217      	movs	r2, #23
20000a9c:	18ba      	adds	r2, r7, r2
20000a9e:	7809      	ldrb	r1, [r1, #0]
20000aa0:	7812      	ldrb	r2, [r2, #0]
20000aa2:	430a      	orrs	r2, r1
20000aa4:	701a      	strb	r2, [r3, #0]
20000aa6:	e009      	b.n	20000abc <pixel+0x178>
    else
	mask = mask & c;
20000aa8:	231f      	movs	r3, #31
20000aaa:	18fb      	adds	r3, r7, r3
20000aac:	221f      	movs	r2, #31
20000aae:	18ba      	adds	r2, r7, r2
20000ab0:	2117      	movs	r1, #23
20000ab2:	1879      	adds	r1, r7, r1
20000ab4:	7812      	ldrb	r2, [r2, #0]
20000ab6:	7809      	ldrb	r1, [r1, #0]
20000ab8:	400a      	ands	r2, r1
20000aba:	701a      	strb	r2, [r3, #0]
    graphic_write_data(mask, controller);
20000abc:	231e      	movs	r3, #30
20000abe:	18fb      	adds	r3, r7, r3
20000ac0:	781a      	ldrb	r2, [r3, #0]
20000ac2:	231f      	movs	r3, #31
20000ac4:	18fb      	adds	r3, r7, r3
20000ac6:	781b      	ldrb	r3, [r3, #0]
20000ac8:	0011      	movs	r1, r2
20000aca:	0018      	movs	r0, r3
20000acc:	f7ff fee4 	bl	20000898 <graphic_write_data>
20000ad0:	e000      	b.n	20000ad4 <pixel+0x190>
	return;
20000ad2:	46c0      	nop			; (mov r8, r8)
}
20000ad4:	46bd      	mov	sp, r7
20000ad6:	b009      	add	sp, #36	; 0x24
20000ad8:	bd90      	pop	{r4, r7, pc}
20000ada:	46c0      	nop			; (mov r8, r8)
20000adc:	80000007 	andhi	r0, r0, r7
20000ae0:	20001310 	andcs	r1, r0, r0, lsl r3

20000ae4 <clear_backBuffer>:
    index += x + ((y - 1) / 8) * 64;
    backBuffer[index] |= mask;
}*/

void clear_backBuffer()
{
20000ae4:	b580      	push	{r7, lr}
20000ae6:	b082      	sub	sp, #8
20000ae8:	af00      	add	r7, sp, #0
    int i;
    for(i = 0; i < 1024; i++)
20000aea:	2300      	movs	r3, #0
20000aec:	607b      	str	r3, [r7, #4]
20000aee:	e007      	b.n	20000b00 <clear_backBuffer+0x1c>
	backBuffer[i] = 0;
20000af0:	4a07      	ldr	r2, [pc, #28]	; (20000b10 <clear_backBuffer+0x2c>)
20000af2:	687b      	ldr	r3, [r7, #4]
20000af4:	18d3      	adds	r3, r2, r3
20000af6:	2200      	movs	r2, #0
20000af8:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < 1024; i++)
20000afa:	687b      	ldr	r3, [r7, #4]
20000afc:	3301      	adds	r3, #1
20000afe:	607b      	str	r3, [r7, #4]
20000b00:	687b      	ldr	r3, [r7, #4]
20000b02:	4a04      	ldr	r2, [pc, #16]	; (20000b14 <clear_backBuffer+0x30>)
20000b04:	4293      	cmp	r3, r2
20000b06:	ddf3      	ble.n	20000af0 <clear_backBuffer+0xc>
}
20000b08:	46c0      	nop			; (mov r8, r8)
20000b0a:	46bd      	mov	sp, r7
20000b0c:	b002      	add	sp, #8
20000b0e:	bd80      	pop	{r7, pc}
20000b10:	20000ee0 	andcs	r0, r0, r0, ror #29
20000b14:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>

20000b18 <graphic_draw_screen>:

void graphic_draw_screen(void)
{
20000b18:	b580      	push	{r7, lr}
20000b1a:	b084      	sub	sp, #16
20000b1c:	af00      	add	r7, sp, #0
    uint8_t i, j, controller, c;
    unsigned int k = 0;
20000b1e:	2300      	movs	r3, #0
20000b20:	60bb      	str	r3, [r7, #8]
    for(c = 0; c < 2; c++) {
20000b22:	230d      	movs	r3, #13
20000b24:	18fb      	adds	r3, r7, r3
20000b26:	2200      	movs	r2, #0
20000b28:	701a      	strb	r2, [r3, #0]
20000b2a:	e052      	b.n	20000bd2 <graphic_draw_screen+0xba>
	controller = (c == 0) ? B_CS1 : B_CS2;
20000b2c:	230d      	movs	r3, #13
20000b2e:	18fb      	adds	r3, r7, r3
20000b30:	781b      	ldrb	r3, [r3, #0]
20000b32:	2b00      	cmp	r3, #0
20000b34:	d101      	bne.n	20000b3a <graphic_draw_screen+0x22>
20000b36:	2208      	movs	r2, #8
20000b38:	e000      	b.n	20000b3c <graphic_draw_screen+0x24>
20000b3a:	2210      	movs	r2, #16
20000b3c:	1dfb      	adds	r3, r7, #7
20000b3e:	701a      	strb	r2, [r3, #0]
	for(j = 0; j < 8; j++) {
20000b40:	230e      	movs	r3, #14
20000b42:	18fb      	adds	r3, r7, r3
20000b44:	2200      	movs	r2, #0
20000b46:	701a      	strb	r2, [r3, #0]
20000b48:	e037      	b.n	20000bba <graphic_draw_screen+0xa2>
	    graphic_write_command(LCD_SET_PAGE | j, controller);
20000b4a:	230e      	movs	r3, #14
20000b4c:	18fb      	adds	r3, r7, r3
20000b4e:	781b      	ldrb	r3, [r3, #0]
20000b50:	2248      	movs	r2, #72	; 0x48
20000b52:	4252      	negs	r2, r2
20000b54:	4313      	orrs	r3, r2
20000b56:	b2da      	uxtb	r2, r3
20000b58:	1dfb      	adds	r3, r7, #7
20000b5a:	781b      	ldrb	r3, [r3, #0]
20000b5c:	0019      	movs	r1, r3
20000b5e:	0010      	movs	r0, r2
20000b60:	f7ff fe7a 	bl	20000858 <graphic_write_command>
	    graphic_write_command(LCD_SET_ADD | 0, controller);
20000b64:	1dfb      	adds	r3, r7, #7
20000b66:	781b      	ldrb	r3, [r3, #0]
20000b68:	0019      	movs	r1, r3
20000b6a:	2040      	movs	r0, #64	; 0x40
20000b6c:	f7ff fe74 	bl	20000858 <graphic_write_command>
	    for(i = 0; i <= 63; i++, k++) {
20000b70:	230f      	movs	r3, #15
20000b72:	18fb      	adds	r3, r7, r3
20000b74:	2200      	movs	r2, #0
20000b76:	701a      	strb	r2, [r3, #0]
20000b78:	e013      	b.n	20000ba2 <graphic_draw_screen+0x8a>
		graphic_write_data(backBuffer[k], controller);
20000b7a:	4a1a      	ldr	r2, [pc, #104]	; (20000be4 <graphic_draw_screen+0xcc>)
20000b7c:	68bb      	ldr	r3, [r7, #8]
20000b7e:	18d3      	adds	r3, r2, r3
20000b80:	781a      	ldrb	r2, [r3, #0]
20000b82:	1dfb      	adds	r3, r7, #7
20000b84:	781b      	ldrb	r3, [r3, #0]
20000b86:	0019      	movs	r1, r3
20000b88:	0010      	movs	r0, r2
20000b8a:	f7ff fe85 	bl	20000898 <graphic_write_data>
	    for(i = 0; i <= 63; i++, k++) {
20000b8e:	230f      	movs	r3, #15
20000b90:	18fb      	adds	r3, r7, r3
20000b92:	781a      	ldrb	r2, [r3, #0]
20000b94:	230f      	movs	r3, #15
20000b96:	18fb      	adds	r3, r7, r3
20000b98:	3201      	adds	r2, #1
20000b9a:	701a      	strb	r2, [r3, #0]
20000b9c:	68bb      	ldr	r3, [r7, #8]
20000b9e:	3301      	adds	r3, #1
20000ba0:	60bb      	str	r3, [r7, #8]
20000ba2:	230f      	movs	r3, #15
20000ba4:	18fb      	adds	r3, r7, r3
20000ba6:	781b      	ldrb	r3, [r3, #0]
20000ba8:	2b3f      	cmp	r3, #63	; 0x3f
20000baa:	d9e6      	bls.n	20000b7a <graphic_draw_screen+0x62>
	for(j = 0; j < 8; j++) {
20000bac:	230e      	movs	r3, #14
20000bae:	18fb      	adds	r3, r7, r3
20000bb0:	781a      	ldrb	r2, [r3, #0]
20000bb2:	230e      	movs	r3, #14
20000bb4:	18fb      	adds	r3, r7, r3
20000bb6:	3201      	adds	r2, #1
20000bb8:	701a      	strb	r2, [r3, #0]
20000bba:	230e      	movs	r3, #14
20000bbc:	18fb      	adds	r3, r7, r3
20000bbe:	781b      	ldrb	r3, [r3, #0]
20000bc0:	2b07      	cmp	r3, #7
20000bc2:	d9c2      	bls.n	20000b4a <graphic_draw_screen+0x32>
    for(c = 0; c < 2; c++) {
20000bc4:	230d      	movs	r3, #13
20000bc6:	18fb      	adds	r3, r7, r3
20000bc8:	781a      	ldrb	r2, [r3, #0]
20000bca:	230d      	movs	r3, #13
20000bcc:	18fb      	adds	r3, r7, r3
20000bce:	3201      	adds	r2, #1
20000bd0:	701a      	strb	r2, [r3, #0]
20000bd2:	230d      	movs	r3, #13
20000bd4:	18fb      	adds	r3, r7, r3
20000bd6:	781b      	ldrb	r3, [r3, #0]
20000bd8:	2b01      	cmp	r3, #1
20000bda:	d9a7      	bls.n	20000b2c <graphic_draw_screen+0x14>
	    }
	}
    }
}
20000bdc:	46c0      	nop			; (mov r8, r8)
20000bde:	46bd      	mov	sp, r7
20000be0:	b004      	add	sp, #16
20000be2:	bd80      	pop	{r7, pc}
20000be4:	20000ee0 	andcs	r0, r0, r0, ror #29

20000be8 <irq0_handler>:
    *((unsigned int *) 0x40013C14) |= 8; // Kvittera avbrott
  }
}*/

static volatile int count = 0;
void irq0_handler(void){
20000be8:	b580      	push	{r7, lr}
20000bea:	af00      	add	r7, sp, #0
	count++;
20000bec:	4b0e      	ldr	r3, [pc, #56]	; (20000c28 <irq0_handler+0x40>)
20000bee:	681b      	ldr	r3, [r3, #0]
20000bf0:	1c5a      	adds	r2, r3, #1
20000bf2:	4b0d      	ldr	r3, [pc, #52]	; (20000c28 <irq0_handler+0x40>)
20000bf4:	601a      	str	r2, [r3, #0]
	*EXTI_PR |= EXTI0_IRQ //reset-signal till EXTI, om denna rad tas bort kallas irq_handler 2 gånger per interrupt
20000bf6:	4b0d      	ldr	r3, [pc, #52]	; (20000c2c <irq0_handler+0x44>)
20000bf8:	4a0c      	ldr	r2, [pc, #48]	; (20000c2c <irq0_handler+0x44>)
20000bfa:	6812      	ldr	r2, [r2, #0]
20000bfc:	2101      	movs	r1, #1
20000bfe:	430a      	orrs	r2, r1
20000c00:	601a      	str	r2, [r3, #0]
	GPIO_E->odrLow |= 0x10; //reset-signal till interruptenheten
20000c02:	4a0b      	ldr	r2, [pc, #44]	; (20000c30 <irq0_handler+0x48>)
20000c04:	4b0a      	ldr	r3, [pc, #40]	; (20000c30 <irq0_handler+0x48>)
20000c06:	7d1b      	ldrb	r3, [r3, #20]
20000c08:	b2db      	uxtb	r3, r3
20000c0a:	2110      	movs	r1, #16
20000c0c:	430b      	orrs	r3, r1
20000c0e:	b2db      	uxtb	r3, r3
20000c10:	7513      	strb	r3, [r2, #20]
	GPIO_E->odrLow &= ~0x10;
20000c12:	4a07      	ldr	r2, [pc, #28]	; (20000c30 <irq0_handler+0x48>)
20000c14:	4b06      	ldr	r3, [pc, #24]	; (20000c30 <irq0_handler+0x48>)
20000c16:	7d1b      	ldrb	r3, [r3, #20]
20000c18:	b2db      	uxtb	r3, r3
20000c1a:	2110      	movs	r1, #16
20000c1c:	438b      	bics	r3, r1
20000c1e:	b2db      	uxtb	r3, r3
20000c20:	7513      	strb	r3, [r2, #20]
}
20000c22:	46c0      	nop			; (mov r8, r8)
20000c24:	46bd      	mov	sp, r7
20000c26:	bd80      	pop	{r7, pc}
20000c28:	20000edc 	ldrdcs	r0, [r0], -ip
20000c2c:	40013c14 	andmi	r3, r1, r4, lsl ip
20000c30:	40021000 	andmi	r1, r2, r0

20000c34 <irq1_handler>:
void irq1_handler(void){
20000c34:	b580      	push	{r7, lr}
20000c36:	af00      	add	r7, sp, #0
	count = 0;
20000c38:	4b0d      	ldr	r3, [pc, #52]	; (20000c70 <irq1_handler+0x3c>)
20000c3a:	2200      	movs	r2, #0
20000c3c:	601a      	str	r2, [r3, #0]
	*EXTI_PR |= EXTI1_IRQ; //reset-signal till EXTI, om denna rad tas bort kallas irq_handler 2 gånger per interrupt
20000c3e:	4b0d      	ldr	r3, [pc, #52]	; (20000c74 <irq1_handler+0x40>)
20000c40:	4a0c      	ldr	r2, [pc, #48]	; (20000c74 <irq1_handler+0x40>)
20000c42:	6812      	ldr	r2, [r2, #0]
20000c44:	2102      	movs	r1, #2
20000c46:	430a      	orrs	r2, r1
20000c48:	601a      	str	r2, [r3, #0]
	GPIO_E->odrLow |= 0x20; //reset-signal till interruptenheten
20000c4a:	4a0b      	ldr	r2, [pc, #44]	; (20000c78 <irq1_handler+0x44>)
20000c4c:	4b0a      	ldr	r3, [pc, #40]	; (20000c78 <irq1_handler+0x44>)
20000c4e:	7d1b      	ldrb	r3, [r3, #20]
20000c50:	b2db      	uxtb	r3, r3
20000c52:	2120      	movs	r1, #32
20000c54:	430b      	orrs	r3, r1
20000c56:	b2db      	uxtb	r3, r3
20000c58:	7513      	strb	r3, [r2, #20]
	GPIO_E->odrLow &= ~0x20;
20000c5a:	4a07      	ldr	r2, [pc, #28]	; (20000c78 <irq1_handler+0x44>)
20000c5c:	4b06      	ldr	r3, [pc, #24]	; (20000c78 <irq1_handler+0x44>)
20000c5e:	7d1b      	ldrb	r3, [r3, #20]
20000c60:	b2db      	uxtb	r3, r3
20000c62:	2120      	movs	r1, #32
20000c64:	438b      	bics	r3, r1
20000c66:	b2db      	uxtb	r3, r3
20000c68:	7513      	strb	r3, [r2, #20]
}
20000c6a:	46c0      	nop			; (mov r8, r8)
20000c6c:	46bd      	mov	sp, r7
20000c6e:	bd80      	pop	{r7, pc}
20000c70:	20000edc 	ldrdcs	r0, [r0], -ip
20000c74:	40013c14 	andmi	r3, r1, r4, lsl ip
20000c78:	40021000 	andmi	r1, r2, r0

20000c7c <irq2_handler>:
void irq2_handler(void){
20000c7c:	b580      	push	{r7, lr}
20000c7e:	af00      	add	r7, sp, #0
	*EXTI_PR |= EXTI2_IRQ;
20000c80:	4b12      	ldr	r3, [pc, #72]	; (20000ccc <irq2_handler+0x50>)
20000c82:	4a12      	ldr	r2, [pc, #72]	; (20000ccc <irq2_handler+0x50>)
20000c84:	6812      	ldr	r2, [r2, #0]
20000c86:	2104      	movs	r1, #4
20000c88:	430a      	orrs	r2, r1
20000c8a:	601a      	str	r2, [r3, #0]
	GPIO_E->odrLow |= 0x40;
20000c8c:	4a10      	ldr	r2, [pc, #64]	; (20000cd0 <irq2_handler+0x54>)
20000c8e:	4b10      	ldr	r3, [pc, #64]	; (20000cd0 <irq2_handler+0x54>)
20000c90:	7d1b      	ldrb	r3, [r3, #20]
20000c92:	b2db      	uxtb	r3, r3
20000c94:	2140      	movs	r1, #64	; 0x40
20000c96:	430b      	orrs	r3, r1
20000c98:	b2db      	uxtb	r3, r3
20000c9a:	7513      	strb	r3, [r2, #20]
	GPIO_E->odrLow &= ~0x40;
20000c9c:	4a0c      	ldr	r2, [pc, #48]	; (20000cd0 <irq2_handler+0x54>)
20000c9e:	4b0c      	ldr	r3, [pc, #48]	; (20000cd0 <irq2_handler+0x54>)
20000ca0:	7d1b      	ldrb	r3, [r3, #20]
20000ca2:	b2db      	uxtb	r3, r3
20000ca4:	2140      	movs	r1, #64	; 0x40
20000ca6:	438b      	bics	r3, r1
20000ca8:	b2db      	uxtb	r3, r3
20000caa:	7513      	strb	r3, [r2, #20]
	if (GPIO_D->odrHigh == 0xFF){
20000cac:	4b09      	ldr	r3, [pc, #36]	; (20000cd4 <irq2_handler+0x58>)
20000cae:	7d5b      	ldrb	r3, [r3, #21]
20000cb0:	b2db      	uxtb	r3, r3
20000cb2:	2bff      	cmp	r3, #255	; 0xff
20000cb4:	d103      	bne.n	20000cbe <irq2_handler+0x42>
		GPIO_D->odrHigh = 0;
20000cb6:	4b07      	ldr	r3, [pc, #28]	; (20000cd4 <irq2_handler+0x58>)
20000cb8:	2200      	movs	r2, #0
20000cba:	755a      	strb	r2, [r3, #21]
	}
	else{
		GPIO_D->odrHigh = 0xFF;
	}
}
20000cbc:	e002      	b.n	20000cc4 <irq2_handler+0x48>
		GPIO_D->odrHigh = 0xFF;
20000cbe:	4b05      	ldr	r3, [pc, #20]	; (20000cd4 <irq2_handler+0x58>)
20000cc0:	22ff      	movs	r2, #255	; 0xff
20000cc2:	755a      	strb	r2, [r3, #21]
}
20000cc4:	46c0      	nop			; (mov r8, r8)
20000cc6:	46bd      	mov	sp, r7
20000cc8:	bd80      	pop	{r7, pc}
20000cca:	46c0      	nop			; (mov r8, r8)
20000ccc:	40013c14 	andmi	r3, r1, r4, lsl ip
20000cd0:	40021000 	andmi	r1, r2, r0
20000cd4:	40020c00 	andmi	r0, r2, r0, lsl #24

20000cd8 <app_init>:

void app_init(void)
{
20000cd8:	b580      	push	{r7, lr}
20000cda:	af00      	add	r7, sp, #0
	*((unsigned long *) 0x40023830) =0x18;
20000cdc:	4b38      	ldr	r3, [pc, #224]	; (20000dc0 <app_init+0xe8>)
20000cde:	2218      	movs	r2, #24
20000ce0:	601a      	str	r2, [r3, #0]
	*((unsigned long *) 0x40023844) |=0x4000;
20000ce2:	4b38      	ldr	r3, [pc, #224]	; (20000dc4 <app_init+0xec>)
20000ce4:	4a37      	ldr	r2, [pc, #220]	; (20000dc4 <app_init+0xec>)
20000ce6:	6812      	ldr	r2, [r2, #0]
20000ce8:	2180      	movs	r1, #128	; 0x80
20000cea:	01c9      	lsls	r1, r1, #7
20000cec:	430a      	orrs	r2, r1
20000cee:	601a      	str	r2, [r3, #0]
	*((unsigned long *) 0xE000ED08 ) = 0x2001C000;
20000cf0:	4b35      	ldr	r3, [pc, #212]	; (20000dc8 <app_init+0xf0>)
20000cf2:	4a36      	ldr	r2, [pc, #216]	; (20000dcc <app_init+0xf4>)
20000cf4:	601a      	str	r2, [r3, #0]
  // Sätt upp PD0-7 som utport för visningsenhet
    GPIO_D->moder = 0x55555555;
20000cf6:	4b36      	ldr	r3, [pc, #216]	; (20000dd0 <app_init+0xf8>)
20000cf8:	4a36      	ldr	r2, [pc, #216]	; (20000dd4 <app_init+0xfc>)
20000cfa:	601a      	str	r2, [r3, #0]
	GPIO_E -> moder = 0x1500;
20000cfc:	4b36      	ldr	r3, [pc, #216]	; (20000dd8 <app_init+0x100>)
20000cfe:	22a8      	movs	r2, #168	; 0xa8
20000d00:	0152      	lsls	r2, r2, #5
20000d02:	601a      	str	r2, [r3, #0]

  // Koppla PE3 tillavbrottslina EXTI3
    // Nollställ fält
    *((unsigned int *) SYSCFG_EXTICR1) &= ~0xF000;
20000d04:	4b35      	ldr	r3, [pc, #212]	; (20000ddc <app_init+0x104>)
20000d06:	4a35      	ldr	r2, [pc, #212]	; (20000ddc <app_init+0x104>)
20000d08:	6812      	ldr	r2, [r2, #0]
20000d0a:	4935      	ldr	r1, [pc, #212]	; (20000de0 <app_init+0x108>)
20000d0c:	400a      	ands	r2, r1
20000d0e:	601a      	str	r2, [r3, #0]
    // PE3->EXTI3
    *((unsigned int *) SYSCFG_EXTICR1) |= 0x4000;
20000d10:	4b32      	ldr	r3, [pc, #200]	; (20000ddc <app_init+0x104>)
20000d12:	4a32      	ldr	r2, [pc, #200]	; (20000ddc <app_init+0x104>)
20000d14:	6812      	ldr	r2, [r2, #0]
20000d16:	2180      	movs	r1, #128	; 0x80
20000d18:	01c9      	lsls	r1, r1, #7
20000d1a:	430a      	orrs	r2, r1
20000d1c:	601a      	str	r2, [r3, #0]
    *((unsigned int *) 0x40013C0C) |= 8;
    // Maskera triggvillkor "positiv flank"
    *((unsigned int *) 0x40013C08) &= ~8;*/

	  // Sätt upp avbrottsvektor
	  *SYSCFG_EXTICR1 &= 0xF000;
20000d1e:	4b2f      	ldr	r3, [pc, #188]	; (20000ddc <app_init+0x104>)
20000d20:	4a2e      	ldr	r2, [pc, #184]	; (20000ddc <app_init+0x104>)
20000d22:	6811      	ldr	r1, [r2, #0]
20000d24:	22f0      	movs	r2, #240	; 0xf0
20000d26:	0212      	lsls	r2, r2, #8
20000d28:	400a      	ands	r2, r1
20000d2a:	601a      	str	r2, [r3, #0]
		*SYSCFG_EXTICR1 |= 0x0444;
20000d2c:	4b2b      	ldr	r3, [pc, #172]	; (20000ddc <app_init+0x104>)
20000d2e:	4a2b      	ldr	r2, [pc, #172]	; (20000ddc <app_init+0x104>)
20000d30:	6812      	ldr	r2, [r2, #0]
20000d32:	492c      	ldr	r1, [pc, #176]	; (20000de4 <app_init+0x10c>)
20000d34:	430a      	orrs	r2, r1
20000d36:	601a      	str	r2, [r3, #0]

		*EXTI_IMR |= 7;
20000d38:	4b2b      	ldr	r3, [pc, #172]	; (20000de8 <app_init+0x110>)
20000d3a:	4a2b      	ldr	r2, [pc, #172]	; (20000de8 <app_init+0x110>)
20000d3c:	6812      	ldr	r2, [r2, #0]
20000d3e:	2107      	movs	r1, #7
20000d40:	430a      	orrs	r2, r1
20000d42:	601a      	str	r2, [r3, #0]
		*EXTI_RTSR |= 7;
20000d44:	4b29      	ldr	r3, [pc, #164]	; (20000dec <app_init+0x114>)
20000d46:	4a29      	ldr	r2, [pc, #164]	; (20000dec <app_init+0x114>)
20000d48:	6812      	ldr	r2, [r2, #0]
20000d4a:	2107      	movs	r1, #7
20000d4c:	430a      	orrs	r2, r1
20000d4e:	601a      	str	r2, [r3, #0]
		*EXTI_FTSR &= ~7;
20000d50:	4b27      	ldr	r3, [pc, #156]	; (20000df0 <app_init+0x118>)
20000d52:	4a27      	ldr	r2, [pc, #156]	; (20000df0 <app_init+0x118>)
20000d54:	6812      	ldr	r2, [r2, #0]
20000d56:	2107      	movs	r1, #7
20000d58:	438a      	bics	r2, r1
20000d5a:	601a      	str	r2, [r3, #0]

		*EXTI_0_IRQVEC = irq0_handler;
20000d5c:	4b25      	ldr	r3, [pc, #148]	; (20000df4 <app_init+0x11c>)
20000d5e:	4a26      	ldr	r2, [pc, #152]	; (20000df8 <app_init+0x120>)
20000d60:	601a      	str	r2, [r3, #0]
		*EXTI_1_IRQVEC = irq1_handler;
20000d62:	4b26      	ldr	r3, [pc, #152]	; (20000dfc <app_init+0x124>)
20000d64:	4a26      	ldr	r2, [pc, #152]	; (20000e00 <app_init+0x128>)
20000d66:	601a      	str	r2, [r3, #0]
		*EXTI_2_IRQVEC = irq2_handler;
20000d68:	4b26      	ldr	r3, [pc, #152]	; (20000e04 <app_init+0x12c>)
20000d6a:	4a27      	ldr	r2, [pc, #156]	; (20000e08 <app_init+0x130>)
20000d6c:	601a      	str	r2, [r3, #0]

		*NVIC_ISER0 |= NVIC_EXTI0_IRQ;
20000d6e:	4b27      	ldr	r3, [pc, #156]	; (20000e0c <app_init+0x134>)
20000d70:	4a26      	ldr	r2, [pc, #152]	; (20000e0c <app_init+0x134>)
20000d72:	6812      	ldr	r2, [r2, #0]
20000d74:	2140      	movs	r1, #64	; 0x40
20000d76:	430a      	orrs	r2, r1
20000d78:	601a      	str	r2, [r3, #0]
		*NVIC_ISER0 |= NVIC_EXTI1_IRQ;
20000d7a:	4b24      	ldr	r3, [pc, #144]	; (20000e0c <app_init+0x134>)
20000d7c:	4a23      	ldr	r2, [pc, #140]	; (20000e0c <app_init+0x134>)
20000d7e:	6812      	ldr	r2, [r2, #0]
20000d80:	2180      	movs	r1, #128	; 0x80
20000d82:	430a      	orrs	r2, r1
20000d84:	601a      	str	r2, [r3, #0]
		*NVIC_ISER0 |= NVIC_EXTI2_IRQ;
20000d86:	4b21      	ldr	r3, [pc, #132]	; (20000e0c <app_init+0x134>)
20000d88:	4a20      	ldr	r2, [pc, #128]	; (20000e0c <app_init+0x134>)
20000d8a:	6812      	ldr	r2, [r2, #0]
20000d8c:	2180      	movs	r1, #128	; 0x80
20000d8e:	0049      	lsls	r1, r1, #1
20000d90:	430a      	orrs	r2, r1
20000d92:	601a      	str	r2, [r3, #0]
		//*NVIC_ISER0 |= NVIC_EXTI3_IRQ;

  // Konfigurera de bitar i NVIC som kontrollerar den avbrottslina som EXTI3 kopplas till
    //*((unsigned int *) 0xE000E100) |= (1<<9);
	*((unsigned int *) 0xE000E100) |= (1<<8);
20000d94:	4b1d      	ldr	r3, [pc, #116]	; (20000e0c <app_init+0x134>)
20000d96:	4a1d      	ldr	r2, [pc, #116]	; (20000e0c <app_init+0x134>)
20000d98:	6812      	ldr	r2, [r2, #0]
20000d9a:	2180      	movs	r1, #128	; 0x80
20000d9c:	0049      	lsls	r1, r1, #1
20000d9e:	430a      	orrs	r2, r1
20000da0:	601a      	str	r2, [r3, #0]
	*((unsigned int *) 0xE000E100) |= (1<<7);
20000da2:	4b1a      	ldr	r3, [pc, #104]	; (20000e0c <app_init+0x134>)
20000da4:	4a19      	ldr	r2, [pc, #100]	; (20000e0c <app_init+0x134>)
20000da6:	6812      	ldr	r2, [r2, #0]
20000da8:	2180      	movs	r1, #128	; 0x80
20000daa:	430a      	orrs	r2, r1
20000dac:	601a      	str	r2, [r3, #0]
	*((unsigned int *) 0xE000E100) |= (1<<6);
20000dae:	4b17      	ldr	r3, [pc, #92]	; (20000e0c <app_init+0x134>)
20000db0:	4a16      	ldr	r2, [pc, #88]	; (20000e0c <app_init+0x134>)
20000db2:	6812      	ldr	r2, [r2, #0]
20000db4:	2140      	movs	r1, #64	; 0x40
20000db6:	430a      	orrs	r2, r1
20000db8:	601a      	str	r2, [r3, #0]
}
20000dba:	46c0      	nop			; (mov r8, r8)
20000dbc:	46bd      	mov	sp, r7
20000dbe:	bd80      	pop	{r7, pc}
20000dc0:	40023830 	andmi	r3, r2, r0, lsr r8
20000dc4:	40023844 	andmi	r3, r2, r4, asr #16
20000dc8:	e000ed08 	and	lr, r0, r8, lsl #26
20000dcc:	2001c000 	andcs	ip, r1, r0
20000dd0:	40020c00 	andmi	r0, r2, r0, lsl #24
20000dd4:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
20000dd8:	40021000 	andmi	r1, r2, r0
20000ddc:	40013808 	andmi	r3, r1, r8, lsl #16
20000de0:	ffff0fff 			; <UNDEFINED> instruction: 0xffff0fff
20000de4:	00000444 	andeq	r0, r0, r4, asr #8
20000de8:	40013c00 	andmi	r3, r1, r0, lsl #24
20000dec:	40013c08 	andmi	r3, r1, r8, lsl #24
20000df0:	40013c0c 	andmi	r3, r1, ip, lsl #24
20000df4:	2001c058 	andcs	ip, r1, r8, asr r0
20000df8:	20000be9 	andcs	r0, r0, r9, ror #23
20000dfc:	2001c05c 	andcs	ip, r1, ip, asr r0
20000e00:	20000c35 	andcs	r0, r0, r5, lsr ip
20000e04:	2001c060 	andcs	ip, r1, r0, rrx
20000e08:	20000c7d 	andcs	r0, r0, sp, ror ip
20000e0c:	e000e100 	and	lr, r0, r0, lsl #2

20000e10 <main>:



void main(void)
{
20000e10:	b580      	push	{r7, lr}
20000e12:	af00      	add	r7, sp, #0
  app_init();
20000e14:	f7ff ff60 	bl	20000cd8 <app_init>
	while(1){
		GPIO_D->odrLow = count;
20000e18:	4a02      	ldr	r2, [pc, #8]	; (20000e24 <main+0x14>)
20000e1a:	4b03      	ldr	r3, [pc, #12]	; (20000e28 <main+0x18>)
20000e1c:	681b      	ldr	r3, [r3, #0]
20000e1e:	b2db      	uxtb	r3, r3
20000e20:	7513      	strb	r3, [r2, #20]
20000e22:	e7f9      	b.n	20000e18 <main+0x8>
20000e24:	40020c00 	andmi	r0, r2, r0, lsl #24
20000e28:	20000edc 	ldrdcs	r0, [r0], -ip

20000e2c <delay_250ns>:
/// Delays the thread 250 ns.
///
/// NOTE: 		The routine is not exact but takes a MINIMUM of 
///				250 ns.
void delay_250ns( void )
{
20000e2c:	b580      	push	{r7, lr}
20000e2e:	af00      	add	r7, sp, #0
	// ----------------------
	// = Återställ räknaren =
	// ----------------------
	// Nollställ register STK_CTRL.
	SYS_TICK->STK_CTRL = 0;
20000e30:	4b08      	ldr	r3, [pc, #32]	; (20000e54 <delay_250ns+0x28>)
20000e32:	2200      	movs	r2, #0
20000e34:	601a      	str	r2, [r3, #0]
	// = Ladda in räknarvärdet =
	// -------------------------
	// 		168 ticks/µs 		* 1000
	// => 	168'000 ticks/ns 	/ 4
	// => 	42'000 ticks for a wait of 250 ns.
	SYS_TICK->STK_LOAD = 168-1;
20000e36:	4b07      	ldr	r3, [pc, #28]	; (20000e54 <delay_250ns+0x28>)
20000e38:	22a7      	movs	r2, #167	; 0xa7
20000e3a:	605a      	str	r2, [r3, #4]
	
	// -----------------------------
	// = Nollställ räknarregistret =
	// -----------------------------
	// Nolställ register STK_VAL.
	SYS_TICK->STK_VAL = 0;
20000e3c:	4b05      	ldr	r3, [pc, #20]	; (20000e54 <delay_250ns+0x28>)
20000e3e:	2200      	movs	r2, #0
20000e40:	609a      	str	r2, [r3, #8]
	// = Start om räknaren =
	// ---------------------
	// Ettställ bitar 2 och 0.
	// Nollställ bitar 31-3 och 1.
	//SYS_TICK->STK_CTRL = 0x00000005;
	SYS_TICK->STK_CTRL |= 7;
20000e42:	4b04      	ldr	r3, [pc, #16]	; (20000e54 <delay_250ns+0x28>)
20000e44:	4a03      	ldr	r2, [pc, #12]	; (20000e54 <delay_250ns+0x28>)
20000e46:	6812      	ldr	r2, [r2, #0]
20000e48:	2107      	movs	r1, #7
20000e4a:	430a      	orrs	r2, r1
20000e4c:	601a      	str	r2, [r3, #0]
	// ----------------------
	// = Återställ räknaren =
	// ----------------------
	// Nollställ register STK_CTRL.
	//SYS_TICK->STK_CTRL = 0;
}
20000e4e:	46c0      	nop			; (mov r8, r8)
20000e50:	46bd      	mov	sp, r7
20000e52:	bd80      	pop	{r7, pc}
20000e54:	e000e010 	and	lr, r0, r0, lsl r0

20000e58 <delay_500ns>:

void delay_500ns (void)
{
20000e58:	b580      	push	{r7, lr}
20000e5a:	b082      	sub	sp, #8
20000e5c:	af00      	add	r7, sp, #0
	for(int i = 0; i < 2; i++)
20000e5e:	2300      	movs	r3, #0
20000e60:	607b      	str	r3, [r7, #4]
20000e62:	e004      	b.n	20000e6e <delay_500ns+0x16>
		delay_250ns();
20000e64:	f7ff ffe2 	bl	20000e2c <delay_250ns>
	for(int i = 0; i < 2; i++)
20000e68:	687b      	ldr	r3, [r7, #4]
20000e6a:	3301      	adds	r3, #1
20000e6c:	607b      	str	r3, [r7, #4]
20000e6e:	687b      	ldr	r3, [r7, #4]
20000e70:	2b01      	cmp	r3, #1
20000e72:	ddf7      	ble.n	20000e64 <delay_500ns+0xc>
}
20000e74:	46c0      	nop			; (mov r8, r8)
20000e76:	46bd      	mov	sp, r7
20000e78:	b002      	add	sp, #8
20000e7a:	bd80      	pop	{r7, pc}

20000e7c <delay_mikro>:
///				'delay_250ns()' function is suboptimal as you reset
///				the STK_CTRL register twice between every iteration
///				of the for loop.
/// 			
void delay_mikro( unsigned int us )
{
20000e7c:	b580      	push	{r7, lr}
20000e7e:	b084      	sub	sp, #16
20000e80:	af00      	add	r7, sp, #0
20000e82:	6078      	str	r0, [r7, #4]
#ifdef SIMULATOR
	us = us / 1000;
	us++;
#endif
	// Convert the given time to a number of 250 ns delays.
	unsigned int delays = us * 4;
20000e84:	687b      	ldr	r3, [r7, #4]
20000e86:	009b      	lsls	r3, r3, #2
20000e88:	60bb      	str	r3, [r7, #8]
	unsigned int i;
	for(i = 0; i < delays; i++)
20000e8a:	2300      	movs	r3, #0
20000e8c:	60fb      	str	r3, [r7, #12]
20000e8e:	e004      	b.n	20000e9a <delay_mikro+0x1e>
	{
		delay_250ns();
20000e90:	f7ff ffcc 	bl	20000e2c <delay_250ns>
	for(i = 0; i < delays; i++)
20000e94:	68fb      	ldr	r3, [r7, #12]
20000e96:	3301      	adds	r3, #1
20000e98:	60fb      	str	r3, [r7, #12]
20000e9a:	68fa      	ldr	r2, [r7, #12]
20000e9c:	68bb      	ldr	r3, [r7, #8]
20000e9e:	429a      	cmp	r2, r3
20000ea0:	d3f6      	bcc.n	20000e90 <delay_mikro+0x14>
	}
}
20000ea2:	46c0      	nop			; (mov r8, r8)
20000ea4:	46bd      	mov	sp, r7
20000ea6:	b004      	add	sp, #16
20000ea8:	bd80      	pop	{r7, pc}

20000eaa <delay_milli>:
///				'delay_250ns()' function is suboptimal as you reset
///				the 'STK_CTRL' register twice between every iteration
///				of the for loop.
/// 			
void delay_milli( unsigned int ms )
{
20000eaa:	b580      	push	{r7, lr}
20000eac:	b084      	sub	sp, #16
20000eae:	af00      	add	r7, sp, #0
20000eb0:	6078      	str	r0, [r7, #4]
//#ifdef SIMULATOR
	//ms = ms >> 10;
 	//ms++;
//#endif
	// Convert the given time to a number of 250 ns delays.
	unsigned int delays = ms * 4000;
20000eb2:	687b      	ldr	r3, [r7, #4]
20000eb4:	22fa      	movs	r2, #250	; 0xfa
20000eb6:	0112      	lsls	r2, r2, #4
20000eb8:	4353      	muls	r3, r2
20000eba:	60bb      	str	r3, [r7, #8]
	unsigned int i;
	for(i = 0; i < delays; i++)
20000ebc:	2300      	movs	r3, #0
20000ebe:	60fb      	str	r3, [r7, #12]
20000ec0:	e004      	b.n	20000ecc <delay_milli+0x22>
	{
		delay_250ns();
20000ec2:	f7ff ffb3 	bl	20000e2c <delay_250ns>
	for(i = 0; i < delays; i++)
20000ec6:	68fb      	ldr	r3, [r7, #12]
20000ec8:	3301      	adds	r3, #1
20000eca:	60fb      	str	r3, [r7, #12]
20000ecc:	68fa      	ldr	r2, [r7, #12]
20000ece:	68bb      	ldr	r3, [r7, #8]
20000ed0:	429a      	cmp	r2, r3
20000ed2:	d3f6      	bcc.n	20000ec2 <delay_milli+0x18>
	}
}
20000ed4:	46c0      	nop			; (mov r8, r8)
20000ed6:	46bd      	mov	sp, r7
20000ed8:	b004      	add	sp, #16
20000eda:	bd80      	pop	{r7, pc}

20000edc <count>:
20000edc:	00000000 	andeq	r0, r0, r0

20000ee0 <backBuffer>:
	...
200012e0:	0a030201 	beq	200c1aec <backBuffer+0xc0c0c>
200012e4:	0b060504 	bleq	201826fc <backBuffer+0x18181c>
200012e8:	0c090807 	stceq	8, cr0, [r9], {7}
200012ec:	0d0f000e 	stceq	0, cr0, [pc, #-56]	; 200012bc <backBuffer+0x3dc>
200012f0:	0006003f 	andeq	r0, r6, pc, lsr r0
200012f4:	004f005b 	subeq	r0, pc, fp, asr r0	; <UNPREDICTABLE>
200012f8:	006d0066 	rsbeq	r0, sp, r6, rrx
200012fc:	0007007d 	andeq	r0, r7, sp, ror r0
20001300:	006f007f 	rsbeq	r0, pc, pc, ror r0	; <UNPREDICTABLE>
20001304:	007c0077 	rsbseq	r0, ip, r7, ror r0
20001308:	005e0058 	subseq	r0, lr, r8, asr r0
2000130c:	00760080 	rsbseq	r0, r6, r0, lsl #1
20001310:	200009a0 	andcs	r0, r0, r0, lsr #19
20001314:	200009aa 	andcs	r0, r0, sl, lsr #19
20001318:	200009b4 			; <UNDEFINED> instruction: 0x200009b4
2000131c:	200009be 			; <UNDEFINED> instruction: 0x200009be
20001320:	200009c8 	andcs	r0, r0, r8, asr #19
20001324:	200009d2 	ldrdcs	r0, [r0], -r2
20001328:	200009dc 	ldrdcs	r0, [r0], -ip
2000132c:	200009e6 	andcs	r0, r0, r6, ror #19

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	00000806 	andeq	r0, r0, r6, lsl #16
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	0000001f 	andeq	r0, r0, pc, lsl r0
  10:	0000e90c 	andeq	lr, r0, ip, lsl #18
  14:	00001000 	andeq	r1, r0, r0
  18:	000bd820 	andeq	sp, fp, r0, lsr #16
  1c:	00000000 	andeq	r0, r0, r0
  20:	06010200 	streq	r0, [r1], -r0, lsl #4
  24:	00000258 	andeq	r0, r0, r8, asr r2
  28:	00020403 	andeq	r0, r2, r3, lsl #8
  2c:	332b0200 			; <UNDEFINED> instruction: 0x332b0200
  30:	02000000 	andeq	r0, r0, #0
  34:	02560801 	subseq	r0, r6, #65536	; 0x10000
  38:	02020000 	andeq	r0, r2, #0
  3c:	00012e05 	andeq	r2, r1, r5, lsl #28
  40:	00de0300 	sbcseq	r0, lr, r0, lsl #6
  44:	39020000 	stmdbcc	r2, {}	; <UNPREDICTABLE>
  48:	0000004c 	andeq	r0, r0, ip, asr #32
  4c:	c8070202 	stmdagt	r7, {r1, r9}
  50:	02000002 	andeq	r0, r0, #2
  54:	01ae0504 			; <UNDEFINED> instruction: 0x01ae0504
  58:	d3030000 	movwle	r0, #12288	; 0x3000
  5c:	02000000 	andeq	r0, r0, #0
  60:	0000654f 	andeq	r6, r0, pc, asr #10
  64:	07040200 	streq	r0, [r4, -r0, lsl #4]
  68:	000002a4 	andeq	r0, r0, r4, lsr #5
  6c:	a9050802 	stmdbge	r5, {r1, fp}
  70:	02000001 	andeq	r0, r0, #1
  74:	029f0708 	addseq	r0, pc, #8, 14	; 0x200000
  78:	04040000 	streq	r0, [r4], #-0
  7c:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
  80:	07040200 	streq	r0, [r4, -r0, lsl #4]
  84:	000002a9 	andeq	r0, r0, r9, lsr #5
  88:	00020603 	andeq	r0, r2, r3, lsl #12
  8c:	28180300 	ldmdacs	r8, {r8, r9}
  90:	03000000 	movweq	r0, #0
  94:	000000e0 	andeq	r0, r0, r0, ror #1
  98:	00412403 	subeq	r2, r1, r3, lsl #8
  9c:	d5030000 	strle	r0, [r3, #-0]
  a0:	03000000 	movweq	r0, #0
  a4:	00005a30 	andeq	r5, r0, r0, lsr sl
  a8:	04180500 	ldreq	r0, [r8], #-1280	; 0xfffffb00
  ac:	0001361c 	andeq	r3, r1, ip, lsl r6
  b0:	03fc0600 	mvnseq	r0, #0, 12
  b4:	1d040000 	stcne	0, cr0, [r4, #-0]
  b8:	0000009e 	muleq	r0, lr, r0
  bc:	014d0600 	cmpeq	sp, r0, lsl #12
  c0:	1e040000 	cdpne	0, 0, cr0, cr4, cr0, {0}
  c4:	00000093 	muleq	r0, r3, r0
  c8:	01b70604 			; <UNDEFINED> instruction: 0x01b70604
  cc:	1f040000 	svcne	0x00040000
  d0:	00000093 	muleq	r0, r3, r0
  d4:	01c20606 	biceq	r0, r2, r6, lsl #12
  d8:	20040000 	andcs	r0, r4, r0
  dc:	0000009e 	muleq	r0, lr, r0
  e0:	03cc0608 	biceq	r0, ip, #8, 12	; 0x800000
  e4:	21040000 	mrscs	r0, (UNDEF: 4)
  e8:	0000009e 	muleq	r0, lr, r0
  ec:	0000060c 	andeq	r0, r0, ip, lsl #12
  f0:	22040000 	andcs	r0, r4, #0
  f4:	00000088 	andeq	r0, r0, r8, lsl #1
  f8:	03170610 	tsteq	r7, #16, 12	; 0x1000000
  fc:	23040000 	movwcs	r0, #16384	; 0x4000
 100:	00000088 	andeq	r0, r0, r8, lsl #1
 104:	02e00611 	rsceq	r0, r0, #17825792	; 0x1100000
 108:	24040000 	strcs	r0, [r4], #-0
 10c:	00000093 	muleq	r0, r3, r0
 110:	04220612 	strteq	r0, [r2], #-1554	; 0xfffff9ee
 114:	25040000 	strcs	r0, [r4, #-0]
 118:	00000088 	andeq	r0, r0, r8, lsl #1
 11c:	041a0614 	ldreq	r0, [sl], #-1556	; 0xfffff9ec
 120:	26040000 	strcs	r0, [r4], -r0
 124:	00000088 	andeq	r0, r0, r8, lsl #1
 128:	000d0615 	andeq	r0, sp, r5, lsl r6
 12c:	27040000 	strcs	r0, [r4, -r0]
 130:	00000093 	muleq	r0, r3, r0
 134:	db030016 	blle	c0194 <startup-0x1ff3fe6c>
 138:	04000002 	streq	r0, [r0], #-2
 13c:	0000a928 	andeq	sl, r0, r8, lsr #18
 140:	00880700 	addeq	r0, r8, r0, lsl #14
 144:	01520000 	cmpeq	r2, r0
 148:	52080000 	andpl	r0, r8, #0
 14c:	ff000001 			; <UNDEFINED> instruction: 0xff000001
 150:	04020003 	streq	r0, [r2], #-3
 154:	0000ca07 	andeq	ip, r0, r7, lsl #20
 158:	042f0900 	strteq	r0, [pc], #-2304	; 160 <startup-0x1ffffea0>
 15c:	b2010000 	andlt	r0, r1, #0
 160:	00014101 	andeq	r4, r1, r1, lsl #2
 164:	e0030500 	and	r0, r3, r0, lsl #10
 168:	0a20000e 	beq	8001a8 <startup-0x1f7ffe58>
 16c:	0000022d 	andeq	r0, r0, sp, lsr #4
 170:	1801ff01 	stmdane	r1, {r0, r8, r9, sl, fp, ip, sp, lr, pc}
 174:	d020000b 	eorle	r0, r0, fp
 178:	01000000 	mrseq	r0, (UNDEF: 0)
 17c:	0001c59c 	muleq	r1, ip, r5
 180:	00690b00 	rsbeq	r0, r9, r0, lsl #22
 184:	88020101 	stmdahi	r2, {r0, r8}
 188:	02000000 	andeq	r0, r0, #0
 18c:	6a0b7791 	bvs	2ddfd8 <startup-0x1fd22028>
 190:	02010100 	andeq	r0, r1, #0, 2
 194:	00000088 	andeq	r0, r0, r8, lsl #1
 198:	0c769102 	ldfeqp	f1, [r6], #-8
 19c:	0000032a 	andeq	r0, r0, sl, lsr #6
 1a0:	88020101 	stmdahi	r2, {r0, r8}
 1a4:	02000000 	andeq	r0, r0, #0
 1a8:	630b6f91 	movwvs	r6, #49041	; 0xbf91
 1ac:	02010100 	andeq	r0, r1, #0, 2
 1b0:	00000088 	andeq	r0, r0, r8, lsl #1
 1b4:	0b759102 	bleq	1d645c4 <startup-0x1e29ba3c>
 1b8:	0201006b 	andeq	r0, r1, #107	; 0x6b
 1bc:	00008102 	andeq	r8, r0, r2, lsl #2
 1c0:	70910200 	addsvc	r0, r1, r0, lsl #4
 1c4:	04290d00 	strteq	r0, [r9], #-3328	; 0xfffff300
 1c8:	f8010000 			; <UNDEFINED> instruction: 0xf8010000
 1cc:	000ae401 	andeq	lr, sl, r1, lsl #8
 1d0:	00003420 	andeq	r3, r0, r0, lsr #8
 1d4:	e99c0100 	ldmib	ip, {r8}
 1d8:	0b000001 	bleq	1e4 <startup-0x1ffffe1c>
 1dc:	fa010069 	blx	40388 <startup-0x1ffbfc78>
 1e0:	00007a01 	andeq	r7, r0, r1, lsl #20
 1e4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 1e8:	00070a00 	andeq	r0, r7, r0, lsl #20
 1ec:	b4010000 	strlt	r0, [r1], #-0
 1f0:	00094401 	andeq	r4, r9, r1, lsl #8
 1f4:	0001a020 	andeq	sl, r1, r0, lsr #32
 1f8:	639c0100 	orrsvs	r0, ip, #0, 2
 1fc:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
 200:	b4010078 	strlt	r0, [r1], #-120	; 0xffffff88
 204:	00007a01 	andeq	r7, r0, r1, lsl #20
 208:	5c910200 	lfmpl	f0, 4, [r1], {0}
 20c:	0100790e 	tsteq	r0, lr, lsl #18
 210:	007a01b4 	ldrhteq	r0, [sl], #-20	; 0xffffffec
 214:	91020000 	mrsls	r0, (UNDEF: 2)
 218:	65730e58 	ldrbvs	r0, [r3, #-3672]!	; 0xfffff1a8
 21c:	b4010074 	strlt	r0, [r1], #-116	; 0xffffff8c
 220:	00007a01 	andeq	r7, r0, r1, lsl #20
 224:	54910200 	ldrpl	r0, [r1], #512	; 0x200
 228:	0003b50c 	andeq	fp, r3, ip, lsl #10
 22c:	01b60100 			; <UNDEFINED> instruction: 0x01b60100
 230:	00000088 	andeq	r0, r0, r8, lsl #1
 234:	0b6f9102 	bleq	1be4644 <startup-0x1e41b9bc>
 238:	b6010063 	strlt	r0, [r1], -r3, rrx
 23c:	00008801 	andeq	r8, r0, r1, lsl #16
 240:	67910200 	ldrvs	r0, [r1, r0, lsl #4]
 244:	00032a0c 	andeq	r2, r3, ip, lsl #20
 248:	01b60100 			; <UNDEFINED> instruction: 0x01b60100
 24c:	00000088 	andeq	r0, r0, r8, lsl #1
 250:	0c6e9102 	stfeqp	f1, [lr], #-8
 254:	00000019 	andeq	r0, r0, r9, lsl r0
 258:	7a01b701 	bvc	6de64 <startup-0x1ff9219c>
 25c:	02000000 	andeq	r0, r0, #0
 260:	0a006891 	beq	1a4ac <startup-0x1ffe5b54>
 264:	00000138 	andeq	r0, r0, r8, lsr r1
 268:	de01a601 	cfmadd32le	mvax0, mvfx10, mvfx1, mvfx1
 26c:	66200008 	strtvs	r0, [r0], -r8
 270:	01000000 	mrseq	r0, (UNDEF: 0)
 274:	0002949c 	muleq	r2, ip, r4
 278:	00690b00 	rsbeq	r0, r9, r0, lsl #22
 27c:	8801a801 	stmdahi	r1, {r0, fp, sp, pc}
 280:	02000000 	andeq	r0, r0, #0
 284:	6a0b7791 	bvs	2de0d0 <startup-0x1fd21f30>
 288:	01a80100 			; <UNDEFINED> instruction: 0x01a80100
 28c:	00000088 	andeq	r0, r0, r8, lsl #1
 290:	00769102 	rsbseq	r9, r6, r2, lsl #2
 294:	00020e0f 	andeq	r0, r2, pc, lsl #28
 298:	019d0100 	orrseq	r0, sp, r0, lsl #2
 29c:	20000898 	mulcs	r0, r8, r8
 2a0:	00000046 	andeq	r0, r0, r6, asr #32
 2a4:	02c99c01 	sbceq	r9, r9, #256	; 0x100
 2a8:	fa100000 	blx	4002b0 <startup-0x1fbffd50>
 2ac:	01000001 	tsteq	r0, r1
 2b0:	0088019d 	umulleq	r0, r8, sp, r1
 2b4:	91020000 	mrsls	r0, (UNDEF: 2)
 2b8:	032a1077 			; <UNDEFINED> instruction: 0x032a1077
 2bc:	9d010000 	stcls	0, cr0, [r1, #-0]
 2c0:	00008801 	andeq	r8, r0, r1, lsl #16
 2c4:	76910200 	ldrvc	r0, [r1], r0, lsl #4
 2c8:	027b0f00 	rsbseq	r0, fp, #0, 30
 2cc:	95010000 	strls	r0, [r1, #-0]
 2d0:	00085801 	andeq	r5, r8, r1, lsl #16
 2d4:	00004020 	andeq	r4, r0, r0, lsr #32
 2d8:	fe9c0100 	cdp2	1, 9, cr0, cr12, cr0, {0}
 2dc:	10000002 	andne	r0, r0, r2
 2e0:	00000289 	andeq	r0, r0, r9, lsl #5
 2e4:	88019501 	stmdahi	r1, {r0, r8, sl, ip, pc}
 2e8:	02000000 	andeq	r0, r0, #0
 2ec:	2a107791 	bcs	41e138 <startup-0x1fbe1ec8>
 2f0:	01000003 	tsteq	r0, r3
 2f4:	00880195 	umulleq	r0, r8, r5, r1
 2f8:	91020000 	mrsls	r0, (UNDEF: 2)
 2fc:	910f0076 	tstls	pc, r6, ror r0	; <UNPREDICTABLE>
 300:	01000002 	tsteq	r0, r2
 304:	07ea0183 	strbeq	r0, [sl, r3, lsl #3]!
 308:	006e2000 	rsbeq	r2, lr, r0
 30c:	9c010000 	stcls	0, cr0, [r1], {-0}
 310:	00000341 	andeq	r0, r0, r1, asr #6
 314:	00015910 	andeq	r5, r1, r0, lsl r9
 318:	01830100 	orreq	r0, r3, r0, lsl #2
 31c:	00000088 	andeq	r0, r0, r8, lsl #1
 320:	10779102 	rsbsne	r9, r7, r2, lsl #2
 324:	0000032a 	andeq	r0, r0, sl, lsr #6
 328:	88018301 	stmdahi	r1, {r0, r8, r9, pc}
 32c:	02000000 	andeq	r0, r0, #0
 330:	b6117691 			; <UNDEFINED> instruction: 0xb6117691
 334:	01000002 	tsteq	r0, r2
 338:	007a0158 	rsbseq	r0, sl, r8, asr r1
 33c:	00120000 	andseq	r0, r2, r0
 340:	01ed1300 	mvneq	r1, r0, lsl #6
 344:	7d010000 	stcvc	0, cr0, [r1, #-0]
 348:	00008801 	andeq	r8, r0, r1, lsl #16
 34c:	0007c000 	andeq	ip, r7, r0
 350:	00002a20 	andeq	r2, r0, r0, lsr #20
 354:	6b9c0100 	blvs	fe70075c <backBuffer+0xde6ff87c>
 358:	10000003 	andne	r0, r0, r3
 35c:	0000032a 	andeq	r0, r0, sl, lsr #6
 360:	88017d01 	stmdahi	r1, {r0, r8, sl, fp, ip, sp, lr}
 364:	02000000 	andeq	r0, r0, #0
 368:	13007791 	movwne	r7, #1937	; 0x791
 36c:	00000179 	andeq	r0, r0, r9, ror r1
 370:	88016501 	stmdahi	r1, {r0, r8, sl, sp, lr}
 374:	30000000 	andcc	r0, r0, r0
 378:	90200007 	eorls	r0, r0, r7
 37c:	01000000 	mrseq	r0, (UNDEF: 0)
 380:	0003b09c 	muleq	r3, ip, r0
 384:	032a1000 			; <UNDEFINED> instruction: 0x032a1000
 388:	65010000 	strvs	r0, [r1, #-0]
 38c:	00008801 	andeq	r8, r0, r1, lsl #16
 390:	6f910200 	svcvs	0x00910200
 394:	0100630b 	tsteq	r0, fp, lsl #6
 398:	00880167 	addeq	r0, r8, r7, ror #2
 39c:	91020000 	mrsls	r0, (UNDEF: 2)
 3a0:	02b61177 	adcseq	r1, r6, #-1073741795	; 0xc000001d
 3a4:	58010000 	stmdapl	r1, {}	; <UNPREDICTABLE>
 3a8:	00007a01 	andeq	r7, r0, r1, lsl #20
 3ac:	00001200 	andeq	r1, r0, r0, lsl #4
 3b0:	0003700f 	andeq	r7, r3, pc
 3b4:	01510100 	cmpeq	r1, r0, lsl #2
 3b8:	200006c6 	andcs	r0, r0, r6, asr #13
 3bc:	0000006a 	andeq	r0, r0, sl, rrx
 3c0:	03e29c01 	mvneq	r9, #256	; 0x100
 3c4:	630b0000 	movwvs	r0, #45056	; 0xb000
 3c8:	01530100 	cmpeq	r3, r0, lsl #2
 3cc:	00000088 	andeq	r0, r0, r8, lsl #1
 3d0:	11779102 	cmnne	r7, r2, lsl #2
 3d4:	000002b6 			; <UNDEFINED> instruction: 0x000002b6
 3d8:	7a015801 	bvc	563e4 <startup-0x1ffa9c1c>
 3dc:	12000000 	andne	r0, r0, #0
 3e0:	d20a0000 	andle	r0, sl, #0
 3e4:	01000003 	tsteq	r0, r3
 3e8:	066a0141 	strbteq	r0, [sl], -r1, asr #2
 3ec:	005c2000 	subseq	r2, ip, r0
 3f0:	9c010000 	stcls	0, cr0, [r1], {-0}
 3f4:	00000418 	andeq	r0, r0, r8, lsl r4
 3f8:	00012214 	andeq	r2, r1, r4, lsl r2
 3fc:	7a8c0100 	bvc	fe300804 <backBuffer+0xde2ff924>
 400:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
 404:	12000004 	andne	r0, r0, #4
 408:	02211100 	eoreq	r1, r1, #0, 2
 40c:	46010000 	strmi	r0, [r1], -r0
 410:	00007a01 	andeq	r7, r0, r1, lsl #20
 414:	00001200 	andeq	r1, r0, r0, lsl #4
 418:	0003ba0a 	andeq	fp, r3, sl, lsl #20
 41c:	012d0100 			; <UNDEFINED> instruction: 0x012d0100
 420:	20000610 	andcs	r0, r0, r0, lsl r6
 424:	0000005a 	andeq	r0, r0, sl, asr r0
 428:	043e9c01 	ldrteq	r9, [lr], #-3073	; 0xfffff3ff
 42c:	2a100000 	bcs	400434 <startup-0x1fbffbcc>
 430:	01000003 	tsteq	r0, r3
 434:	0088012d 	addeq	r0, r8, sp, lsr #2
 438:	91020000 	mrsls	r0, (UNDEF: 2)
 43c:	64150077 	ldrvs	r0, [r5], #-119	; 0xffffff89
 440:	01000002 	tsteq	r0, r2
 444:	05b80123 	ldreq	r0, [r8, #291]!	; 0x123
 448:	00582000 	subseq	r2, r8, r0
 44c:	9c010000 	stcls	0, cr0, [r1], {-0}
 450:	0000046f 	andeq	r0, r0, pc, ror #8
 454:	0100780e 	tsteq	r0, lr, lsl #16
 458:	00880123 	addeq	r0, r8, r3, lsr #2
 45c:	91020000 	mrsls	r0, (UNDEF: 2)
 460:	00630b6f 	rsbeq	r0, r3, pc, ror #22
 464:	88012501 	stmdahi	r1, {r0, r8, sl, sp}
 468:	02000000 	andeq	r0, r0, #0
 46c:	15007791 	strne	r7, [r0, #-1937]	; 0xfffff86f
 470:	000002f1 	strdeq	r0, [r0], -r1
 474:	5c011901 			; <UNDEFINED> instruction: 0x5c011901
 478:	5c200005 	stcpl	0, cr0, [r0], #-20	; 0xffffffec
 47c:	01000000 	mrseq	r0, (UNDEF: 0)
 480:	0004a09c 	muleq	r4, ip, r0
 484:	00780e00 	rsbseq	r0, r8, r0, lsl #28
 488:	88011901 	stmdahi	r1, {r0, r8, fp, ip}
 48c:	02000000 	andeq	r0, r0, #0
 490:	630b6f91 	movwvs	r6, #49041	; 0xbf91
 494:	011b0100 	tsteq	fp, r0, lsl #2
 498:	00000088 	andeq	r0, r0, r8, lsl #1
 49c:	00779102 	rsbseq	r9, r7, r2, lsl #2
 4a0:	0003060a 	andeq	r0, r3, sl, lsl #12
 4a4:	010c0100 	mrseq	r0, (UNDEF: 28)
 4a8:	20000520 	andcs	r0, r0, r0, lsr #10
 4ac:	0000003c 	andeq	r0, r0, ip, lsr r0
 4b0:	04d19c01 	ldrbeq	r9, [r1], #3073	; 0xc01
 4b4:	630e0000 	movwvs	r0, #57344	; 0xe000
 4b8:	010c0100 	mrseq	r0, (UNDEF: 28)
 4bc:	00000033 	andeq	r0, r0, r3, lsr r0
 4c0:	16779102 	ldrbtne	r9, [r7], -r2, lsl #2
 4c4:	00000122 	andeq	r0, r0, r2, lsr #2
 4c8:	007a8c01 	rsbseq	r8, sl, r1, lsl #24
 4cc:	00120000 	andseq	r0, r2, r0
 4d0:	016c0a00 	cmneq	ip, r0, lsl #20
 4d4:	01010000 	mrseq	r0, (UNDEF: 1)
 4d8:	0004cc01 	andeq	ip, r4, r1, lsl #24
 4dc:	00005420 	andeq	r5, r0, r0, lsr #8
 4e0:	119c0100 	orrsne	r0, ip, r0, lsl #2
 4e4:	0e000005 	cdpeq	0, 0, cr0, cr0, cr5, {0}
 4e8:	01010078 	tsteq	r1, r8, ror r0
 4ec:	00007a01 	andeq	r7, r0, r1, lsl #20
 4f0:	6c910200 	lfmvs	f0, 4, [r1], {0}
 4f4:	0100790e 	tsteq	r0, lr, lsl #18
 4f8:	007a0101 	rsbseq	r0, sl, r1, lsl #2
 4fc:	91020000 	mrsls	r0, (UNDEF: 2)
 500:	01da0c68 	bicseq	r0, sl, r8, ror #24
 504:	05010000 	streq	r0, [r1, #-0]
 508:	00003301 	andeq	r3, r0, r1, lsl #6
 50c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 510:	031f1700 	tsteq	pc, #0, 14
 514:	f6010000 			; <UNDEFINED> instruction: 0xf6010000
 518:	00000033 	andeq	r0, r0, r3, lsr r0
 51c:	20000498 	mulcs	r0, r8, r4
 520:	00000034 	andeq	r0, r0, r4, lsr r0
 524:	05469c01 	strbeq	r9, [r6, #-3073]	; 0xfffff3ff
 528:	54180000 	ldrpl	r0, [r8], #-0
 52c:	01000001 	tsteq	r0, r1
 530:	000033f8 	strdeq	r3, [r0], -r8
 534:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 538:	0003a416 	andeq	sl, r3, r6, lsl r4
 53c:	7af10100 	bvc	ffc40944 <backBuffer+0xdfc3fa64>
 540:	12000000 	andne	r0, r0, #0
 544:	e5190000 	ldr	r0, [r9, #-0]
 548:	01000003 	tsteq	r0, r3
 54c:	000468ec 	andeq	r6, r4, ip, ror #17
 550:	00003020 	andeq	r3, r0, r0, lsr #32
 554:	779c0100 	ldrvc	r0, [ip, r0, lsl #2]
 558:	1a000005 	bne	574 <startup-0x1ffffa8c>
 55c:	000003b0 			; <UNDEFINED> instruction: 0x000003b0
 560:	0033ec01 	eorseq	lr, r3, r1, lsl #24
 564:	91020000 	mrsls	r0, (UNDEF: 2)
 568:	03a41677 			; <UNDEFINED> instruction: 0x03a41677
 56c:	f1010000 	setend	le
 570:	0000007a 	andeq	r0, r0, sl, ror r0
 574:	17000012 	smladne	r0, r2, r0, r0
 578:	00000402 	andeq	r0, r0, r2, lsl #8
 57c:	0033db01 	eorseq	sp, r3, r1, lsl #22
 580:	04200000 	strteq	r0, [r0], #-0
 584:	00482000 	subeq	r2, r8, r0
 588:	9c010000 	stcls	0, cr0, [r1], {-0}
 58c:	0000059f 	muleq	r0, pc, r5	; <UNPREDICTABLE>
 590:	00015418 	andeq	r5, r1, r8, lsl r4
 594:	33dd0100 	bicscc	r0, sp, #0, 2
 598:	02000000 	andeq	r0, r0, #0
 59c:	17006f91 			; <UNDEFINED> instruction: 0x17006f91
 5a0:	00000335 	andeq	r0, r0, r5, lsr r3
 5a4:	0033ca01 	eorseq	ip, r3, r1, lsl #20
 5a8:	03d80000 	bicseq	r0, r8, #0
 5ac:	00482000 	subeq	r2, r8, r0
 5b0:	9c010000 	stcls	0, cr0, [r1], {-0}
 5b4:	000005c7 	andeq	r0, r0, r7, asr #11
 5b8:	00015418 	andeq	r5, r1, r8, lsl r4
 5bc:	33cc0100 	biccc	r0, ip, #0, 2
 5c0:	02000000 	andeq	r0, r0, #0
 5c4:	19006f91 	stmdbne	r0, {r0, r4, r7, r8, r9, sl, fp, sp, lr}
 5c8:	00000358 	andeq	r0, r0, r8, asr r3
 5cc:	03aec301 			; <UNDEFINED> instruction: 0x03aec301
 5d0:	002a2000 	eoreq	r2, sl, r0
 5d4:	9c010000 	stcls	0, cr0, [r1], {-0}
 5d8:	000005eb 	andeq	r0, r0, fp, ror #11
 5dc:	0001fa1a 	andeq	pc, r1, sl, lsl sl	; <UNPREDICTABLE>
 5e0:	33c30100 	biccc	r0, r3, #0, 2
 5e4:	02000000 	andeq	r0, r0, #0
 5e8:	19007791 	stmdbne	r0, {r0, r4, r7, r8, r9, sl, ip, sp, lr}
 5ec:	00000199 	muleq	r0, r9, r1
 5f0:	0384bb01 	orreq	fp, r4, #1024	; 0x400
 5f4:	002a2000 	eoreq	r2, sl, r0
 5f8:	9c010000 	stcls	0, cr0, [r1], {-0}
 5fc:	0000060f 	andeq	r0, r0, pc, lsl #12
 600:	0002891a 	andeq	r8, r2, sl, lsl r9
 604:	33bb0100 			; <UNDEFINED> instruction: 0x33bb0100
 608:	02000000 	andeq	r0, r0, #0
 60c:	1b007791 	blne	1e458 <startup-0x1ffe1ba8>
 610:	00000241 	andeq	r0, r0, r1, asr #4
 614:	0334b101 	teqeq	r4, #1073741824	; 0x40000000
 618:	00502000 	subseq	r2, r0, r0
 61c:	9c010000 	stcls	0, cr0, [r1], {-0}
 620:	0000063d 	andeq	r0, r0, sp, lsr r6
 624:	0100781c 	tsteq	r0, ip, lsl r8
 628:	000033b1 			; <UNDEFINED> instruction: 0x000033b1
 62c:	6f910200 	svcvs	0x00910200
 630:	0100631d 	tsteq	r0, sp, lsl r3
 634:	000033b5 			; <UNDEFINED> instruction: 0x000033b5
 638:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 63c:	01861b00 	orreq	r1, r6, r0, lsl #22
 640:	a7010000 	strge	r0, [r1, -r0]
 644:	200002ee 	andcs	r0, r0, lr, ror #5
 648:	00000046 	andeq	r0, r0, r6, asr #32
 64c:	066b9c01 	strbteq	r9, [fp], -r1, lsl #24
 650:	781c0000 	ldmdavc	ip, {}	; <UNPREDICTABLE>
 654:	33a70100 			; <UNDEFINED> instruction: 0x33a70100
 658:	02000000 	andeq	r0, r0, #0
 65c:	631d6f91 	tstvs	sp, #580	; 0x244
 660:	33ab0100 			; <UNDEFINED> instruction: 0x33ab0100
 664:	02000000 	andeq	r0, r0, #0
 668:	19007791 	stmdbne	r0, {r0, r4, r7, r8, r9, sl, ip, sp, lr}
 66c:	000001e2 	andeq	r0, r0, r2, ror #3
 670:	02548801 	subseq	r8, r4, #65536	; 0x10000
 674:	009a2000 	addseq	r2, sl, r0
 678:	9c010000 	stcls	0, cr0, [r1], {-0}
 67c:	0000068e 	andeq	r0, r0, lr, lsl #13
 680:	00012216 	andeq	r2, r1, r6, lsl r2
 684:	7a8c0100 	bvc	fe300a8c <backBuffer+0xde2ffbac>
 688:	12000000 	andne	r0, r0, #0
 68c:	8c1e0000 	ldchi	0, cr0, [lr], {-0}
 690:	01000003 	tsteq	r0, r3
 694:	00023874 	andeq	r3, r2, r4, ror r8
 698:	00001c20 	andeq	r1, r0, r0, lsr #24
 69c:	1f9c0100 	svcne	0x009c0100
 6a0:	00000383 	andeq	r0, r0, r3, lsl #7
 6a4:	00336701 	eorseq	r6, r3, r1, lsl #14
 6a8:	01e60000 	mvneq	r0, r0
 6ac:	00522000 	subseq	r2, r2, r0
 6b0:	9c010000 	stcls	0, cr0, [r1], {-0}
 6b4:	000006c7 	andeq	r0, r0, r7, asr #13
 6b8:	0002c21a 	andeq	ip, r2, sl, lsl r2
 6bc:	c7670100 	strbgt	r0, [r7, -r0, lsl #2]!
 6c0:	02000006 	andeq	r0, r0, #6
 6c4:	20007491 	mulcs	r0, r1, r4
 6c8:	00013604 	andeq	r3, r1, r4, lsl #12
 6cc:	01ca1b00 	biceq	r1, sl, r0, lsl #22
 6d0:	62010000 	andvs	r0, r1, #0
 6d4:	200001d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 6d8:	00000016 	andeq	r0, r0, r6, lsl r0
 6dc:	06f19c01 	ldrbteq	r9, [r1], r1, lsl #24
 6e0:	c21a0000 	andsgt	r0, sl, #0
 6e4:	01000002 	tsteq	r0, r2
 6e8:	0006c762 	andeq	ip, r6, r2, ror #14
 6ec:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 6f0:	015f1b00 	cmpeq	pc, r0, lsl #22
 6f4:	50010000 	andpl	r0, r1, r0
 6f8:	20000180 	andcs	r0, r0, r0, lsl #3
 6fc:	00000050 	andeq	r0, r0, r0, asr r0
 700:	07239c01 	streq	r9, [r3, -r1, lsl #24]!
 704:	c21a0000 	andsgt	r0, sl, #0
 708:	01000002 	tsteq	r0, r2
 70c:	0006c750 	andeq	ip, r6, r0, asr r7
 710:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 714:	776f721c 			; <UNDEFINED> instruction: 0x776f721c
 718:	33500100 	cmpcc	r0, #0, 2
 71c:	02000000 	andeq	r0, r0, #0
 720:	1b007391 	blne	1d56c <startup-0x1ffe2a94>
 724:	00000412 	andeq	r0, r0, r2, lsl r4
 728:	01303401 	teqeq	r0, r1, lsl #8
 72c:	00502000 	subseq	r2, r0, r0
 730:	9c010000 	stcls	0, cr0, [r1], {-0}
 734:	00000761 	andeq	r0, r0, r1, ror #14
 738:	0002c21a 	andeq	ip, r2, sl, lsl r2
 73c:	c7340100 	ldrgt	r0, [r4, -r0, lsl #2]!
 740:	02000006 	andeq	r0, r0, #6
 744:	631c4c91 	tstvs	ip, #37120	; 0x9100
 748:	33340100 	teqcc	r4, #0, 2
 74c:	02000000 	andeq	r0, r0, #0
 750:	69184b91 	ldmdbvs	r8, {r0, r4, r7, r8, r9, fp, lr}
 754:	01000003 	tsteq	r0, r3
 758:	00076136 	andeq	r6, r7, r6, lsr r1
 75c:	50910200 	addspl	r0, r1, r0, lsl #4
 760:	004c0700 	subeq	r0, ip, r0, lsl #14
 764:	07710000 	ldrbeq	r0, [r1, -r0]!
 768:	52210000 	eorpl	r0, r1, #0
 76c:	0f000001 	svceq	0x00000001
 770:	01ff1700 	mvnseq	r1, r0, lsl #14
 774:	24010000 	strcs	r0, [r1], #-0
 778:	00000033 	andeq	r0, r0, r3, lsr r0
 77c:	200000a0 	andcs	r0, r0, r0, lsr #1
 780:	00000090 	muleq	r0, r0, r0
 784:	07b59c01 	ldreq	r9, [r5, r1, lsl #24]!
 788:	ec180000 	ldc	0, cr0, [r8], {-0}
 78c:	01000002 	tsteq	r0, r2
 790:	0007b526 	andeq	fp, r7, r6, lsr #10
 794:	5c910200 	lfmpl	f0, 4, [r1], {0}
 798:	776f721d 			; <UNDEFINED> instruction: 0x776f721d
 79c:	33270100 			; <UNDEFINED> instruction: 0x33270100
 7a0:	02000000 	andeq	r0, r0, #0
 7a4:	631d6f91 	tstvs	sp, #580	; 0x244
 7a8:	01006c6f 	tsteq	r0, pc, ror #24
 7ac:	00003327 	andeq	r3, r0, r7, lsr #6
 7b0:	6e910200 	cdpvs	2, 9, cr0, cr1, cr0, {0}
 7b4:	00330700 	eorseq	r0, r3, r0, lsl #14
 7b8:	07c50000 	strbeq	r0, [r5, r0]
 7bc:	52210000 	eorpl	r0, r1, #0
 7c0:	0f000001 	svceq	0x00000001
 7c4:	00b71b00 	adcseq	r1, r7, r0, lsl #22
 7c8:	15010000 	strne	r0, [r1, #-0]
 7cc:	20000074 	andcs	r0, r0, r4, ror r0
 7d0:	0000002c 	andeq	r0, r0, ip, lsr #32
 7d4:	07e99c01 	strbeq	r9, [r9, r1, lsl #24]!
 7d8:	c21a0000 	andsgt	r0, sl, #0
 7dc:	01000002 	tsteq	r0, r2
 7e0:	0006c715 	andeq	ip, r6, r5, lsl r7
 7e4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 7e8:	03472200 	movteq	r2, #29184	; 0x7200
 7ec:	03010000 	movweq	r0, #4096	; 0x1000
 7f0:	20000010 	andcs	r0, r0, r0, lsl r0
 7f4:	00000064 	andeq	r0, r0, r4, rrx
 7f8:	c21a9c01 	andsgt	r9, sl, #256	; 0x100
 7fc:	01000002 	tsteq	r0, r2
 800:	0006c703 	andeq	ip, r6, r3, lsl #14
 804:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 808:	01ba0000 			; <UNDEFINED> instruction: 0x01ba0000
 80c:	00040000 	andeq	r0, r4, r0
 810:	00000252 	andeq	r0, r0, r2, asr r2
 814:	001f0104 	andseq	r0, pc, r4, lsl #2
 818:	4d0c0000 	stcmi	0, cr0, [ip, #-0]
 81c:	00000004 	andeq	r0, r0, r4
 820:	00000000 	andeq	r0, r0, r0
 824:	1b000000 	blne	82c <startup-0x1ffff7d4>
 828:	02000003 	andeq	r0, r0, #3
 82c:	02580601 	subseq	r0, r8, #1048576	; 0x100000
 830:	04030000 	streq	r0, [r3], #-0
 834:	02000002 	andeq	r0, r0, #2
 838:	0000332b 	andeq	r3, r0, fp, lsr #6
 83c:	08010200 	stmdaeq	r1, {r9}
 840:	00000256 	andeq	r0, r0, r6, asr r2
 844:	2e050202 	cdpcs	2, 0, cr0, cr5, cr2, {0}
 848:	03000001 	movweq	r0, #1
 84c:	000000de 	ldrdeq	r0, [r0], -lr
 850:	004c3902 	subeq	r3, ip, r2, lsl #18
 854:	02020000 	andeq	r0, r2, #0
 858:	0002c807 	andeq	ip, r2, r7, lsl #16
 85c:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
 860:	000001ae 	andeq	r0, r0, lr, lsr #3
 864:	0000d303 	andeq	sp, r0, r3, lsl #6
 868:	654f0200 	strbvs	r0, [pc, #-512]	; 670 <startup-0x1ffff990>
 86c:	02000000 	andeq	r0, r0, #0
 870:	02a40704 	adceq	r0, r4, #4, 14	; 0x100000
 874:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
 878:	0001a905 	andeq	sl, r1, r5, lsl #18
 87c:	07080200 	streq	r0, [r8, -r0, lsl #4]
 880:	0000029f 	muleq	r0, pc, r2	; <UNPREDICTABLE>
 884:	69050404 	stmdbvs	r5, {r2, sl}
 888:	0500746e 	streq	r7, [r0, #-1134]	; 0xfffffb92
 88c:	0000007a 	andeq	r0, r0, sl, ror r0
 890:	a9070402 	stmdbge	r7, {r1, sl}
 894:	03000002 	movweq	r0, #2
 898:	00000206 	andeq	r0, r0, r6, lsl #4
 89c:	00281803 	eoreq	r1, r8, r3, lsl #16
 8a0:	e0030000 	and	r0, r3, r0
 8a4:	03000000 	movweq	r0, #0
 8a8:	00004124 	andeq	r4, r0, r4, lsr #2
 8ac:	00d50300 	sbcseq	r0, r5, r0, lsl #6
 8b0:	30030000 	andcc	r0, r3, r0
 8b4:	0000005a 	andeq	r0, r0, sl, asr r0
 8b8:	1c041806 	stcne	8, cr1, [r4], {6}
 8bc:	0000013b 	andeq	r0, r0, fp, lsr r1
 8c0:	0003fc07 	andeq	pc, r3, r7, lsl #24
 8c4:	a31d0400 	tstge	sp, #0, 8
 8c8:	00000000 	andeq	r0, r0, r0
 8cc:	00014d07 	andeq	r4, r1, r7, lsl #26
 8d0:	981e0400 	ldmdals	lr, {sl}
 8d4:	04000000 	streq	r0, [r0], #-0
 8d8:	0001b707 	andeq	fp, r1, r7, lsl #14
 8dc:	981f0400 	ldmdals	pc, {sl}	; <UNPREDICTABLE>
 8e0:	06000000 	streq	r0, [r0], -r0
 8e4:	0001c207 	andeq	ip, r1, r7, lsl #4
 8e8:	a3200400 	nopge	{0}	; <UNPREDICTABLE>
 8ec:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
 8f0:	0003cc07 	andeq	ip, r3, r7, lsl #24
 8f4:	a3210400 			; <UNDEFINED> instruction: 0xa3210400
 8f8:	0c000000 	stceq	0, cr0, [r0], {-0}
 8fc:	00000007 	andeq	r0, r0, r7
 900:	8d220400 	cfstrshi	mvf0, [r2, #-0]
 904:	10000000 	andne	r0, r0, r0
 908:	00031707 	andeq	r1, r3, r7, lsl #14
 90c:	8d230400 	cfstrshi	mvf0, [r3, #-0]
 910:	11000000 	mrsne	r0, (UNDEF: 0)
 914:	0002e007 	andeq	lr, r2, r7
 918:	98240400 	stmdals	r4!, {sl}
 91c:	12000000 	andne	r0, r0, #0
 920:	00042207 	andeq	r2, r4, r7, lsl #4
 924:	8d250400 	cfstrshi	mvf0, [r5, #-0]
 928:	14000000 	strne	r0, [r0], #-0
 92c:	00041a07 	andeq	r1, r4, r7, lsl #20
 930:	8d260400 	cfstrshi	mvf0, [r6, #-0]
 934:	15000000 	strne	r0, [r0, #-0]
 938:	00000d07 	andeq	r0, r0, r7, lsl #26
 93c:	98270400 	stmdals	r7!, {sl}
 940:	16000000 	strne	r0, [r0], -r0
 944:	02db0300 	sbcseq	r0, fp, #0, 6
 948:	28040000 	stmdacs	r4, {}	; <UNPREDICTABLE>
 94c:	000000ae 	andeq	r0, r0, lr, lsr #1
 950:	00043a08 	andeq	r3, r4, r8, lsl #20
 954:	814d0100 	mrshi	r0, (UNDEF: 93)
 958:	05000000 	streq	r0, [r0, #-0]
 95c:	000edc03 	andeq	sp, lr, r3, lsl #24
 960:	049f0920 	ldreq	r0, [pc], #2336	; 968 <startup-0x1ffff698>
 964:	97010000 	strls	r0, [r1, -r0]
 968:	20000e10 	andcs	r0, r0, r0, lsl lr
 96c:	0000001c 	andeq	r0, r0, ip, lsl r0
 970:	890a9c01 	stmdbhi	sl, {r0, sl, fp, ip, pc}
 974:	01000004 	tsteq	r0, r4
 978:	000cd866 	andeq	sp, ip, r6, ror #16
 97c:	00013820 	andeq	r3, r1, r0, lsr #16
 980:	0a9c0100 	beq	fe700d88 <backBuffer+0xde6ffea8>
 984:	000004ac 	andeq	r0, r0, ip, lsr #9
 988:	0c7c5a01 			; <UNDEFINED> instruction: 0x0c7c5a01
 98c:	005c2000 	subseq	r2, ip, r0
 990:	9c010000 	stcls	0, cr0, [r1], {-0}
 994:	0004920a 	andeq	r9, r4, sl, lsl #4
 998:	34540100 	ldrbcc	r0, [r4], #-256	; 0xffffff00
 99c:	4820000c 	stmdami	r0!, {r2, r3}
 9a0:	01000000 	mrseq	r0, (UNDEF: 0)
 9a4:	04400a9c 	strbeq	r0, [r0], #-2716	; 0xfffff564
 9a8:	4e010000 	cdpmi	0, 0, cr0, cr1, cr0, {0}
 9ac:	20000be8 	andcs	r0, r0, r8, ror #23
 9b0:	0000004c 	andeq	r0, r0, ip, asr #32
 9b4:	a40a9c01 	strge	r9, [sl], #-3073	; 0xfffff3ff
 9b8:	01000004 	tsteq	r0, r4
 9bc:	00000006 	andeq	r0, r0, r6
 9c0:	00000c20 	andeq	r0, r0, r0, lsr #24
 9c4:	009c0100 	addseq	r0, ip, r0, lsl #2
 9c8:	00000175 	andeq	r0, r0, r5, ror r1
 9cc:	02e90004 	rsceq	r0, r9, #4
 9d0:	01040000 	mrseq	r0, (UNDEF: 4)
 9d4:	0000001f 	andeq	r0, r0, pc, lsl r0
 9d8:	0004ec0c 	andeq	lr, r4, ip, lsl #24
 9dc:	000e2c00 	andeq	r2, lr, r0, lsl #24
 9e0:	0000b020 	andeq	fp, r0, r0, lsr #32
 9e4:	00047100 	andeq	r7, r4, r0, lsl #2
 9e8:	06010200 	streq	r0, [r1], -r0, lsl #4
 9ec:	00000258 	andeq	r0, r0, r8, asr r2
 9f0:	56080102 	strpl	r0, [r8], -r2, lsl #2
 9f4:	02000002 	andeq	r0, r0, #2
 9f8:	012e0502 			; <UNDEFINED> instruction: 0x012e0502
 9fc:	02020000 	andeq	r0, r2, #0
 a00:	0002c807 	andeq	ip, r2, r7, lsl #16
 a04:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
 a08:	000001ae 	andeq	r0, r0, lr, lsr #3
 a0c:	0000d303 	andeq	sp, r0, r3, lsl #6
 a10:	4f4f0200 	svcmi	0x004f0200
 a14:	02000000 	andeq	r0, r0, #0
 a18:	02a40704 	adceq	r0, r4, #4, 14	; 0x100000
 a1c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
 a20:	0001a905 	andeq	sl, r1, r5, lsl #18
 a24:	07080200 	streq	r0, [r8, -r0, lsl #4]
 a28:	0000029f 	muleq	r0, pc, r2	; <UNPREDICTABLE>
 a2c:	69050404 	stmdbvs	r5, {r2, sl}
 a30:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
 a34:	02a90704 	adceq	r0, r9, #4, 14	; 0x100000
 a38:	d5030000 	strle	r0, [r3, #-0]
 a3c:	03000000 	movweq	r0, #0
 a40:	00004430 	andeq	r4, r0, r0, lsr r4
 a44:	04100500 	ldreq	r0, [r0], #-1280	; 0xfffffb00
 a48:	0000b607 	andeq	fp, r0, r7, lsl #12
 a4c:	04d30600 	ldrbeq	r0, [r3], #1536	; 0x600
 a50:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
 a54:	00000072 	andeq	r0, r0, r2, ror r0
 a58:	04dc0600 	ldrbeq	r0, [ip], #1536	; 0x600
 a5c:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
 a60:	00000072 	andeq	r0, r0, r2, ror r0
 a64:	04cb0604 	strbeq	r0, [fp], #1540	; 0x604
 a68:	0a040000 	beq	100a70 <startup-0x1feff590>
 a6c:	00000072 	andeq	r0, r0, r2, ror r0
 a70:	04c10608 	strbeq	r0, [r1], #1544	; 0x608
 a74:	0b040000 	bleq	100a7c <startup-0x1feff584>
 a78:	00000072 	andeq	r0, r0, r2, ror r0
 a7c:	b903000c 	stmdblt	r3, {r2, r3}
 a80:	04000004 	streq	r0, [r0], #-4
 a84:	00007d0c 	andeq	r7, r0, ip, lsl #26
 a88:	02210700 	eoreq	r0, r1, #0, 14
 a8c:	5b010000 	blpl	40a94 <startup-0x1ffbf56c>
 a90:	20000eaa 	andcs	r0, r0, sl, lsr #29
 a94:	00000032 	andeq	r0, r0, r2, lsr r0
 a98:	00fe9c01 	rscseq	r9, lr, r1, lsl #24
 a9c:	6d080000 	stcvs	0, cr0, [r8, #-0]
 aa0:	5b010073 	blpl	40c74 <startup-0x1ffbf38c>
 aa4:	0000006b 	andeq	r0, r0, fp, rrx
 aa8:	096c9102 	stmdbeq	ip!, {r1, r8, ip, pc}^
 aac:	000004e5 	andeq	r0, r0, r5, ror #9
 ab0:	006b6201 	rsbeq	r6, fp, r1, lsl #4
 ab4:	91020000 	mrsls	r0, (UNDEF: 2)
 ab8:	00690a70 	rsbeq	r0, r9, r0, ror sl
 abc:	006b6301 	rsbeq	r6, fp, r1, lsl #6
 ac0:	91020000 	mrsls	r0, (UNDEF: 2)
 ac4:	22070074 	andcs	r0, r7, #116	; 0x74
 ac8:	01000001 	tsteq	r0, r1
 acc:	000e7c42 	andeq	r7, lr, r2, asr #24
 ad0:	00002e20 	andeq	r2, r0, r0, lsr #28
 ad4:	3b9c0100 	blcc	fe700edc <backBuffer+0xde6ffffc>
 ad8:	08000001 	stmdaeq	r0, {r0}
 adc:	01007375 	tsteq	r0, r5, ror r3
 ae0:	00006b42 	andeq	r6, r0, r2, asr #22
 ae4:	6c910200 	lfmvs	f0, 4, [r1], {0}
 ae8:	0004e509 	andeq	lr, r4, r9, lsl #10
 aec:	6b490100 	blvs	1240ef4 <startup-0x1edbf10c>
 af0:	02000000 	andeq	r0, r0, #0
 af4:	690a7091 	stmdbvs	sl, {r0, r4, r7, ip, sp, lr}
 af8:	6b4a0100 	blvs	1280f00 <startup-0x1ed7f100>
 afc:	02000000 	andeq	r0, r0, #0
 b00:	07007491 			; <UNDEFINED> instruction: 0x07007491
 b04:	000002b6 			; <UNDEFINED> instruction: 0x000002b6
 b08:	0e583201 	cdpeq	2, 5, cr3, cr8, cr1, {0}
 b0c:	00242000 	eoreq	r2, r4, r0
 b10:	9c010000 	stcls	0, cr0, [r1], {-0}
 b14:	00000167 	andeq	r0, r0, r7, ror #2
 b18:	000e5e0b 	andeq	r5, lr, fp, lsl #28
 b1c:	00001620 	andeq	r1, r0, r0, lsr #12
 b20:	00690a00 	rsbeq	r0, r9, r0, lsl #20
 b24:	00643401 	rsbeq	r3, r4, r1, lsl #8
 b28:	91020000 	mrsls	r0, (UNDEF: 2)
 b2c:	0c000074 	stceq	0, cr0, [r0], {116}	; 0x74
 b30:	000003a4 	andeq	r0, r0, r4, lsr #7
 b34:	0e2c0701 	cdpeq	7, 2, cr0, cr12, cr1, {0}
 b38:	002c2000 	eoreq	r2, ip, r0
 b3c:	9c010000 	stcls	0, cr0, [r1], {-0}
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
   c:	00171006 	andseq	r1, r7, r6
  10:	00240200 	eoreq	r0, r4, r0, lsl #4
  14:	0b3e0b0b 	bleq	f82c48 <startup-0x1f07d3b8>
  18:	00000e03 	andeq	r0, r0, r3, lsl #28
  1c:	03001603 	movweq	r1, #1539	; 0x603
  20:	3b0b3a0e 	blcc	2ce860 <startup-0x1fd317a0>
  24:	0013490b 	andseq	r4, r3, fp, lsl #18
  28:	00240400 	eoreq	r0, r4, r0, lsl #8
  2c:	0b3e0b0b 	bleq	f82c60 <startup-0x1f07d3a0>
  30:	00000803 	andeq	r0, r0, r3, lsl #16
  34:	0b011305 	bleq	44c50 <startup-0x1ffbb3b0>
  38:	3b0b3a0b 	blcc	2ce86c <startup-0x1fd31794>
  3c:	0013010b 	andseq	r0, r3, fp, lsl #2
  40:	000d0600 	andeq	r0, sp, r0, lsl #12
  44:	0b3a0e03 	bleq	e83858 <startup-0x1f17c7a8>
  48:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  4c:	00000b38 	andeq	r0, r0, r8, lsr fp
  50:	49010107 	stmdbmi	r1, {r0, r1, r2, r8}
  54:	00130113 	andseq	r0, r3, r3, lsl r1
  58:	00210800 	eoreq	r0, r1, r0, lsl #16
  5c:	052f1349 	streq	r1, [pc, #-841]!	; fffffd1b <backBuffer+0xdfffee3b>
  60:	34090000 	strcc	r0, [r9], #-0
  64:	3a0e0300 	bcc	380c6c <startup-0x1fc7f394>
  68:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
  6c:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
  70:	0a000018 	beq	d8 <startup-0x1fffff28>
  74:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
  78:	0b3a0e03 	bleq	e8388c <startup-0x1f17c774>
  7c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
  80:	06120111 			; <UNDEFINED> instruction: 0x06120111
  84:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
  88:	00130119 	andseq	r0, r3, r9, lsl r1
  8c:	00340b00 	eorseq	r0, r4, r0, lsl #22
  90:	0b3a0803 	bleq	e820a4 <startup-0x1f17df5c>
  94:	1349053b 	movtne	r0, #38203	; 0x953b
  98:	00001802 	andeq	r1, r0, r2, lsl #16
  9c:	0300340c 	movweq	r3, #1036	; 0x40c
  a0:	3b0b3a0e 	blcc	2ce8e0 <startup-0x1fd31720>
  a4:	02134905 	andseq	r4, r3, #81920	; 0x14000
  a8:	0d000018 	stceq	0, cr0, [r0, #-96]	; 0xffffffa0
  ac:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
  b0:	0b3a0e03 	bleq	e838c4 <startup-0x1f17c73c>
  b4:	0111053b 	tsteq	r1, fp, lsr r5
  b8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  bc:	01194297 			; <UNDEFINED> instruction: 0x01194297
  c0:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
  c4:	08030005 	stmdaeq	r3, {r0, r2}
  c8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  cc:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  d0:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
  d4:	3a0e0301 	bcc	380ce0 <startup-0x1fc7f320>
  d8:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
  dc:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
  e0:	96184006 	ldrls	r4, [r8], -r6
  e4:	13011942 	movwne	r1, #6466	; 0x1942
  e8:	05100000 	ldreq	r0, [r0, #-0]
  ec:	3a0e0300 	bcc	380cf4 <startup-0x1fc7f30c>
  f0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
  f4:	00180213 	andseq	r0, r8, r3, lsl r2
  f8:	012e1100 			; <UNDEFINED> instruction: 0x012e1100
  fc:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 100:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 104:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
 108:	18120000 	ldmdane	r2, {}	; <UNPREDICTABLE>
 10c:	13000000 	movwne	r0, #0
 110:	0e03012e 	adfeqsp	f0, f3, #0.5
 114:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 118:	13491927 	movtne	r1, #39207	; 0x9927
 11c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 120:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 124:	00130119 	andseq	r0, r3, r9, lsl r1
 128:	012e1400 			; <UNDEFINED> instruction: 0x012e1400
 12c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 130:	0b3b0b3a 	bleq	ec2e20 <startup-0x1f13d1e0>
 134:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
 138:	00001301 	andeq	r1, r0, r1, lsl #6
 13c:	3f012e15 	svccc	0x00012e15
 140:	3a0e0319 	bcc	380dac <startup-0x1fc7f254>
 144:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 148:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 14c:	97184006 	ldrls	r4, [r8, -r6]
 150:	13011942 	movwne	r1, #6466	; 0x1942
 154:	2e160000 	cdpcs	0, 1, cr0, cr6, cr0, {0}
 158:	03193f01 	tsteq	r9, #1, 30
 15c:	3b0b3a0e 	blcc	2ce99c <startup-0x1fd31664>
 160:	3c13490b 			; <UNDEFINED> instruction: 0x3c13490b
 164:	17000019 	smladne	r0, r9, r0, r0
 168:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 16c:	0b3a0e03 	bleq	e83980 <startup-0x1f17c680>
 170:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 174:	01111349 	tsteq	r1, r9, asr #6
 178:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 17c:	01194296 			; <UNDEFINED> instruction: 0x01194296
 180:	18000013 	stmdane	r0, {r0, r1, r4}
 184:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 188:	0b3b0b3a 	bleq	ec2e78 <startup-0x1f13d188>
 18c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 190:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
 194:	03193f01 	tsteq	r9, #1, 30
 198:	3b0b3a0e 	blcc	2ce9d8 <startup-0x1fd31628>
 19c:	1119270b 	tstne	r9, fp, lsl #14
 1a0:	40061201 	andmi	r1, r6, r1, lsl #4
 1a4:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 1a8:	00001301 	andeq	r1, r0, r1, lsl #6
 1ac:	0300051a 	movweq	r0, #1306	; 0x51a
 1b0:	3b0b3a0e 	blcc	2ce9f0 <startup-0x1fd31610>
 1b4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 1b8:	1b000018 	blne	220 <startup-0x1ffffde0>
 1bc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 1c0:	0b3a0e03 	bleq	e839d4 <startup-0x1f17c62c>
 1c4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 1c8:	06120111 			; <UNDEFINED> instruction: 0x06120111
 1cc:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 1d0:	00130119 	andseq	r0, r3, r9, lsl r1
 1d4:	00051c00 	andeq	r1, r5, r0, lsl #24
 1d8:	0b3a0803 	bleq	e821ec <startup-0x1f17de14>
 1dc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 1e0:	00001802 	andeq	r1, r0, r2, lsl #16
 1e4:	0300341d 	movweq	r3, #1053	; 0x41d
 1e8:	3b0b3a08 	blcc	2cea10 <startup-0x1fd315f0>
 1ec:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 1f0:	1e000018 	mcrne	0, 0, r0, cr0, cr8, {0}
 1f4:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 1f8:	0b3a0e03 	bleq	e83a0c <startup-0x1f17c5f4>
 1fc:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 200:	06120111 			; <UNDEFINED> instruction: 0x06120111
 204:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 208:	1f000019 	svcne	0x00000019
 20c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 210:	0b3a0e03 	bleq	e83a24 <startup-0x1f17c5dc>
 214:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 218:	01111349 	tsteq	r1, r9, asr #6
 21c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 220:	01194297 			; <UNDEFINED> instruction: 0x01194297
 224:	20000013 	andcs	r0, r0, r3, lsl r0
 228:	0b0b000f 	bleq	2c026c <startup-0x1fd3fd94>
 22c:	00001349 	andeq	r1, r0, r9, asr #6
 230:	49002121 	stmdbmi	r0, {r0, r5, r8, sp}
 234:	000b2f13 	andeq	r2, fp, r3, lsl pc
 238:	012e2200 			; <UNDEFINED> instruction: 0x012e2200
 23c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 240:	0b3b0b3a 	bleq	ec2f30 <startup-0x1f13d0d0>
 244:	01111927 	tsteq	r1, r7, lsr #18
 248:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 24c:	00194297 	mulseq	r9, r7, r2
 250:	11010000 	mrsne	r0, (UNDEF: 1)
 254:	130e2501 	movwne	r2, #58625	; 0xe501
 258:	550e030b 	strpl	r0, [lr, #-779]	; 0xfffffcf5
 25c:	10011117 	andne	r1, r1, r7, lsl r1
 260:	02000017 	andeq	r0, r0, #23
 264:	0b0b0024 	bleq	2c02fc <startup-0x1fd3fd04>
 268:	0e030b3e 	vmoveq.16	d3[0], r0
 26c:	16030000 	strne	r0, [r3], -r0
 270:	3a0e0300 	bcc	380e78 <startup-0x1fc7f188>
 274:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 278:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
 27c:	0b0b0024 	bleq	2c0314 <startup-0x1fd3fcec>
 280:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 284:	35050000 	strcc	r0, [r5, #-0]
 288:	00134900 	andseq	r4, r3, r0, lsl #18
 28c:	01130600 	tsteq	r3, r0, lsl #12
 290:	0b3a0b0b 	bleq	e82ec4 <startup-0x1f17d13c>
 294:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 298:	0d070000 	stceq	0, cr0, [r7, #-0]
 29c:	3a0e0300 	bcc	380ea4 <startup-0x1fc7f15c>
 2a0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 2a4:	000b3813 	andeq	r3, fp, r3, lsl r8
 2a8:	00340800 	eorseq	r0, r4, r0, lsl #16
 2ac:	0b3a0e03 	bleq	e83ac0 <startup-0x1f17c540>
 2b0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 2b4:	00001802 	andeq	r1, r0, r2, lsl #16
 2b8:	3f002e09 	svccc	0x00002e09
 2bc:	3a0e0319 	bcc	380f28 <startup-0x1fc7f0d8>
 2c0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 2c4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 2c8:	96184006 	ldrls	r4, [r8], -r6
 2cc:	00001942 	andeq	r1, r0, r2, asr #18
 2d0:	3f002e0a 	svccc	0x00002e0a
 2d4:	3a0e0319 	bcc	380f40 <startup-0x1fc7f0c0>
 2d8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 2dc:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 2e0:	97184006 	ldrls	r4, [r8, -r6]
 2e4:	00001942 	andeq	r1, r0, r2, asr #18
 2e8:	01110100 	tsteq	r1, r0, lsl #2
 2ec:	0b130e25 	bleq	4c3b88 <startup-0x1fb3c478>
 2f0:	01110e03 	tsteq	r1, r3, lsl #28
 2f4:	17100612 			; <UNDEFINED> instruction: 0x17100612
 2f8:	24020000 	strcs	r0, [r2], #-0
 2fc:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 300:	000e030b 	andeq	r0, lr, fp, lsl #6
 304:	00160300 	andseq	r0, r6, r0, lsl #6
 308:	0b3a0e03 	bleq	e83b1c <startup-0x1f17c4e4>
 30c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 310:	24040000 	strcs	r0, [r4], #-0
 314:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 318:	0008030b 	andeq	r0, r8, fp, lsl #6
 31c:	01130500 	tsteq	r3, r0, lsl #10
 320:	0b3a0b0b 	bleq	e82f54 <startup-0x1f17d0ac>
 324:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 328:	0d060000 	stceq	0, cr0, [r6, #-0]
 32c:	3a0e0300 	bcc	380f34 <startup-0x1fc7f0cc>
 330:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 334:	000b3813 	andeq	r3, fp, r3, lsl r8
 338:	012e0700 			; <UNDEFINED> instruction: 0x012e0700
 33c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 340:	0b3b0b3a 	bleq	ec3030 <startup-0x1f13cfd0>
 344:	01111927 	tsteq	r1, r7, lsr #18
 348:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 34c:	01194296 			; <UNDEFINED> instruction: 0x01194296
 350:	08000013 	stmdaeq	r0, {r0, r1, r4}
 354:	08030005 	stmdaeq	r3, {r0, r2}
 358:	0b3b0b3a 	bleq	ec3048 <startup-0x1f13cfb8>
 35c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 360:	34090000 	strcc	r0, [r9], #-0
 364:	3a0e0300 	bcc	380f6c <startup-0x1fc7f094>
 368:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 36c:	00180213 	andseq	r0, r8, r3, lsl r2
 370:	00340a00 	eorseq	r0, r4, r0, lsl #20
 374:	0b3a0803 	bleq	e82388 <startup-0x1f17dc78>
 378:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 37c:	00001802 	andeq	r1, r0, r2, lsl #16
 380:	11010b0b 	tstne	r1, fp, lsl #22
 384:	00061201 	andeq	r1, r6, r1, lsl #4
 388:	002e0c00 	eoreq	r0, lr, r0, lsl #24
 38c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 390:	0b3b0b3a 	bleq	ec3080 <startup-0x1f13cf80>
 394:	01111927 	tsteq	r1, r7, lsr #18
 398:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 39c:	00194297 	mulseq	r9, r7, r2
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000001c 	andeq	r0, r0, ip, lsl r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	00000bd8 	ldrdeq	r0, [r0], -r8
	...
  20:	00000024 	andeq	r0, r0, r4, lsr #32
  24:	080a0002 	stmdaeq	sl, {r1}
  28:	00040000 	andeq	r0, r4, r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	20000be8 	andcs	r0, r0, r8, ror #23
  34:	00000244 	andeq	r0, r0, r4, asr #4
  38:	20000000 	andcs	r0, r0, r0
  3c:	0000000c 	andeq	r0, r0, ip
	...
  48:	0000001c 	andeq	r0, r0, ip, lsl r0
  4c:	09c80002 	stmibeq	r8, {r1}^
  50:	00040000 	andeq	r0, r4, r0
  54:	00000000 	andeq	r0, r0, r0
  58:	20000e2c 	andcs	r0, r0, ip, lsr #28
  5c:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	00000317 	andeq	r0, r0, r7, lsl r3
   4:	00f40002 	rscseq	r0, r4, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  20:	2f737265 	svccs	0x00737265
  24:	6876656c 	ldmdavs	r6!, {r2, r3, r5, r6, r8, sl, sp, lr}^
  28:	2f6d6c6f 	svccs	0x006d6c6f
  2c:	75636f44 	strbvc	r6, [r3, #-3908]!	; 0xfffff0bc
  30:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
  34:	61622f73 	smcvs	8947	; 0x22f3
  38:	73636973 	cmnvc	r3, #1884160	; 0x1cc000
  3c:	2f6f695f 	svccs	0x006f695f
  40:	70696c66 	rsbvc	r6, r9, r6, ror #24
  44:	706f6c66 	rsbvc	r6, pc, r6, ror #24
  48:	7172695f 	cmnvc	r2, pc, asr r9
  4c:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
  50:	61657363 	cmnvs	r5, r3, ror #6
  54:	635c7070 	cmpvs	ip, #112	; 0x70
  58:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
  5c:	5c657469 	cfstrdpl	mvd7, [r5], #-420	; 0xfffffe5c
  60:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; fffffe98 <backBuffer+0xdfffefb8>
  64:	63675c73 	cmnvs	r7, #29440	; 0x7300
  68:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
  6c:	72615c6d 	rsbvc	r5, r1, #27904	; 0x6d00
  70:	6f6e2d6d 	svcvs	0x006e2d6d
  74:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
  78:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
  7c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
  80:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
  84:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
  88:	00656e69 	rsbeq	r6, r5, r9, ror #28
  8c:	635c3a63 	cmpvs	ip, #405504	; 0x63000
  90:	70616573 	rsbvc	r6, r1, r3, ror r5
  94:	6f635c70 	svcvs	0x00635c70
  98:	696c6564 	stmdbvs	ip!, {r2, r5, r6, r8, sl, sp, lr}^
  9c:	745c6574 	ldrbvc	r6, [ip], #-1396	; 0xfffffa8c
  a0:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
  a4:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
  a8:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
  ac:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
  b0:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
  b4:	61652d65 	cmnvs	r5, r5, ror #26
  b8:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
  bc:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
  c0:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
  c4:	00007379 	andeq	r7, r0, r9, ror r3
  c8:	6f697067 	svcvs	0x00697067
  cc:	0100632e 	tsteq	r0, lr, lsr #6
  d0:	645f0000 	ldrbvs	r0, [pc], #-0	; d8 <startup-0x1fffff28>
  d4:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
  d8:	745f746c 	ldrbvc	r7, [pc], #-1132	; e0 <startup-0x1fffff20>
  dc:	73657079 	cmnvc	r5, #121	; 0x79
  e0:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
  e4:	735f0000 	cmpvc	pc, #0
  e8:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
  ec:	00682e74 	rsbeq	r2, r8, r4, ror lr
  f0:	67000003 	strvs	r0, [r0, -r3]
  f4:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
  f8:	00010068 	andeq	r0, r1, r8, rrx
  fc:	05000000 	streq	r0, [r0, #-0]
 100:	00001002 	andeq	r1, r0, r2
 104:	674d1520 	strbvs	r1, [sp, -r0, lsr #10]
 108:	6786756a 	strvs	r7, [r6, sl, ror #10]
 10c:	674c6975 	smlsldxvs	r6, ip, r5, r9
 110:	69660903 	stmdbvs	r6!, {r0, r1, r8, fp}^
 114:	4b59683d 	blmi	165a210 <startup-0x1e9a5df0>
 118:	00598383 	subseq	r8, r9, r3, lsl #7
 11c:	a7020402 	strge	r0, [r2, -r2, lsl #8]
 120:	01040200 	mrseq	r0, R12_usr
 124:	03067406 	movweq	r7, #25606	; 0x6406
 128:	02005809 	andeq	r5, r0, #589824	; 0x90000
 12c:	93210104 			; <UNDEFINED> instruction: 0x93210104
 130:	90130375 	andsls	r0, r3, r5, ror r3
 134:	921e404b 	andsls	r4, lr, #75	; 0x4b
 138:	0e037577 	cfrshl64eq	mvdx3, mvdx7, r7
 13c:	20720374 	rsbscs	r0, r2, r4, ror r3
 140:	034a0e03 	movteq	r0, #44547	; 0xae03
 144:	223d2074 	eorscs	r2, sp, #116	; 0x74
 148:	223d223d 	eorscs	r2, sp, #-805306365	; 0xd0000003
 14c:	4b4d223d 	blmi	1348a48 <startup-0x1ecb75b8>
 150:	674b4d3d 	smlaldxvs	r4, fp, sp, sp
 154:	672f672f 	strvs	r6, [pc, -pc, lsr #14]!
 158:	212f672f 			; <UNDEFINED> instruction: 0x212f672f
 15c:	0e03304d 	cdpeq	0, 0, cr3, cr3, cr13, {2}
 160:	2f772f3c 	svccs	0x00772f3c
 164:	01040200 	mrseq	r0, R12_usr
 168:	84062006 	strhi	r2, [r6], #-6
 16c:	003e3d3e 	eorseq	r3, lr, lr, lsr sp
 170:	06010402 	streq	r0, [r1], -r2, lsl #8
 174:	3e840620 	cdpcc	6, 8, cr0, cr4, cr0, {1}
 178:	02003e3d 	andeq	r3, r0, #976	; 0x3d0
 17c:	20060104 	andcs	r0, r6, r4, lsl #2
 180:	3d3e8406 	cfldrscc	mvf8, [lr, #-24]!	; 0xffffffe8
 184:	0402003e 	streq	r0, [r2], #-62	; 0xffffffc2
 188:	06200601 	strteq	r0, [r0], -r1, lsl #12
 18c:	3d3d3e84 	ldccc	14, cr3, [sp, #-528]!	; 0xfffffdf0
 190:	bb596a3f 	bllt	165aa94 <startup-0x1e9a556c>
 194:	596a7759 	stmdbpl	sl!, {r0, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 198:	77591308 	ldrbvc	r1, [r9, -r8, lsl #6]
 19c:	593d3d68 	ldmdbpl	sp!, {r3, r5, r6, r8, sl, fp, ip, sp}
 1a0:	3d3d674d 	ldccc	7, cr6, [sp, #-308]!	; 0xfffffecc
 1a4:	68404d59 	stmdavs	r0, {r0, r3, r4, r6, r8, sl, fp, lr}^
 1a8:	685b3d3d 	ldmdavs	fp, {r0, r2, r3, r4, r5, r8, sl, fp, ip, sp}^
 1ac:	6840852f 	stmdavs	r0, {r0, r1, r2, r3, r5, r8, sl, pc}^
 1b0:	685b3d3d 	ldmdavs	fp, {r0, r2, r3, r4, r5, r8, sl, fp, ip, sp}^
 1b4:	3d68852f 	cfstr64cc	mvdx8, [r8, #-188]!	; 0xffffff44
 1b8:	693e2f4b 	ldmdbvs	lr!, {r0, r1, r3, r6, r8, r9, sl, fp, sp}
 1bc:	2f2f3d3e 	svccs	0x002f3d3e
 1c0:	772f3d4b 	strvc	r3, [pc, -fp, asr #26]!
 1c4:	04020059 	streq	r0, [r2], #-89	; 0xffffffa7
 1c8:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
 1cc:	763d673e 			; <UNDEFINED> instruction: 0x763d673e
 1d0:	673f26a7 	ldrvs	r2, [pc, -r7, lsr #13]!
 1d4:	01040200 	mrseq	r0, R12_usr
 1d8:	84062006 	strhi	r2, [r6], #-6
 1dc:	503e593d 	eorspl	r5, lr, sp, lsr r9
 1e0:	e5835968 	str	r5, [r3, #2408]	; 0x968
 1e4:	59687859 	stmdbpl	r8!, {r0, r3, r4, r6, fp, ip, sp, lr}^
 1e8:	6a59d783 	bvs	1675ffc <startup-0x1e98a004>
 1ec:	74100367 	ldrvc	r0, [r0], #-871	; 0xfffffc99
 1f0:	03207003 			; <UNDEFINED> instruction: 0x03207003
 1f4:	72034a10 	andvc	r4, r3, #16, 20	; 0x10000
 1f8:	3d223d20 	stccc	13, cr3, [r2, #-128]!	; 0xffffff80
 1fc:	3d3d223d 	lfmcc	f2, 4, [sp, #-244]!	; 0xffffff0c
 200:	4d223d22 	stcmi	13, cr3, [r2, #-136]!	; 0xffffff78
 204:	3d3d3d2f 	ldccc	13, cr3, [sp, #-188]!	; 0xffffff44
 208:	4b3d3d3d 	blmi	f4f704 <startup-0x1f0b08fc>
 20c:	4b4b4b4b 	blmi	12d2f40 <startup-0x1ed2d0c0>
 210:	3d3e3f3d 	ldccc	15, cr3, [lr, #-244]!	; 0xffffff0c
 214:	303d3d3d 	eorscc	r3, sp, sp, lsr sp
 218:	3d752f3d 	ldclcc	15, cr2, [r5, #-244]!	; 0xffffff0c
 21c:	2226452f 	eorcs	r4, r6, #197132288	; 0xbc00000
 220:	3d68a13d 	stfccp	f2, [r8, #-244]!	; 0xffffff0c
 224:	2f593d3d 	svccs	0x00593d3d
 228:	3d592f3d 	ldclcc	15, cr2, [r9, #-244]	; 0xffffff0c
 22c:	303d593d 	eorscc	r5, sp, sp, lsr r9
 230:	3d303d59 	ldccc	13, cr3, [r0, #-356]!	; 0xfffffe9c
 234:	675967af 	ldrbvs	r6, [r9, -pc, lsr #15]
 238:	594b914d 	stmdbpl	fp, {r0, r2, r3, r6, r8, ip, pc}^
 23c:	3d2f3d2f 	stccc	13, cr3, [pc, #-188]!	; 188 <startup-0x1ffffe78>
 240:	59303d59 	ldmdbpl	r0!, {r0, r3, r4, r6, r8, sl, fp, ip, sp}
 244:	9177303d 	cmnls	r7, sp, lsr r0
 248:	833d593d 	teqhi	sp, #999424	; 0xf4000
 24c:	593d914d 	ldmdbpl	sp!, {r0, r2, r3, r6, r8, ip, pc}
 250:	4d833d3d 	stcmi	13, cr3, [r3, #244]	; 0xf4
 254:	4b9f4b3e 	blmi	fe7d2f54 <backBuffer+0xde7d2074>
 258:	03040200 	movweq	r0, #16896	; 0x4200
 25c:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
 260:	02004903 	andeq	r4, r0, #49152	; 0xc000
 264:	58060104 	stmdapl	r6, {r2, r8}
 268:	02040200 	andeq	r0, r4, #0, 4
 26c:	02004706 	andeq	r4, r0, #1572864	; 0x180000
 270:	58060104 	stmdapl	r6, {r2, r8}
 274:	694f5106 	stmdbvs	pc, {r1, r2, r8, ip, lr}^	; <UNPREDICTABLE>
 278:	01040200 	mrseq	r0, R12_usr
 27c:	02004a06 	andeq	r4, r0, #24576	; 0x6000
 280:	004a0204 	subeq	r0, sl, r4, lsl #4
 284:	4a030402 	bmi	c1294 <startup-0x1ff3ed6c>
 288:	08754c06 	ldmdaeq	r5!, {r1, r2, sl, fp, lr}^
 28c:	4b224b14 	blmi	892ee4 <startup-0x1f76d11c>
 290:	4b224b22 	blmi	892f20 <startup-0x1f76d0e0>
 294:	4b224b22 	blmi	892f24 <startup-0x1f76d0dc>
 298:	4b224b22 	blmi	892f28 <startup-0x1f76d0d8>
 29c:	04020023 	streq	r0, [r2], #-35	; 0xffffffdd
 2a0:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
 2a4:	4c4b3d75 	mcrrmi	13, 7, r3, fp, cr5
 2a8:	d7c93e4b 	strble	r3, [r9, fp, asr #28]
 2ac:	ae3dc99f 			; <UNDEFINED> instruction: 0xae3dc99f
 2b0:	ac53039f 	mrrcge	3, 9, r0, r3, cr15
 2b4:	03202e03 			; <UNDEFINED> instruction: 0x03202e03
 2b8:	003e8212 	eorseq	r8, lr, r2, lsl r2
 2bc:	3d030402 	cfstrscc	mvf0, [r3, #-8]
 2c0:	03040200 	movweq	r0, #16896	; 0x4200
 2c4:	04020057 	streq	r0, [r2], #-87	; 0xffffffa9
 2c8:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
 2cc:	2f3e854c 	svccs	0x003e854c
 2d0:	04020059 	streq	r0, [r2], #-89	; 0xffffffa7
 2d4:	00580601 	subseq	r0, r8, r1, lsl #12
 2d8:	2e020402 	cdpcs	4, 0, cr0, cr2, cr2, {0}
 2dc:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
 2e0:	04020020 	streq	r0, [r2], #-32	; 0xffffffe0
 2e4:	592f0604 	stmdbpl	pc!, {r2, r9, sl}	; <UNPREDICTABLE>
 2e8:	020067c9 	andeq	r6, r0, #52690944	; 0x3240000
 2ec:	00590304 	subseq	r0, r9, r4, lsl #6
 2f0:	9d030402 	cfstrsls	mvf0, [r3, #-8]
 2f4:	01040200 	mrseq	r0, R12_usr
 2f8:	02009e06 	andeq	r9, r0, #6, 28	; 0x60
 2fc:	55060204 	strpl	r0, [r6, #-516]	; 0xfffffdfc
 300:	01040200 	mrseq	r0, R12_usr
 304:	02007406 	andeq	r7, r0, #100663296	; 0x6000000
 308:	56060204 	strpl	r0, [r6], -r4, lsl #4
 30c:	01040200 	mrseq	r0, R12_usr
 310:	03067406 	movweq	r7, #25606	; 0x6406
 314:	0602580a 	streq	r5, [r2], -sl, lsl #16
 318:	52010100 	andpl	r0, r1, #0, 2
 31c:	02000001 	andeq	r0, r0, #1
 320:	0000f700 	andeq	pc, r0, r0, lsl #14
 324:	fb010200 	blx	40b2e <startup-0x1ffbf4d2>
 328:	01000d0e 	tsteq	r0, lr, lsl #26
 32c:	00010101 	andeq	r0, r1, r1, lsl #2
 330:	00010000 	andeq	r0, r1, r0
 334:	3a430100 	bcc	10c073c <startup-0x1ef3f8c4>
 338:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 33c:	6c2f7372 	stcvs	3, cr7, [pc], #-456	; 17c <startup-0x1ffffe84>
 340:	6f687665 	svcvs	0x00687665
 344:	442f6d6c 	strtmi	r6, [pc], #-3436	; 34c <startup-0x1ffffcb4>
 348:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
 34c:	73746e65 	cmnvc	r4, #1616	; 0x650
 350:	7361622f 	cmnvc	r1, #-268435454	; 0xf0000002
 354:	5f736369 	svcpl	0x00736369
 358:	662f6f69 	strtvs	r6, [pc], -r9, ror #30
 35c:	6670696c 	ldrbtvs	r6, [r0], -ip, ror #18
 360:	5f706f6c 	svcpl	0x00706f6c
 364:	00717269 	rsbseq	r7, r1, r9, ror #4
 368:	635c3a63 	cmpvs	ip, #405504	; 0x63000
 36c:	70616573 	rsbvc	r6, r1, r3, ror r5
 370:	6f635c70 	svcvs	0x00635c70
 374:	696c6564 	stmdbvs	ip!, {r2, r5, r6, r8, sl, sp, lr}^
 378:	745c6574 	ldrbvc	r6, [ip], #-1396	; 0xfffffa8c
 37c:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
 380:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
 384:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
 388:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
 38c:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
 390:	61652d65 	cmnvs	r5, r5, ror #26
 394:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
 398:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
 39c:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
 3a0:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
 3a4:	6300656e 	movwvs	r6, #1390	; 0x56e
 3a8:	73635c3a 	cmnvc	r3, #14848	; 0x3a00
 3ac:	70706165 	rsbsvc	r6, r0, r5, ror #2
 3b0:	646f635c 	strbtvs	r6, [pc], #-860	; 3b8 <startup-0x1ffffc48>
 3b4:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
 3b8:	6f745c65 	svcvs	0x00745c65
 3bc:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
 3c0:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
 3c4:	5c6d7261 	sfmpl	f7, 2, [sp], #-388	; 0xfffffe7c
 3c8:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 3cc:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
 3d0:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
 3d4:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
 3d8:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
 3dc:	79735c65 	ldmdbvc	r3!, {r0, r2, r5, r6, sl, fp, ip, lr}^
 3e0:	73000073 	movwvc	r0, #115	; 0x73
 3e4:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 3e8:	632e7075 			; <UNDEFINED> instruction: 0x632e7075
 3ec:	00000100 	andeq	r0, r0, r0, lsl #2
 3f0:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
 3f4:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
 3f8:	7079745f 	rsbsvc	r7, r9, pc, asr r4
 3fc:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
 400:	00000200 	andeq	r0, r0, r0, lsl #4
 404:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
 408:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
 40c:	00030068 	andeq	r0, r3, r8, rrx
 410:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
 414:	00682e6f 	rsbeq	r2, r8, pc, ror #28
 418:	00000001 	andeq	r0, r0, r1
 41c:	00020500 	andeq	r0, r2, r0, lsl #10
 420:	18200000 	stmdane	r0!, {}	; <UNPREDICTABLE>
 424:	03025e13 	movweq	r5, #11795	; 0x2e13
 428:	00010100 	andeq	r0, r1, r0, lsl #2
 42c:	0be80205 	bleq	ffa00c48 <backBuffer+0xdf9ffd68>
 430:	cd032000 	stcgt	0, cr2, [r3, #-0]
 434:	592f0100 	stmdbpl	pc!, {r8}	; <UNPREDICTABLE>
 438:	91838367 	orrls	r8, r3, r7, ror #6
 43c:	83673d2f 	cmnhi	r7, #3008	; 0xbc0
 440:	672f9183 	strvs	r9, [pc, -r3, lsl #3]!
 444:	41598383 	cmpmi	r9, r3, lsl #7
 448:	2fa13e1e 	svccs	0x00a13e1e
 44c:	3d3e753d 	cfldr32cc	mvfx7, [lr, #-244]!	; 0xffffff0c
 450:	0b03684e 	bleq	da590 <startup-0x1ff25a70>
 454:	67687574 			; <UNDEFINED> instruction: 0x67687574
 458:	3d3d6867 	ldccc	8, cr6, [sp, #-412]!	; 0xfffffe64
 45c:	7967673e 	stmdbvc	r7!, {r1, r2, r3, r4, r5, r8, r9, sl, sp, lr}^
 460:	02676775 	rsbeq	r6, r7, #30670848	; 0x1d40000
 464:	002f172b 	eoreq	r1, pc, fp, lsr #14
 468:	30010402 	andcc	r0, r1, r2, lsl #8
 46c:	01000a02 	tsteq	r0, r2, lsl #20
 470:	00015a01 	andeq	r5, r1, r1, lsl #20
 474:	fe000200 	cdp2	2, 0, cr0, cr0, cr0, {0}
 478:	02000000 	andeq	r0, r0, #0
 47c:	0d0efb01 	vstreq	d15, [lr, #-4]
 480:	01010100 	mrseq	r0, (UNDEF: 17)
 484:	00000001 	andeq	r0, r0, r1
 488:	01000001 	tsteq	r0, r1
 48c:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffffa51 <backBuffer+0xdfffeb71>
 490:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 494:	76656c2f 	strbtvc	r6, [r5], -pc, lsr #24
 498:	6d6c6f68 	stclvs	15, cr6, [ip, #-416]!	; 0xfffffe60
 49c:	636f442f 	cmnvs	pc, #788529152	; 0x2f000000
 4a0:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 4a4:	622f7374 	eorvs	r7, pc, #116, 6	; 0xd0000001
 4a8:	63697361 	cmnvs	r9, #-2080374783	; 0x84000001
 4ac:	6f695f73 	svcvs	0x00695f73
 4b0:	696c662f 	stmdbvs	ip!, {r0, r1, r2, r3, r5, r9, sl, sp, lr}^
 4b4:	6f6c6670 	svcvs	0x006c6670
 4b8:	72695f70 	rsbvc	r5, r9, #112, 30	; 0x1c0
 4bc:	3a630071 	bcc	18c0688 <startup-0x1e73f978>
 4c0:	6573635c 	ldrbvs	r6, [r3, #-860]!	; 0xfffffca4
 4c4:	5c707061 	ldclpl	0, cr7, [r0], #-388	; 0xfffffe7c
 4c8:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
 4cc:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
 4d0:	6f6f745c 	svcvs	0x006f745c
 4d4:	675c736c 	ldrbvs	r7, [ip, -ip, ror #6]
 4d8:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
 4dc:	615c6d72 	cmpvs	ip, r2, ror sp
 4e0:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
 4e4:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
 4e8:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
 4ec:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
 4f0:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
 4f4:	63616d5c 	cmnvs	r1, #92, 26	; 0x1700
 4f8:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
 4fc:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
 500:	61657363 	cmnvs	r5, r3, ror #6
 504:	635c7070 	cmpvs	ip, #112	; 0x70
 508:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
 50c:	5c657469 	cfstrdpl	mvd7, [r5], #-420	; 0xfffffe5c
 510:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 348 <startup-0x1ffffcb8>
 514:	63675c73 	cmnvs	r7, #29440	; 0x7300
 518:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
 51c:	72615c6d 	rsbvc	r5, r1, #27904	; 0x6d00
 520:	6f6e2d6d 	svcvs	0x006e2d6d
 524:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
 528:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
 52c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 530:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
 534:	00737973 	rsbseq	r7, r3, r3, ror r9
 538:	73797300 	cmnvc	r9, #0, 6
 53c:	6c65645f 	cfstrdvs	mvd6, [r5], #-380	; 0xfffffe84
 540:	632e7961 			; <UNDEFINED> instruction: 0x632e7961
 544:	00000100 	andeq	r0, r0, r0, lsl #2
 548:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
 54c:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
 550:	7079745f 	rsbsvc	r7, r9, pc, asr r4
 554:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
 558:	00000200 	andeq	r0, r0, r0, lsl #4
 55c:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
 560:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
 564:	00030068 	andeq	r0, r3, r8, rrx
 568:	73797300 	cmnvc	r9, #0, 6
 56c:	6c65645f 	cfstrdvs	mvd6, [r5], #-380	; 0xfffffe84
 570:	682e7961 	stmdavs	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
 574:	00000100 	andeq	r0, r0, r0, lsl #2
 578:	02050000 	andeq	r0, r5, #0
 57c:	20000e2c 	andcs	r0, r0, ip, lsr #28
 580:	42443319 	submi	r3, r4, #1677721600	; 0x64000000
 584:	660d0344 	strvs	r0, [sp], -r4, asr #6
 588:	02003d5b 	andeq	r3, r0, #5824	; 0x16c0
 58c:	003d0304 	eorseq	r0, sp, r4, lsl #6
 590:	2d030402 	cfstrscs	mvf0, [r3, #-8]
 594:	01040200 	mrseq	r0, R12_usr
 598:	3e063c06 	cdpcc	12, 0, cr3, cr6, cr6, {0}
 59c:	504a0d03 	subpl	r0, sl, r3, lsl #26
 5a0:	0402003e 	streq	r0, [r2], #-62	; 0xffffffc2
 5a4:	02003e03 	andeq	r3, r0, #3, 28	; 0x30
 5a8:	002c0304 	eoreq	r0, ip, r4, lsl #6
 5ac:	06010402 	streq	r0, [r1], -r2, lsl #8
 5b0:	034e063c 	movteq	r0, #58940	; 0xe63c
 5b4:	5a504a0d 	bpl	1412df0 <startup-0x1ebed210>
 5b8:	03040200 	movweq	r0, #16896	; 0x4200
 5bc:	0402003e 	streq	r0, [r2], #-62	; 0xffffffc2
 5c0:	02002c03 	andeq	r2, r0, #768	; 0x300
 5c4:	3c060104 	stfccs	f0, [r6], {4}
 5c8:	04024e06 	streq	r4, [r2], #-3590	; 0xfffff1fa
 5cc:	Address 0x000005cc is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	4c726469 	cfldrdmi	mvd6, [r2], #-420	; 0xfffffe5c
   4:	7000776f 	andvc	r7, r0, pc, ror #14
   8:	6c657869 	stclvs	8, cr7, [r5], #-420	; 0xfffffe5c
   c:	72646f00 	rsbvc	r6, r4, #0, 30
  10:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
  14:	64657672 	strbtvs	r7, [r5], #-1650	; 0xfffff98e
  18:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
  1c:	47007865 	strmi	r7, [r0, -r5, ror #16]
  20:	4320554e 			; <UNDEFINED> instruction: 0x4320554e
  24:	36203939 			; <UNDEFINED> instruction: 0x36203939
  28:	312e332e 			; <UNDEFINED> instruction: 0x312e332e
  2c:	31303220 	teqcc	r0, r0, lsr #4
  30:	31323037 	teqcc	r2, r7, lsr r0
  34:	72282035 	eorvc	r2, r8, #53	; 0x35
  38:	61656c65 	cmnvs	r5, r5, ror #24
  3c:	20296573 	eorcs	r6, r9, r3, ror r5
  40:	4d52415b 	ldfmie	f4, [r2, #-364]	; 0xfffffe94
  44:	626d652f 	rsbvs	r6, sp, #197132288	; 0xbc00000
  48:	65646465 	strbvs	r6, [r4, #-1125]!	; 0xfffffb9b
  4c:	2d362d64 	ldccs	13, cr2, [r6, #-400]!	; 0xfffffe70
  50:	6e617262 	cdpvs	2, 6, cr7, cr1, cr2, {3}
  54:	72206863 	eorvc	r6, r0, #6488064	; 0x630000
  58:	73697665 	cmnvc	r9, #105906176	; 0x6500000
  5c:	206e6f69 	rsbcs	r6, lr, r9, ror #30
  60:	35353432 	ldrcc	r3, [r5, #-1074]!	; 0xfffffbce
  64:	205d3231 	subscs	r3, sp, r1, lsr r2
  68:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
  6c:	20626d75 	rsbcs	r6, r2, r5, ror sp
  70:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
  74:	613d6863 	teqvs	sp, r3, ror #16
  78:	36766d72 			; <UNDEFINED> instruction: 0x36766d72
  7c:	2d206d2d 	stccs	13, cr6, [r0, #-180]!	; 0xffffff4c
  80:	6f6c666d 	svcvs	0x006c666d
  84:	612d7461 			; <UNDEFINED> instruction: 0x612d7461
  88:	733d6962 	teqvc	sp, #1605632	; 0x188000
  8c:	2074666f 	rsbscs	r6, r4, pc, ror #12
  90:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
  94:	20626d75 	rsbcs	r6, r2, r5, ror sp
  98:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
  9c:	613d6863 	teqvs	sp, r3, ror #16
  a0:	36766d72 			; <UNDEFINED> instruction: 0x36766d72
  a4:	2d206d2d 	stccs	13, cr6, [r0, #-180]!	; 0xffffff4c
  a8:	4f2d2067 	svcmi	0x002d2067
  ac:	732d2030 			; <UNDEFINED> instruction: 0x732d2030
  b0:	633d6474 	teqvs	sp, #116, 8	; 0x74000000
  b4:	73003939 	movwvc	r3, #2361	; 0x939
  b8:	70757465 	rsbsvc	r7, r5, r5, ror #8
  bc:	726f665f 	rsbvc	r6, pc, #99614720	; 0x5f00000
  c0:	6765735f 			; <UNDEFINED> instruction: 0x6765735f
  c4:	7369645f 	cmnvc	r9, #1593835520	; 0x5f000000
  c8:	69730070 	ldmdbvs	r3!, {r4, r5, r6}^
  cc:	7974657a 	ldmdbvc	r4!, {r1, r3, r4, r5, r6, r8, sl, sp, lr}^
  d0:	5f006570 	svcpl	0x00006570
  d4:	6e69755f 	mcrvs	5, 3, r7, cr9, cr15, {2}
  d8:	5f323374 	svcpl	0x00323374
  dc:	5f5f0074 	svcpl	0x005f0074
  e0:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
  e4:	745f3631 	ldrbvc	r3, [pc], #-1585	; ec <startup-0x1fffff14>
  e8:	2f3a4300 	svccs	0x003a4300
  ec:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
  f0:	656c2f73 	strbvs	r2, [ip, #-3955]!	; 0xfffff08d
  f4:	6c6f6876 	stclvs	8, cr6, [pc], #-472	; ffffff24 <backBuffer+0xdffff044>
  f8:	6f442f6d 	svcvs	0x00442f6d
  fc:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
 100:	2f73746e 	svccs	0x0073746e
 104:	69736162 	ldmdbvs	r3!, {r1, r5, r6, r8, sp, lr}^
 108:	695f7363 	ldmdbvs	pc, {r0, r1, r5, r6, r8, r9, ip, sp, lr}^	; <UNPREDICTABLE>
 10c:	6c662f6f 	stclvs	15, cr2, [r6], #-444	; 0xfffffe44
 110:	6c667069 	stclvs	0, cr7, [r6], #-420	; 0xfffffe5c
 114:	695f706f 	ldmdbvs	pc, {r0, r1, r2, r3, r5, r6, ip, sp, lr}^	; <UNPREDICTABLE>
 118:	672f7172 			; <UNDEFINED> instruction: 0x672f7172
 11c:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
 120:	65640063 	strbvs	r0, [r4, #-99]!	; 0xffffff9d
 124:	5f79616c 	svcpl	0x0079616c
 128:	726b696d 	rsbvc	r6, fp, #1785856	; 0x1b4000
 12c:	6873006f 	ldmdavs	r3!, {r0, r1, r2, r3, r5, r6}^
 130:	2074726f 	rsbscs	r7, r4, pc, ror #4
 134:	00746e69 	rsbseq	r6, r4, r9, ror #28
 138:	70617267 	rsbvc	r7, r1, r7, ror #4
 13c:	5f636968 	svcpl	0x00636968
 140:	61656c63 	cmnvs	r5, r3, ror #24
 144:	63735f72 	cmnvs	r3, #456	; 0x1c8
 148:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
 14c:	79746f00 	ldmdbvc	r4!, {r8, r9, sl, fp, sp, lr}^
 150:	00726570 	rsbseq	r6, r2, r0, ror r5
 154:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 158:	6c61765f 	stclvs	6, cr7, [r1], #-380	; 0xfffffe84
 15c:	61006575 	tstvs	r0, r5, ror r5
 160:	76697463 	strbtvc	r7, [r9], -r3, ror #8
 164:	5f657461 	svcpl	0x00657461
 168:	00776f72 	rsbseq	r6, r7, r2, ror pc
 16c:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 170:	6f675f69 	svcvs	0x00675f69
 174:	79786f74 	ldmdbvc	r8!, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 178:	61726700 	cmnvs	r2, r0, lsl #14
 17c:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 180:	6165725f 	cmnvs	r5, pc, asr r2
 184:	73610064 	cmnvc	r1, #100	; 0x64
 188:	5f696963 	svcpl	0x00696963
 18c:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
 190:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 194:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
 198:	63736100 	cmnvs	r3, #0, 2
 19c:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
 1a0:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 1a4:	646d635f 	strbtvs	r6, [sp], #-863	; 0xfffffca1
 1a8:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
 1ac:	6f6c2067 	svcvs	0x006c2067
 1b0:	6920676e 	stmdbvs	r0!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
 1b4:	6f00746e 	svcvs	0x0000746e
 1b8:	73655274 	cmnvc	r5, #116, 4	; 0x40000007
 1bc:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0xfffffd9b
 1c0:	736f0064 	cmnvc	pc, #100	; 0x64
 1c4:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
 1c8:	65640072 	strbvs	r0, [r4, #-114]!	; 0xffffff8e
 1cc:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
 1d0:	65746176 	ldrbvs	r6, [r4, #-374]!	; 0xfffffe8a
 1d4:	776f725f 			; <UNDEFINED> instruction: 0x776f725f
 1d8:	64610073 	strbtvs	r0, [r1], #-115	; 0xffffff8d
 1dc:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
 1e0:	73610073 	cmnvc	r1, #115	; 0x73
 1e4:	5f696963 	svcpl	0x00696963
 1e8:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 1ec:	61726700 	cmnvs	r2, r0, lsl #14
 1f0:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 1f4:	6165725f 	cmnvs	r5, pc, asr r2
 1f8:	61645f64 	cmnvs	r4, r4, ror #30
 1fc:	6b006174 	blvs	187d4 <startup-0x1ffe782c>
 200:	00627965 	rsbeq	r7, r2, r5, ror #18
 204:	69755f5f 	ldmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
 208:	5f38746e 	svcpl	0x0038746e
 20c:	72670074 	rsbvc	r0, r7, #116	; 0x74
 210:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 214:	72775f63 	rsbsvc	r5, r7, #396	; 0x18c
 218:	5f657469 	svcpl	0x00657469
 21c:	61746164 	cmnvs	r4, r4, ror #2
 220:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 224:	6d5f7961 	vldrvs.16	s15, [pc, #-194]	; 16a <startup-0x1ffffe96>	; <UNPREDICTABLE>
 228:	696c6c69 	stmdbvs	ip!, {r0, r3, r5, r6, sl, fp, sp, lr}^
 22c:	61726700 	cmnvs	r2, r0, lsl #14
 230:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 234:	6172645f 	cmnvs	r2, pc, asr r4
 238:	63735f77 	cmnvs	r3, #476	; 0x1dc
 23c:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
 240:	63736100 	cmnvs	r3, #0, 2
 244:	635f6969 	cmpvs	pc, #1720320	; 0x1a4000
 248:	5f6c7274 	svcpl	0x006c7274
 24c:	5f746962 	svcpl	0x00746962
 250:	61656c63 	cmnvs	r5, r3, ror #24
 254:	6e750072 	mrcvs	0, 3, r0, cr5, cr2, {3}
 258:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
 25c:	63206465 			; <UNDEFINED> instruction: 0x63206465
 260:	00726168 	rsbseq	r6, r2, r8, ror #2
 264:	70617267 	rsbvc	r7, r1, r7, ror #4
 268:	5f636968 	svcpl	0x00636968
 26c:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
 270:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 274:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
 278:	67007261 	strvs	r7, [r0, -r1, ror #4]
 27c:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 280:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 284:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 288:	6d6f635f 	stclvs	3, cr6, [pc, #-380]!	; 114 <startup-0x1ffffeec>
 28c:	646e616d 	strbtvs	r6, [lr], #-365	; 0xfffffe93
 290:	61726700 	cmnvs	r2, r0, lsl #14
 294:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 298:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 29c:	6c006574 	cfstr32vs	mvfx6, [r0], {116}	; 0x74
 2a0:	20676e6f 	rsbcs	r6, r7, pc, ror #28
 2a4:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
 2a8:	736e7520 	cmnvc	lr, #32, 10	; 0x8000000
 2ac:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
 2b0:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
 2b4:	65640074 	strbvs	r0, [r4, #-116]!	; 0xffffff8c
 2b8:	5f79616c 	svcpl	0x0079616c
 2bc:	6e303035 	mrcvs	0, 1, r3, cr0, cr5, {1}
 2c0:	675f0073 			; <UNDEFINED> instruction: 0x675f0073
 2c4:	006f6970 	rsbeq	r6, pc, r0, ror r9	; <UNPREDICTABLE>
 2c8:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
 2cc:	6e752074 	mrcvs	0, 3, r2, cr5, cr4, {3}
 2d0:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
 2d4:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
 2d8:	4700746e 	strmi	r7, [r0, -lr, ror #8]
 2dc:	004f4950 	subeq	r4, pc, r0, asr r9	; <UNPREDICTABLE>
 2e0:	52726469 	rsbspl	r6, r2, #1761607680	; 0x69000000
 2e4:	72657365 	rsbvc	r7, r5, #-1811939327	; 0x94000001
 2e8:	00646576 	rsbeq	r6, r4, r6, ror r5
 2ec:	7379656b 	cmnvc	r9, #448790528	; 0x1ac00000
 2f0:	61726700 	cmnvs	r2, r0, lsl #14
 2f4:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 2f8:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
 2fc:	69625f6c 	stmdbvs	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 300:	65735f74 	ldrbvs	r5, [r3, #-3956]!	; 0xfffff08c
 304:	73610074 	cmnvc	r1, #116	; 0x74
 308:	5f696963 	svcpl	0x00696963
 30c:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 310:	68635f65 	stmdavs	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
 314:	69007261 	stmdbvs	r0, {r0, r5, r6, r9, ip, sp, lr}
 318:	69487264 	stmdbvs	r8, {r2, r5, r6, r9, ip, sp, lr}^
 31c:	61006867 	tstvs	r0, r7, ror #16
 320:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 324:	6165725f 	cmnvs	r5, pc, asr r2
 328:	6f635f64 	svcvs	0x00635f64
 32c:	6f72746e 	svcvs	0x0072746e
 330:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
 334:	63736100 	cmnvs	r3, #0, 2
 338:	725f6969 	subsvc	r6, pc, #1720320	; 0x1a4000
 33c:	5f646165 	svcpl	0x00646165
 340:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
 344:	73007375 	movwvc	r7, #885	; 0x375
 348:	70757465 	rsbsvc	r7, r5, r5, ror #8
 34c:	726f665f 	rsbvc	r6, pc, #99614720	; 0x5f00000
 350:	79656b5f 	stmdbvc	r5!, {r0, r1, r2, r3, r4, r6, r8, r9, fp, sp, lr}^
 354:	00646170 	rsbeq	r6, r4, r0, ror r1
 358:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 35c:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
 360:	5f657469 	svcpl	0x00657469
 364:	61746164 	cmnvs	r4, r4, ror #2
 368:	73657200 	cmnvc	r5, #0, 4
 36c:	00746c75 	rsbseq	r6, r4, r5, ror ip
 370:	70617267 	rsbvc	r7, r1, r7, ror #4
 374:	5f636968 	svcpl	0x00636968
 378:	74696177 	strbtvc	r6, [r9], #-375	; 0xfffffe89
 37c:	6165725f 	cmnvs	r5, pc, asr r2
 380:	72007964 	andvc	r7, r0, #100, 18	; 0x190000
 384:	5f646165 	svcpl	0x00646165
 388:	006c6f63 	rsbeq	r6, ip, r3, ror #30
 38c:	75746573 	ldrbvc	r6, [r4, #-1395]!	; 0xfffffa8d
 390:	6f665f70 	svcvs	0x00665f70
 394:	73615f72 	cmnvc	r1, #456	; 0x1c8
 398:	5f696963 	svcpl	0x00696963
 39c:	70736964 	rsbsvc	r6, r3, r4, ror #18
 3a0:	0079616c 	rsbseq	r6, r9, ip, ror #2
 3a4:	616c6564 	cmnvs	ip, r4, ror #10
 3a8:	35325f79 	ldrcc	r5, [r2, #-3961]!	; 0xfffff087
 3ac:	00736e30 	rsbseq	r6, r3, r0, lsr lr
 3b0:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0xfffff69e
 3b4:	73616d00 	cmnvc	r1, #0, 26
 3b8:	6573006b 	ldrbvs	r0, [r3, #-107]!	; 0xffffff95
 3bc:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
 3c0:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
 3c4:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 1fc <startup-0x1ffffe04>
 3c8:	0072656c 	rsbseq	r6, r2, ip, ror #10
 3cc:	64707570 	ldrbtvs	r7, [r0], #-1392	; 0xfffffa90
 3d0:	72670072 	rsbvc	r0, r7, #114	; 0x72
 3d4:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 3d8:	6e695f63 	cdpvs	15, 6, cr5, cr9, cr3, {3}
 3dc:	61697469 	cmnvs	r9, r9, ror #8
 3e0:	657a696c 	ldrbvs	r6, [sl, #-2412]!	; 0xfffff694
 3e4:	63736100 	cmnvs	r3, #0, 2
 3e8:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
 3ec:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 3f0:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
 3f4:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 22c <startup-0x1ffffdd4>
 3f8:	0072656c 	rsbseq	r6, r2, ip, ror #10
 3fc:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xfffff093
 400:	73610072 	cmnvc	r1, #114	; 0x72
 404:	5f696963 	svcpl	0x00696963
 408:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 40c:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
 410:	756f0061 	strbvc	r0, [pc, #-97]!	; 3b7 <startup-0x1ffffc49>
 414:	65733774 	ldrbvs	r3, [r3, #-1908]!	; 0xfffff88c
 418:	646f0067 	strbtvs	r0, [pc], #-103	; 420 <startup-0x1ffffbe0>
 41c:	67694872 			; <UNDEFINED> instruction: 0x67694872
 420:	646f0068 	strbtvs	r0, [pc], #-104	; 428 <startup-0x1ffffbd8>
 424:	776f4c72 			; <UNDEFINED> instruction: 0x776f4c72
 428:	656c6300 	strbvs	r6, [ip, #-768]!	; 0xfffffd00
 42c:	625f7261 	subsvs	r7, pc, #268435462	; 0x10000006
 430:	426b6361 	rsbmi	r6, fp, #-2080374783	; 0x84000001
 434:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
 438:	6f630072 	svcvs	0x00630072
 43c:	00746e75 	rsbseq	r6, r4, r5, ror lr
 440:	30717269 	rsbscc	r7, r1, r9, ror #4
 444:	6e61685f 	mcrvs	8, 3, r6, cr1, cr15, {2}
 448:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
 44c:	2f3a4300 	svccs	0x003a4300
 450:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 454:	656c2f73 	strbvs	r2, [ip, #-3955]!	; 0xfffff08d
 458:	6c6f6876 	stclvs	8, cr6, [pc], #-472	; 288 <startup-0x1ffffd78>
 45c:	6f442f6d 	svcvs	0x00442f6d
 460:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
 464:	2f73746e 	svccs	0x0073746e
 468:	69736162 	ldmdbvs	r3!, {r1, r5, r6, r8, sp, lr}^
 46c:	695f7363 	ldmdbvs	pc, {r0, r1, r5, r6, r8, r9, ip, sp, lr}^	; <UNPREDICTABLE>
 470:	6c662f6f 	stclvs	15, cr2, [r6], #-444	; 0xfffffe44
 474:	6c667069 	stclvs	0, cr7, [r6], #-420	; 0xfffffe5c
 478:	695f706f 	ldmdbvs	pc, {r0, r1, r2, r3, r5, r6, ip, sp, lr}^	; <UNPREDICTABLE>
 47c:	732f7172 			; <UNDEFINED> instruction: 0x732f7172
 480:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 484:	632e7075 			; <UNDEFINED> instruction: 0x632e7075
 488:	70706100 	rsbsvc	r6, r0, r0, lsl #2
 48c:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
 490:	72690074 	rsbvc	r0, r9, #116	; 0x74
 494:	685f3171 	ldmdavs	pc, {r0, r4, r5, r6, r8, ip, sp}^	; <UNPREDICTABLE>
 498:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
 49c:	6d007265 	sfmvs	f7, 4, [r0, #-404]	; 0xfffffe6c
 4a0:	006e6961 	rsbeq	r6, lr, r1, ror #18
 4a4:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 4a8:	00707574 	rsbseq	r7, r0, r4, ror r5
 4ac:	32717269 	rsbscc	r7, r1, #-1879048186	; 0x90000006
 4b0:	6e61685f 	mcrvs	8, 3, r6, cr1, cr15, {2}
 4b4:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
 4b8:	73795300 	cmnvc	r9, #0, 6
 4bc:	6b636954 	blvs	18daa14 <startup-0x1e7255ec>
 4c0:	4b545300 	blmi	15150c8 <startup-0x1eaeaf38>
 4c4:	4c41435f 	mcrrmi	3, 5, r4, r1, cr15
 4c8:	53004249 	movwpl	r4, #585	; 0x249
 4cc:	565f4b54 			; <UNDEFINED> instruction: 0x565f4b54
 4d0:	53004c41 	movwpl	r4, #3137	; 0xc41
 4d4:	435f4b54 	cmpmi	pc, #84, 22	; 0x15000
 4d8:	004c5254 	subeq	r5, ip, r4, asr r2
 4dc:	5f4b5453 	svcpl	0x004b5453
 4e0:	44414f4c 	strbmi	r4, [r1], #-3916	; 0xfffff0b4
 4e4:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 4e8:	00737961 	rsbseq	r7, r3, r1, ror #18
 4ec:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffffab1 <backBuffer+0xdfffebd1>
 4f0:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 4f4:	76656c2f 	strbtvc	r6, [r5], -pc, lsr #24
 4f8:	6d6c6f68 	stclvs	15, cr6, [ip, #-416]!	; 0xfffffe60
 4fc:	636f442f 	cmnvs	pc, #788529152	; 0x2f000000
 500:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 504:	622f7374 	eorvs	r7, pc, #116, 6	; 0xd0000001
 508:	63697361 	cmnvs	r9, #-2080374783	; 0x84000001
 50c:	6f695f73 	svcvs	0x00695f73
 510:	696c662f 	stmdbvs	ip!, {r0, r1, r2, r3, r5, r9, sl, sp, lr}^
 514:	6f6c6670 	svcvs	0x006c6670
 518:	72695f70 	rsbvc	r5, r9, #112, 30	; 0x1c0
 51c:	79732f71 	ldmdbvc	r3!, {r0, r4, r5, r6, r8, r9, sl, fp, sp}^
 520:	65645f73 	strbvs	r5, [r4, #-3955]!	; 0xfffff08d
 524:	2e79616c 	rpwcsez	f6, f1, #4.0
 528:	Address 0x00000528 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	204d5241 	subcs	r5, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d36 	eorscc	r2, r2, r6, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	70752d31 	rsbsvc	r2, r5, r1, lsr sp
  38:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
  3c:	2e362029 	cdpcs	0, 3, cr2, cr6, cr9, {1}
  40:	20312e33 	eorscs	r2, r1, r3, lsr lr
  44:	37313032 			; <UNDEFINED> instruction: 0x37313032
  48:	35313230 	ldrcc	r3, [r1, #-560]!	; 0xfffffdd0
  4c:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
  50:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
  54:	5b202965 	blpl	80a5f0 <startup-0x1f7f5a10>
  58:	2f4d5241 	svccs	0x004d5241
  5c:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
  60:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  64:	622d362d 	eorvs	r3, sp, #47185920	; 0x2d00000
  68:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
  6c:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
  70:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
  74:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
  78:	31353534 	teqcc	r5, r4, lsr r5
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4d2d3605 	stcmi	6, cr3, [sp, #-20]!	; 0xffffffec
  14:	070b0600 	streq	r0, [fp, -r0, lsl #12]
  18:	1201094d 	andne	r0, r1, #1261568	; 0x134000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1a011901 	bne	46430 <startup-0x1ffb9bd0>
  28:	Address 0x00000028 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000001c 	andeq	r0, r0, ip, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	20000010 	andcs	r0, r0, r0, lsl r0
  1c:	00000064 	andeq	r0, r0, r4, rrx
  20:	40080e41 	andmi	r0, r8, r1, asr #28
  24:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  28:	100e4101 	andne	r4, lr, r1, lsl #2
  2c:	00070d41 	andeq	r0, r7, r1, asr #26
  30:	0000001c 	andeq	r0, r0, ip, lsl r0
  34:	00000000 	andeq	r0, r0, r0
  38:	20000074 	andcs	r0, r0, r4, ror r0
  3c:	0000002c 	andeq	r0, r0, ip, lsr #32
  40:	40080e41 	andmi	r0, r8, r1, asr #28
  44:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  48:	100e4101 	andne	r4, lr, r1, lsl #2
  4c:	00070d41 	andeq	r0, r7, r1, asr #26
  50:	00000020 	andeq	r0, r0, r0, lsr #32
  54:	00000000 	andeq	r0, r0, r0
  58:	200000a0 	andcs	r0, r0, r0, lsr #1
  5c:	00000090 	muleq	r0, r0, r0
  60:	400c0e41 	andmi	r0, ip, r1, asr #28
  64:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
  68:	018e4002 	orreq	r4, lr, r2
  6c:	41280e41 			; <UNDEFINED> instruction: 0x41280e41
  70:	0000070d 	andeq	r0, r0, sp, lsl #14
  74:	00000020 	andeq	r0, r0, r0, lsr #32
  78:	00000000 	andeq	r0, r0, r0
  7c:	20000130 	andcs	r0, r0, r0, lsr r1
  80:	00000050 	andeq	r0, r0, r0, asr r0
  84:	400c0e41 	andmi	r0, ip, r1, asr #28
  88:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
  8c:	018e4002 	orreq	r4, lr, r2
  90:	41380e41 	teqmi	r8, r1, asr #28
  94:	0000070d 	andeq	r0, r0, sp, lsl #14
  98:	0000001c 	andeq	r0, r0, ip, lsl r0
  9c:	00000000 	andeq	r0, r0, r0
  a0:	20000180 	andcs	r0, r0, r0, lsl #3
  a4:	00000050 	andeq	r0, r0, r0, asr r0
  a8:	40080e41 	andmi	r0, r8, r1, asr #28
  ac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  b0:	100e4101 	andne	r4, lr, r1, lsl #2
  b4:	00070d41 	andeq	r0, r7, r1, asr #26
  b8:	0000001c 	andeq	r0, r0, ip, lsl r0
  bc:	00000000 	andeq	r0, r0, r0
  c0:	200001d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
  c4:	00000016 	andeq	r0, r0, r6, lsl r0
  c8:	40080e41 	andmi	r0, r8, r1, asr #28
  cc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  d0:	100e4101 	andne	r4, lr, r1, lsl #2
  d4:	00070d41 	andeq	r0, r7, r1, asr #26
  d8:	0000001c 	andeq	r0, r0, ip, lsl r0
  dc:	00000000 	andeq	r0, r0, r0
  e0:	200001e6 	andcs	r0, r0, r6, ror #3
  e4:	00000052 	andeq	r0, r0, r2, asr r0
  e8:	40080e41 	andmi	r0, r8, r1, asr #28
  ec:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  f0:	100e4101 	andne	r4, lr, r1, lsl #2
  f4:	00070d41 	andeq	r0, r7, r1, asr #26
  f8:	00000018 	andeq	r0, r0, r8, lsl r0
  fc:	00000000 	andeq	r0, r0, r0
 100:	20000238 	andcs	r0, r0, r8, lsr r2
 104:	0000001c 	andeq	r0, r0, ip, lsl r0
 108:	40080e41 	andmi	r0, r8, r1, asr #28
 10c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 110:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 114:	00000018 	andeq	r0, r0, r8, lsl r0
 118:	00000000 	andeq	r0, r0, r0
 11c:	20000254 	andcs	r0, r0, r4, asr r2
 120:	0000009a 	muleq	r0, sl, r0
 124:	40080e41 	andmi	r0, r8, r1, asr #28
 128:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 12c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 130:	0000001c 	andeq	r0, r0, ip, lsl r0
 134:	00000000 	andeq	r0, r0, r0
 138:	200002ee 	andcs	r0, r0, lr, ror #5
 13c:	00000046 	andeq	r0, r0, r6, asr #32
 140:	40080e41 	andmi	r0, r8, r1, asr #28
 144:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 148:	180e4101 	stmdane	lr, {r0, r8, lr}
 14c:	00070d41 	andeq	r0, r7, r1, asr #26
 150:	0000001c 	andeq	r0, r0, ip, lsl r0
 154:	00000000 	andeq	r0, r0, r0
 158:	20000334 	andcs	r0, r0, r4, lsr r3
 15c:	00000050 	andeq	r0, r0, r0, asr r0
 160:	40080e41 	andmi	r0, r8, r1, asr #28
 164:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 168:	180e4101 	stmdane	lr, {r0, r8, lr}
 16c:	00070d41 	andeq	r0, r7, r1, asr #26
 170:	0000001c 	andeq	r0, r0, ip, lsl r0
 174:	00000000 	andeq	r0, r0, r0
 178:	20000384 	andcs	r0, r0, r4, lsl #7
 17c:	0000002a 	andeq	r0, r0, sl, lsr #32
 180:	40080e41 	andmi	r0, r8, r1, asr #28
 184:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 188:	100e4101 	andne	r4, lr, r1, lsl #2
 18c:	00070d41 	andeq	r0, r7, r1, asr #26
 190:	0000001c 	andeq	r0, r0, ip, lsl r0
 194:	00000000 	andeq	r0, r0, r0
 198:	200003ae 	andcs	r0, r0, lr, lsr #7
 19c:	0000002a 	andeq	r0, r0, sl, lsr #32
 1a0:	40080e41 	andmi	r0, r8, r1, asr #28
 1a4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1a8:	100e4101 	andne	r4, lr, r1, lsl #2
 1ac:	00070d41 	andeq	r0, r7, r1, asr #26
 1b0:	00000020 	andeq	r0, r0, r0, lsr #32
 1b4:	00000000 	andeq	r0, r0, r0
 1b8:	200003d8 	ldrdcs	r0, [r0], -r8
 1bc:	00000048 	andeq	r0, r0, r8, asr #32
 1c0:	400c0e41 	andmi	r0, ip, r1, asr #28
 1c4:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 1c8:	018e4002 	orreq	r4, lr, r2
 1cc:	41180e41 	tstmi	r8, r1, asr #28
 1d0:	0000070d 	andeq	r0, r0, sp, lsl #14
 1d4:	00000020 	andeq	r0, r0, r0, lsr #32
 1d8:	00000000 	andeq	r0, r0, r0
 1dc:	20000420 	andcs	r0, r0, r0, lsr #8
 1e0:	00000048 	andeq	r0, r0, r8, asr #32
 1e4:	400c0e41 	andmi	r0, ip, r1, asr #28
 1e8:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 1ec:	018e4002 	orreq	r4, lr, r2
 1f0:	41180e41 	tstmi	r8, r1, asr #28
 1f4:	0000070d 	andeq	r0, r0, sp, lsl #14
 1f8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1fc:	00000000 	andeq	r0, r0, r0
 200:	20000468 	andcs	r0, r0, r8, ror #8
 204:	00000030 	andeq	r0, r0, r0, lsr r0
 208:	40080e41 	andmi	r0, r8, r1, asr #28
 20c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 210:	100e4101 	andne	r4, lr, r1, lsl #2
 214:	00070d41 	andeq	r0, r7, r1, asr #26
 218:	0000001c 	andeq	r0, r0, ip, lsl r0
 21c:	00000000 	andeq	r0, r0, r0
 220:	20000498 	mulcs	r0, r8, r4
 224:	00000034 	andeq	r0, r0, r4, lsr r0
 228:	40080e41 	andmi	r0, r8, r1, asr #28
 22c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 230:	100e4101 	andne	r4, lr, r1, lsl #2
 234:	00070d41 	andeq	r0, r7, r1, asr #26
 238:	0000001c 	andeq	r0, r0, ip, lsl r0
 23c:	00000000 	andeq	r0, r0, r0
 240:	200004cc 	andcs	r0, r0, ip, asr #9
 244:	00000054 	andeq	r0, r0, r4, asr r0
 248:	40080e41 	andmi	r0, r8, r1, asr #28
 24c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 250:	180e4101 	stmdane	lr, {r0, r8, lr}
 254:	00070d41 	andeq	r0, r7, r1, asr #26
 258:	0000001c 	andeq	r0, r0, ip, lsl r0
 25c:	00000000 	andeq	r0, r0, r0
 260:	20000520 	andcs	r0, r0, r0, lsr #10
 264:	0000003c 	andeq	r0, r0, ip, lsr r0
 268:	40080e41 	andmi	r0, r8, r1, asr #28
 26c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 270:	100e4101 	andne	r4, lr, r1, lsl #2
 274:	00070d41 	andeq	r0, r7, r1, asr #26
 278:	0000001c 	andeq	r0, r0, ip, lsl r0
 27c:	00000000 	andeq	r0, r0, r0
 280:	2000055c 	andcs	r0, r0, ip, asr r5
 284:	0000005c 	andeq	r0, r0, ip, asr r0
 288:	40080e41 	andmi	r0, r8, r1, asr #28
 28c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 290:	180e4101 	stmdane	lr, {r0, r8, lr}
 294:	00070d41 	andeq	r0, r7, r1, asr #26
 298:	0000001c 	andeq	r0, r0, ip, lsl r0
 29c:	00000000 	andeq	r0, r0, r0
 2a0:	200005b8 			; <UNDEFINED> instruction: 0x200005b8
 2a4:	00000058 	andeq	r0, r0, r8, asr r0
 2a8:	40080e41 	andmi	r0, r8, r1, asr #28
 2ac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2b0:	180e4101 	stmdane	lr, {r0, r8, lr}
 2b4:	00070d41 	andeq	r0, r7, r1, asr #26
 2b8:	0000001c 	andeq	r0, r0, ip, lsl r0
 2bc:	00000000 	andeq	r0, r0, r0
 2c0:	20000610 	andcs	r0, r0, r0, lsl r6
 2c4:	0000005a 	andeq	r0, r0, sl, asr r0
 2c8:	40080e41 	andmi	r0, r8, r1, asr #28
 2cc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2d0:	100e4101 	andne	r4, lr, r1, lsl #2
 2d4:	00070d41 	andeq	r0, r7, r1, asr #26
 2d8:	00000018 	andeq	r0, r0, r8, lsl r0
 2dc:	00000000 	andeq	r0, r0, r0
 2e0:	2000066a 	andcs	r0, r0, sl, ror #12
 2e4:	0000005c 	andeq	r0, r0, ip, asr r0
 2e8:	40080e41 	andmi	r0, r8, r1, asr #28
 2ec:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2f0:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 2f4:	0000001c 	andeq	r0, r0, ip, lsl r0
 2f8:	00000000 	andeq	r0, r0, r0
 2fc:	200006c6 	andcs	r0, r0, r6, asr #13
 300:	0000006a 	andeq	r0, r0, sl, rrx
 304:	40080e41 	andmi	r0, r8, r1, asr #28
 308:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 30c:	100e4101 	andne	r4, lr, r1, lsl #2
 310:	00070d41 	andeq	r0, r7, r1, asr #26
 314:	0000001c 	andeq	r0, r0, ip, lsl r0
 318:	00000000 	andeq	r0, r0, r0
 31c:	20000730 	andcs	r0, r0, r0, lsr r7
 320:	00000090 	muleq	r0, r0, r0
 324:	40080e41 	andmi	r0, r8, r1, asr #28
 328:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 32c:	180e4101 	stmdane	lr, {r0, r8, lr}
 330:	00070d41 	andeq	r0, r7, r1, asr #26
 334:	0000001c 	andeq	r0, r0, ip, lsl r0
 338:	00000000 	andeq	r0, r0, r0
 33c:	200007c0 	andcs	r0, r0, r0, asr #15
 340:	0000002a 	andeq	r0, r0, sl, lsr #32
 344:	40080e41 	andmi	r0, r8, r1, asr #28
 348:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 34c:	100e4101 	andne	r4, lr, r1, lsl #2
 350:	00070d41 	andeq	r0, r7, r1, asr #26
 354:	0000001c 	andeq	r0, r0, ip, lsl r0
 358:	00000000 	andeq	r0, r0, r0
 35c:	200007ea 	andcs	r0, r0, sl, ror #15
 360:	0000006e 	andeq	r0, r0, lr, rrx
 364:	40080e41 	andmi	r0, r8, r1, asr #28
 368:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 36c:	100e4101 	andne	r4, lr, r1, lsl #2
 370:	00070d41 	andeq	r0, r7, r1, asr #26
 374:	0000001c 	andeq	r0, r0, ip, lsl r0
 378:	00000000 	andeq	r0, r0, r0
 37c:	20000858 	andcs	r0, r0, r8, asr r8
 380:	00000040 	andeq	r0, r0, r0, asr #32
 384:	40080e41 	andmi	r0, r8, r1, asr #28
 388:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 38c:	100e4101 	andne	r4, lr, r1, lsl #2
 390:	00070d41 	andeq	r0, r7, r1, asr #26
 394:	0000001c 	andeq	r0, r0, ip, lsl r0
 398:	00000000 	andeq	r0, r0, r0
 39c:	20000898 	mulcs	r0, r8, r8
 3a0:	00000046 	andeq	r0, r0, r6, asr #32
 3a4:	40080e41 	andmi	r0, r8, r1, asr #28
 3a8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3ac:	100e4101 	andne	r4, lr, r1, lsl #2
 3b0:	00070d41 	andeq	r0, r7, r1, asr #26
 3b4:	0000001c 	andeq	r0, r0, ip, lsl r0
 3b8:	00000000 	andeq	r0, r0, r0
 3bc:	200008de 	ldrdcs	r0, [r0], -lr
 3c0:	00000066 	andeq	r0, r0, r6, rrx
 3c4:	40080e41 	andmi	r0, r8, r1, asr #28
 3c8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3cc:	100e4101 	andne	r4, lr, r1, lsl #2
 3d0:	00070d41 	andeq	r0, r7, r1, asr #26
 3d4:	00000020 	andeq	r0, r0, r0, lsr #32
 3d8:	00000000 	andeq	r0, r0, r0
 3dc:	20000944 	andcs	r0, r0, r4, asr #18
 3e0:	000001a0 	andeq	r0, r0, r0, lsr #3
 3e4:	400c0e41 	andmi	r0, ip, r1, asr #28
 3e8:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 3ec:	018e4002 	orreq	r4, lr, r2
 3f0:	41300e41 	teqmi	r0, r1, asr #28
 3f4:	0000070d 	andeq	r0, r0, sp, lsl #14
 3f8:	0000001c 	andeq	r0, r0, ip, lsl r0
 3fc:	00000000 	andeq	r0, r0, r0
 400:	20000ae4 	andcs	r0, r0, r4, ror #21
 404:	00000034 	andeq	r0, r0, r4, lsr r0
 408:	40080e41 	andmi	r0, r8, r1, asr #28
 40c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 410:	100e4101 	andne	r4, lr, r1, lsl #2
 414:	00070d41 	andeq	r0, r7, r1, asr #26
 418:	0000001c 	andeq	r0, r0, ip, lsl r0
 41c:	00000000 	andeq	r0, r0, r0
 420:	20000b18 	andcs	r0, r0, r8, lsl fp
 424:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 428:	40080e41 	andmi	r0, r8, r1, asr #28
 42c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 430:	180e4101 	stmdane	lr, {r0, r8, lr}
 434:	00070d41 	andeq	r0, r7, r1, asr #26
 438:	0000000c 	andeq	r0, r0, ip
 43c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 440:	7c020001 	stcvc	0, cr0, [r2], {1}
 444:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 448:	0000000c 	andeq	r0, r0, ip
 44c:	00000438 	andeq	r0, r0, r8, lsr r4
 450:	20000000 	andcs	r0, r0, r0
 454:	0000000c 	andeq	r0, r0, ip
 458:	00000018 	andeq	r0, r0, r8, lsl r0
 45c:	00000438 	andeq	r0, r0, r8, lsr r4
 460:	20000be8 	andcs	r0, r0, r8, ror #23
 464:	0000004c 	andeq	r0, r0, ip, asr #32
 468:	40080e41 	andmi	r0, r8, r1, asr #28
 46c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 470:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 474:	00000018 	andeq	r0, r0, r8, lsl r0
 478:	00000438 	andeq	r0, r0, r8, lsr r4
 47c:	20000c34 	andcs	r0, r0, r4, lsr ip
 480:	00000048 	andeq	r0, r0, r8, asr #32
 484:	40080e41 	andmi	r0, r8, r1, asr #28
 488:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 48c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 490:	00000018 	andeq	r0, r0, r8, lsl r0
 494:	00000438 	andeq	r0, r0, r8, lsr r4
 498:	20000c7c 	andcs	r0, r0, ip, ror ip
 49c:	0000005c 	andeq	r0, r0, ip, asr r0
 4a0:	40080e41 	andmi	r0, r8, r1, asr #28
 4a4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4a8:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 4ac:	00000018 	andeq	r0, r0, r8, lsl r0
 4b0:	00000438 	andeq	r0, r0, r8, lsr r4
 4b4:	20000cd8 	ldrdcs	r0, [r0], -r8
 4b8:	00000138 	andeq	r0, r0, r8, lsr r1
 4bc:	40080e41 	andmi	r0, r8, r1, asr #28
 4c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4c4:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 4c8:	00000018 	andeq	r0, r0, r8, lsl r0
 4cc:	00000438 	andeq	r0, r0, r8, lsr r4
 4d0:	20000e10 	andcs	r0, r0, r0, lsl lr
 4d4:	0000001c 	andeq	r0, r0, ip, lsl r0
 4d8:	40080e41 	andmi	r0, r8, r1, asr #28
 4dc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4e0:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 4e4:	0000000c 	andeq	r0, r0, ip
 4e8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 4ec:	7c020001 	stcvc	0, cr0, [r2], {1}
 4f0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 4f4:	00000018 	andeq	r0, r0, r8, lsl r0
 4f8:	000004e4 	andeq	r0, r0, r4, ror #9
 4fc:	20000e2c 	andcs	r0, r0, ip, lsr #28
 500:	0000002c 	andeq	r0, r0, ip, lsr #32
 504:	40080e41 	andmi	r0, r8, r1, asr #28
 508:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 50c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 510:	0000001c 	andeq	r0, r0, ip, lsl r0
 514:	000004e4 	andeq	r0, r0, r4, ror #9
 518:	20000e58 	andcs	r0, r0, r8, asr lr
 51c:	00000024 	andeq	r0, r0, r4, lsr #32
 520:	40080e41 	andmi	r0, r8, r1, asr #28
 524:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 528:	100e4101 	andne	r4, lr, r1, lsl #2
 52c:	00070d41 	andeq	r0, r7, r1, asr #26
 530:	0000001c 	andeq	r0, r0, ip, lsl r0
 534:	000004e4 	andeq	r0, r0, r4, ror #9
 538:	20000e7c 	andcs	r0, r0, ip, ror lr
 53c:	0000002e 	andeq	r0, r0, lr, lsr #32
 540:	40080e41 	andmi	r0, r8, r1, asr #28
 544:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 548:	180e4101 	stmdane	lr, {r0, r8, lr}
 54c:	00070d41 	andeq	r0, r7, r1, asr #26
 550:	0000001c 	andeq	r0, r0, ip, lsl r0
 554:	000004e4 	andeq	r0, r0, r4, ror #9
 558:	20000eaa 	andcs	r0, r0, sl, lsr #29
 55c:	00000032 	andeq	r0, r0, r2, lsr r0
 560:	40080e41 	andmi	r0, r8, r1, asr #28
 564:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 568:	180e4101 	stmdane	lr, {r0, r8, lr}
 56c:	00070d41 	andeq	r0, r7, r1, asr #26

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000be8 	andcs	r0, r0, r8, ror #23
   4:	20000e2c 	andcs	r0, r0, ip, lsr #28
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...
