
./Debug/delay.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
 */
void startup(void) __attribute__((naked)) __attribute__((section (".start_section")) );

void startup ( void )
{
__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 f810 	bl	20000028 <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	"_exit: B .\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <init_app>:

void init_app( void )
{
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
	setup_for_seg_disp(GPIO_D);
20000014:	4b03      	ldr	r3, [pc, #12]	; (20000024 <init_app+0x14>)
20000016:	0018      	movs	r0, r3
20000018:	f000 f850 	bl	200000bc <setup_for_seg_disp>
}
2000001c:	46c0      	nop			; (mov r8, r8)
2000001e:	46bd      	mov	sp, r7
20000020:	bd80      	pop	{r7, pc}
20000022:	46c0      	nop			; (mov r8, r8)
20000024:	40020c00 	andmi	r0, r2, r0, lsl #24

20000028 <main>:

void main(void)
{
20000028:	b580      	push	{r7, lr}
2000002a:	af00      	add	r7, sp, #0
	init_app();
2000002c:	f7ff fff0 	bl	20000010 <init_app>
	while(1)
	{
		GPIO_D->odrLow = 0;
20000030:	4b08      	ldr	r3, [pc, #32]	; (20000054 <main+0x2c>)
20000032:	2200      	movs	r2, #0
20000034:	751a      	strb	r2, [r3, #20]
		//out7seg(GPIO_D, 0x0);
		delay_milli(500);
20000036:	23fa      	movs	r3, #250	; 0xfa
20000038:	005b      	lsls	r3, r3, #1
2000003a:	0018      	movs	r0, r3
2000003c:	f000 f973 	bl	20000326 <delay_milli>
		GPIO_D->odrLow = 0xFF;
20000040:	4b04      	ldr	r3, [pc, #16]	; (20000054 <main+0x2c>)
20000042:	22ff      	movs	r2, #255	; 0xff
20000044:	751a      	strb	r2, [r3, #20]
		//out7seg(GPIO_D, 0x0F);
		delay_milli(500);
20000046:	23fa      	movs	r3, #250	; 0xfa
20000048:	005b      	lsls	r3, r3, #1
2000004a:	0018      	movs	r0, r3
2000004c:	f000 f96b 	bl	20000326 <delay_milli>
		GPIO_D->odrLow = 0;
20000050:	e7ee      	b.n	20000030 <main+0x8>
20000052:	46c0      	nop			; (mov r8, r8)
20000054:	40020c00 	andmi	r0, r2, r0, lsl #24

20000058 <setup_for_keypad>:
#include "gpio.h"

void setup_for_keypad(GPIO* _gpio)
{
20000058:	b580      	push	{r7, lr}
2000005a:	b082      	sub	sp, #8
2000005c:	af00      	add	r7, sp, #0
2000005e:	6078      	str	r0, [r7, #4]
	// Sätt pinnar 15-12 till utportar
	// och pinnar 11-8 till inportar.
    _gpio->moder &= 0x0000FFFF;
20000060:	687b      	ldr	r3, [r7, #4]
20000062:	681b      	ldr	r3, [r3, #0]
20000064:	041b      	lsls	r3, r3, #16
20000066:	0c1a      	lsrs	r2, r3, #16
20000068:	687b      	ldr	r3, [r7, #4]
2000006a:	601a      	str	r2, [r3, #0]
    _gpio->moder |= 0x5500FFFF;
2000006c:	687b      	ldr	r3, [r7, #4]
2000006e:	681b      	ldr	r3, [r3, #0]
20000070:	4a11      	ldr	r2, [pc, #68]	; (200000b8 <setup_for_keypad+0x60>)
20000072:	431a      	orrs	r2, r3
20000074:	687b      	ldr	r3, [r7, #4]
20000076:	601a      	str	r2, [r3, #0]
	
	// Sätt pinnar 15-12 till "push-pull"
	// och pinnar 11-8 till "open drain".
    _gpio->otyper &= 0xFFFF00FF;
20000078:	687b      	ldr	r3, [r7, #4]
2000007a:	889b      	ldrh	r3, [r3, #4]
2000007c:	22ff      	movs	r2, #255	; 0xff
2000007e:	4013      	ands	r3, r2
20000080:	b29a      	uxth	r2, r3
20000082:	687b      	ldr	r3, [r7, #4]
20000084:	809a      	strh	r2, [r3, #4]
    _gpio->otyper |= 0x00000F00;
20000086:	687b      	ldr	r3, [r7, #4]
20000088:	889b      	ldrh	r3, [r3, #4]
2000008a:	22f0      	movs	r2, #240	; 0xf0
2000008c:	0112      	lsls	r2, r2, #4
2000008e:	4313      	orrs	r3, r2
20000090:	b29a      	uxth	r2, r3
20000092:	687b      	ldr	r3, [r7, #4]
20000094:	809a      	strh	r2, [r3, #4]

	// Sätt pinnar 15-12 till "floating"
	// och pinnar 11-8 till "pull-down"
    _gpio->pupdr &= 0x0000FFFF;
20000096:	687b      	ldr	r3, [r7, #4]
20000098:	68db      	ldr	r3, [r3, #12]
2000009a:	041b      	lsls	r3, r3, #16
2000009c:	0c1a      	lsrs	r2, r3, #16
2000009e:	687b      	ldr	r3, [r7, #4]
200000a0:	60da      	str	r2, [r3, #12]
    _gpio->pupdr |= 0x00AA0000;
200000a2:	687b      	ldr	r3, [r7, #4]
200000a4:	68db      	ldr	r3, [r3, #12]
200000a6:	22aa      	movs	r2, #170	; 0xaa
200000a8:	0412      	lsls	r2, r2, #16
200000aa:	431a      	orrs	r2, r3
200000ac:	687b      	ldr	r3, [r7, #4]
200000ae:	60da      	str	r2, [r3, #12]
}
200000b0:	46c0      	nop			; (mov r8, r8)
200000b2:	46bd      	mov	sp, r7
200000b4:	b002      	add	sp, #8
200000b6:	bd80      	pop	{r7, pc}
200000b8:	5500ffff 	strpl	pc, [r0, #-4095]	; 0xfffff001

200000bc <setup_for_seg_disp>:

void setup_for_seg_disp(GPIO* _gpio) 
{
200000bc:	b580      	push	{r7, lr}
200000be:	b082      	sub	sp, #8
200000c0:	af00      	add	r7, sp, #0
200000c2:	6078      	str	r0, [r7, #4]
	// Sätt pinnar 7-0 till utportar
	_gpio->moder &= 0xFFFF0000;
200000c4:	687b      	ldr	r3, [r7, #4]
200000c6:	681b      	ldr	r3, [r3, #0]
200000c8:	0c1b      	lsrs	r3, r3, #16
200000ca:	041a      	lsls	r2, r3, #16
200000cc:	687b      	ldr	r3, [r7, #4]
200000ce:	601a      	str	r2, [r3, #0]
	_gpio->moder |= 0x00005555;
200000d0:	687b      	ldr	r3, [r7, #4]
200000d2:	681b      	ldr	r3, [r3, #0]
200000d4:	4a11      	ldr	r2, [pc, #68]	; (2000011c <setup_for_seg_disp+0x60>)
200000d6:	431a      	orrs	r2, r3
200000d8:	687b      	ldr	r3, [r7, #4]
200000da:	601a      	str	r2, [r3, #0]
	
	// Sätt pinnar 7-0 till "push-pull"
	_gpio->otyper &= 0xFFFFFF00;
200000dc:	687b      	ldr	r3, [r7, #4]
200000de:	889b      	ldrh	r3, [r3, #4]
200000e0:	22ff      	movs	r2, #255	; 0xff
200000e2:	4393      	bics	r3, r2
200000e4:	b29a      	uxth	r2, r3
200000e6:	687b      	ldr	r3, [r7, #4]
200000e8:	809a      	strh	r2, [r3, #4]
	_gpio->otyper |= 0x000000FF;
200000ea:	687b      	ldr	r3, [r7, #4]
200000ec:	889b      	ldrh	r3, [r3, #4]
200000ee:	22ff      	movs	r2, #255	; 0xff
200000f0:	4313      	orrs	r3, r2
200000f2:	b29a      	uxth	r2, r3
200000f4:	687b      	ldr	r3, [r7, #4]
200000f6:	809a      	strh	r2, [r3, #4]
	
	// Sätter pinnar 4-0 till "pull-down"
	_gpio->pupdr &= 0xFFFFFF00;
200000f8:	687b      	ldr	r3, [r7, #4]
200000fa:	68db      	ldr	r3, [r3, #12]
200000fc:	22ff      	movs	r2, #255	; 0xff
200000fe:	4393      	bics	r3, r2
20000100:	001a      	movs	r2, r3
20000102:	687b      	ldr	r3, [r7, #4]
20000104:	60da      	str	r2, [r3, #12]
	_gpio->pupdr |= 0x000000AA;
20000106:	687b      	ldr	r3, [r7, #4]
20000108:	68db      	ldr	r3, [r3, #12]
2000010a:	22aa      	movs	r2, #170	; 0xaa
2000010c:	431a      	orrs	r2, r3
2000010e:	687b      	ldr	r3, [r7, #4]
20000110:	60da      	str	r2, [r3, #12]
}
20000112:	46c0      	nop			; (mov r8, r8)
20000114:	46bd      	mov	sp, r7
20000116:	b002      	add	sp, #8
20000118:	bd80      	pop	{r7, pc}
2000011a:	46c0      	nop			; (mov r8, r8)
2000011c:	00005555 	andeq	r5, r0, r5, asr r5

20000120 <keyb>:

unsigned char keyb(void)
{
20000120:	b590      	push	{r4, r7, lr}
20000122:	b087      	sub	sp, #28
20000124:	af00      	add	r7, sp, #0
	unsigned char keys[] = {
20000126:	1d3b      	adds	r3, r7, #4
20000128:	4a1f      	ldr	r2, [pc, #124]	; (200001a8 <keyb+0x88>)
2000012a:	ca13      	ldmia	r2!, {r0, r1, r4}
2000012c:	c313      	stmia	r3!, {r0, r1, r4}
2000012e:	6812      	ldr	r2, [r2, #0]
20000130:	601a      	str	r2, [r3, #0]
		4,  5,  6,  11,
		7,  8,  9,  12,
		14, 0,  15, 13
	};
	unsigned char row, col;
	for(row = 0; row < 4; row++) {
20000132:	2317      	movs	r3, #23
20000134:	18fb      	adds	r3, r7, r3
20000136:	2200      	movs	r2, #0
20000138:	701a      	strb	r2, [r3, #0]
2000013a:	e02a      	b.n	20000192 <keyb+0x72>
		deactivate_rows(GPIO_D);
2000013c:	4b1b      	ldr	r3, [pc, #108]	; (200001ac <keyb+0x8c>)
2000013e:	0018      	movs	r0, r3
20000140:	f000 f886 	bl	20000250 <deactivate_rows>
		activate_row(GPIO_D, row);
20000144:	2317      	movs	r3, #23
20000146:	18fb      	adds	r3, r7, r3
20000148:	781b      	ldrb	r3, [r3, #0]
2000014a:	4a18      	ldr	r2, [pc, #96]	; (200001ac <keyb+0x8c>)
2000014c:	0019      	movs	r1, r3
2000014e:	0010      	movs	r0, r2
20000150:	f000 f856 	bl	20000200 <activate_row>
		col = read_col(GPIO_D);
20000154:	2316      	movs	r3, #22
20000156:	18fc      	adds	r4, r7, r3
20000158:	4b14      	ldr	r3, [pc, #80]	; (200001ac <keyb+0x8c>)
2000015a:	0018      	movs	r0, r3
2000015c:	f000 f883 	bl	20000266 <read_col>
20000160:	0003      	movs	r3, r0
20000162:	7023      	strb	r3, [r4, #0]
		if(col != 0xFF) {
20000164:	2316      	movs	r3, #22
20000166:	18fb      	adds	r3, r7, r3
20000168:	781b      	ldrb	r3, [r3, #0]
2000016a:	2bff      	cmp	r3, #255	; 0xff
2000016c:	d00a      	beq.n	20000184 <keyb+0x64>
			return keys[ 4 * row + col];
2000016e:	2317      	movs	r3, #23
20000170:	18fb      	adds	r3, r7, r3
20000172:	781b      	ldrb	r3, [r3, #0]
20000174:	009a      	lsls	r2, r3, #2
20000176:	2316      	movs	r3, #22
20000178:	18fb      	adds	r3, r7, r3
2000017a:	781b      	ldrb	r3, [r3, #0]
2000017c:	18d3      	adds	r3, r2, r3
2000017e:	1d3a      	adds	r2, r7, #4
20000180:	5cd3      	ldrb	r3, [r2, r3]
20000182:	e00c      	b.n	2000019e <keyb+0x7e>
	for(row = 0; row < 4; row++) {
20000184:	2317      	movs	r3, #23
20000186:	18fb      	adds	r3, r7, r3
20000188:	781a      	ldrb	r2, [r3, #0]
2000018a:	2317      	movs	r3, #23
2000018c:	18fb      	adds	r3, r7, r3
2000018e:	3201      	adds	r2, #1
20000190:	701a      	strb	r2, [r3, #0]
20000192:	2317      	movs	r3, #23
20000194:	18fb      	adds	r3, r7, r3
20000196:	781b      	ldrb	r3, [r3, #0]
20000198:	2b03      	cmp	r3, #3
2000019a:	d9cf      	bls.n	2000013c <keyb+0x1c>
		}
	}
	return 0xFF;
2000019c:	23ff      	movs	r3, #255	; 0xff
}
2000019e:	0018      	movs	r0, r3
200001a0:	46bd      	mov	sp, r7
200001a2:	b007      	add	sp, #28
200001a4:	bd90      	pop	{r4, r7, pc}
200001a6:	46c0      	nop			; (mov r8, r8)
200001a8:	20000488 	andcs	r0, r0, r8, lsl #9
200001ac:	40020c00 	andmi	r0, r2, r0, lsl #24

200001b0 <out7seg>:

void out7seg(GPIO* _gpio, unsigned char c)
{
200001b0:	b590      	push	{r4, r7, lr}
200001b2:	b08b      	sub	sp, #44	; 0x2c
200001b4:	af00      	add	r7, sp, #0
200001b6:	6078      	str	r0, [r7, #4]
200001b8:	000a      	movs	r2, r1
200001ba:	1cfb      	adds	r3, r7, #3
200001bc:	701a      	strb	r2, [r3, #0]
    unsigned short result[] = { 
200001be:	2308      	movs	r3, #8
200001c0:	18fb      	adds	r3, r7, r3
200001c2:	4a0e      	ldr	r2, [pc, #56]	; (200001fc <out7seg+0x4c>)
200001c4:	ca13      	ldmia	r2!, {r0, r1, r4}
200001c6:	c313      	stmia	r3!, {r0, r1, r4}
200001c8:	ca13      	ldmia	r2!, {r0, r1, r4}
200001ca:	c313      	stmia	r3!, {r0, r1, r4}
200001cc:	ca03      	ldmia	r2!, {r0, r1}
200001ce:	c303      	stmia	r3!, {r0, r1}
		0x5E, // D
		0x80, // E
		0x76  // F
	};

    if(c > 0xF) {
200001d0:	1cfb      	adds	r3, r7, #3
200001d2:	781b      	ldrb	r3, [r3, #0]
200001d4:	2b0f      	cmp	r3, #15
200001d6:	d903      	bls.n	200001e0 <out7seg+0x30>
		_gpio->odrLow = 0x00;
200001d8:	687b      	ldr	r3, [r7, #4]
200001da:	2200      	movs	r2, #0
200001dc:	751a      	strb	r2, [r3, #20]
    } else {
		_gpio->odrLow = result[c];
    }
}
200001de:	e008      	b.n	200001f2 <out7seg+0x42>
		_gpio->odrLow = result[c];
200001e0:	1cfb      	adds	r3, r7, #3
200001e2:	781a      	ldrb	r2, [r3, #0]
200001e4:	2308      	movs	r3, #8
200001e6:	18fb      	adds	r3, r7, r3
200001e8:	0052      	lsls	r2, r2, #1
200001ea:	5ad3      	ldrh	r3, [r2, r3]
200001ec:	b2da      	uxtb	r2, r3
200001ee:	687b      	ldr	r3, [r7, #4]
200001f0:	751a      	strb	r2, [r3, #20]
}
200001f2:	46c0      	nop			; (mov r8, r8)
200001f4:	46bd      	mov	sp, r7
200001f6:	b00b      	add	sp, #44	; 0x2c
200001f8:	bd90      	pop	{r4, r7, pc}
200001fa:	46c0      	nop			; (mov r8, r8)
200001fc:	20000498 	mulcs	r0, r8, r4

20000200 <activate_row>:

void activate_row(GPIO* _gpio, unsigned char row) 
{
20000200:	b580      	push	{r7, lr}
20000202:	b082      	sub	sp, #8
20000204:	af00      	add	r7, sp, #0
20000206:	6078      	str	r0, [r7, #4]
20000208:	000a      	movs	r2, r1
2000020a:	1cfb      	adds	r3, r7, #3
2000020c:	701a      	strb	r2, [r3, #0]
	switch(row){
2000020e:	1cfb      	adds	r3, r7, #3
20000210:	781b      	ldrb	r3, [r3, #0]
20000212:	2b01      	cmp	r3, #1
20000214:	d00c      	beq.n	20000230 <activate_row+0x30>
20000216:	dc02      	bgt.n	2000021e <activate_row+0x1e>
20000218:	2b00      	cmp	r3, #0
2000021a:	d005      	beq.n	20000228 <activate_row+0x28>
		case 0: _gpio->odrHigh = 0x10; break;
		case 1: _gpio->odrHigh = 0x20; break;
		case 2: _gpio->odrHigh = 0x40; break;
		case 3: _gpio->odrHigh = 0x80; break;
	}
}
2000021c:	e014      	b.n	20000248 <activate_row+0x48>
	switch(row){
2000021e:	2b02      	cmp	r3, #2
20000220:	d00a      	beq.n	20000238 <activate_row+0x38>
20000222:	2b03      	cmp	r3, #3
20000224:	d00c      	beq.n	20000240 <activate_row+0x40>
}
20000226:	e00f      	b.n	20000248 <activate_row+0x48>
		case 0: _gpio->odrHigh = 0x10; break;
20000228:	687b      	ldr	r3, [r7, #4]
2000022a:	2210      	movs	r2, #16
2000022c:	755a      	strb	r2, [r3, #21]
2000022e:	e00b      	b.n	20000248 <activate_row+0x48>
		case 1: _gpio->odrHigh = 0x20; break;
20000230:	687b      	ldr	r3, [r7, #4]
20000232:	2220      	movs	r2, #32
20000234:	755a      	strb	r2, [r3, #21]
20000236:	e007      	b.n	20000248 <activate_row+0x48>
		case 2: _gpio->odrHigh = 0x40; break;
20000238:	687b      	ldr	r3, [r7, #4]
2000023a:	2240      	movs	r2, #64	; 0x40
2000023c:	755a      	strb	r2, [r3, #21]
2000023e:	e003      	b.n	20000248 <activate_row+0x48>
		case 3: _gpio->odrHigh = 0x80; break;
20000240:	687b      	ldr	r3, [r7, #4]
20000242:	2280      	movs	r2, #128	; 0x80
20000244:	755a      	strb	r2, [r3, #21]
20000246:	46c0      	nop			; (mov r8, r8)
}
20000248:	46c0      	nop			; (mov r8, r8)
2000024a:	46bd      	mov	sp, r7
2000024c:	b002      	add	sp, #8
2000024e:	bd80      	pop	{r7, pc}

20000250 <deactivate_rows>:

void deactivate_rows(GPIO* _gpio)
{
20000250:	b580      	push	{r7, lr}
20000252:	b082      	sub	sp, #8
20000254:	af00      	add	r7, sp, #0
20000256:	6078      	str	r0, [r7, #4]
	_gpio->odrHigh = 0x00;
20000258:	687b      	ldr	r3, [r7, #4]
2000025a:	2200      	movs	r2, #0
2000025c:	755a      	strb	r2, [r3, #21]
}
2000025e:	46c0      	nop			; (mov r8, r8)
20000260:	46bd      	mov	sp, r7
20000262:	b002      	add	sp, #8
20000264:	bd80      	pop	{r7, pc}

20000266 <read_col>:

unsigned char read_col(GPIO* _gpio)
{
20000266:	b580      	push	{r7, lr}
20000268:	b082      	sub	sp, #8
2000026a:	af00      	add	r7, sp, #0
2000026c:	6078      	str	r0, [r7, #4]
	if(_gpio->idrHigh & 0x01) return 0;
2000026e:	687b      	ldr	r3, [r7, #4]
20000270:	7c5b      	ldrb	r3, [r3, #17]
20000272:	001a      	movs	r2, r3
20000274:	2301      	movs	r3, #1
20000276:	4013      	ands	r3, r2
20000278:	d001      	beq.n	2000027e <read_col+0x18>
2000027a:	2300      	movs	r3, #0
2000027c:	e018      	b.n	200002b0 <read_col+0x4a>
	if(_gpio->idrHigh & 0x02) return 1;
2000027e:	687b      	ldr	r3, [r7, #4]
20000280:	7c5b      	ldrb	r3, [r3, #17]
20000282:	001a      	movs	r2, r3
20000284:	2302      	movs	r3, #2
20000286:	4013      	ands	r3, r2
20000288:	d001      	beq.n	2000028e <read_col+0x28>
2000028a:	2301      	movs	r3, #1
2000028c:	e010      	b.n	200002b0 <read_col+0x4a>
	if(_gpio->idrHigh & 0x04) return 2;
2000028e:	687b      	ldr	r3, [r7, #4]
20000290:	7c5b      	ldrb	r3, [r3, #17]
20000292:	001a      	movs	r2, r3
20000294:	2304      	movs	r3, #4
20000296:	4013      	ands	r3, r2
20000298:	d001      	beq.n	2000029e <read_col+0x38>
2000029a:	2302      	movs	r3, #2
2000029c:	e008      	b.n	200002b0 <read_col+0x4a>
	if(_gpio->idrHigh & 0x08) return 3;
2000029e:	687b      	ldr	r3, [r7, #4]
200002a0:	7c5b      	ldrb	r3, [r3, #17]
200002a2:	001a      	movs	r2, r3
200002a4:	2308      	movs	r3, #8
200002a6:	4013      	ands	r3, r2
200002a8:	d001      	beq.n	200002ae <read_col+0x48>
200002aa:	2303      	movs	r3, #3
200002ac:	e000      	b.n	200002b0 <read_col+0x4a>
	return 0xFF;
200002ae:	23ff      	movs	r3, #255	; 0xff
200002b0:	0018      	movs	r0, r3
200002b2:	46bd      	mov	sp, r7
200002b4:	b002      	add	sp, #8
200002b6:	bd80      	pop	{r7, pc}

200002b8 <delay_250ns>:
/// Delays the thread 250 ns.
///
/// NOTE: 		The routine is not exact but takes a MINIMUM of 
///				250 ns.
void delay_250ns( void )
{
200002b8:	b580      	push	{r7, lr}
200002ba:	af00      	add	r7, sp, #0
	// ----------------------
	// = Återställ räknaren =
	// ----------------------
	// Nollställ register STK_CTRL.
	SYS_TICK->STK_CTRL = 0;
200002bc:	4b0c      	ldr	r3, [pc, #48]	; (200002f0 <delay_250ns+0x38>)
200002be:	2200      	movs	r2, #0
200002c0:	601a      	str	r2, [r3, #0]
	// = Ladda in räknarvärdet =
	// -------------------------
	// 		168 ticks/µs 		* 1000
	// => 	168'000 ticks/ns 	/ 4
	// => 	42'000 ticks for a wait of 250 ns.
	SYS_TICK->STK_LOAD = 0x0000A410;
200002c2:	4b0b      	ldr	r3, [pc, #44]	; (200002f0 <delay_250ns+0x38>)
200002c4:	4a0b      	ldr	r2, [pc, #44]	; (200002f4 <delay_250ns+0x3c>)
200002c6:	605a      	str	r2, [r3, #4]
	
	// -----------------------------
	// = Nollställ räknarregistret =
	// -----------------------------
	// Nolställ register STK_VAL.
	SYS_TICK->STK_VAL = 0;
200002c8:	4b09      	ldr	r3, [pc, #36]	; (200002f0 <delay_250ns+0x38>)
200002ca:	2200      	movs	r2, #0
200002cc:	609a      	str	r2, [r3, #8]
	// ---------------------
	// = Start om räknaren =
	// ---------------------
	// Ettställ bitar 2 och 0.
	// Nollställ bitar 31-3 och 1.
	SYS_TICK->STK_CTRL = 0x00000005;
200002ce:	4b08      	ldr	r3, [pc, #32]	; (200002f0 <delay_250ns+0x38>)
200002d0:	2205      	movs	r2, #5
200002d2:	601a      	str	r2, [r3, #0]
	
	// -----------------------------------------
	// = Vänta tills räknaren har räknat klart =
	// -----------------------------------------
	// Väntar tills COUNTFLAG = 1.
	while(SYS_TICK->STK_CTRL & 0x00010000) { }
200002d4:	46c0      	nop			; (mov r8, r8)
200002d6:	4b06      	ldr	r3, [pc, #24]	; (200002f0 <delay_250ns+0x38>)
200002d8:	681a      	ldr	r2, [r3, #0]
200002da:	2380      	movs	r3, #128	; 0x80
200002dc:	025b      	lsls	r3, r3, #9
200002de:	4013      	ands	r3, r2
200002e0:	d1f9      	bne.n	200002d6 <delay_250ns+0x1e>
	
	// ----------------------
	// = Återställ räknaren =
	// ----------------------
	// Nollställ register STK_CTRL.
	SYS_TICK->STK_CTRL = 0;
200002e2:	4b03      	ldr	r3, [pc, #12]	; (200002f0 <delay_250ns+0x38>)
200002e4:	2200      	movs	r2, #0
200002e6:	601a      	str	r2, [r3, #0]
}
200002e8:	46c0      	nop			; (mov r8, r8)
200002ea:	46bd      	mov	sp, r7
200002ec:	bd80      	pop	{r7, pc}
200002ee:	46c0      	nop			; (mov r8, r8)
200002f0:	e000e010 	and	lr, r0, r0, lsl r0
200002f4:	0000a410 	andeq	sl, r0, r0, lsl r4

200002f8 <delay_mikro>:
///				'delay_250ns()' function is suboptimal as you reset
///				the STK_CTRL register twice between every iteration
///				of the for loop.
/// 			
void delay_mikro( unsigned int us )
{
200002f8:	b580      	push	{r7, lr}
200002fa:	b084      	sub	sp, #16
200002fc:	af00      	add	r7, sp, #0
200002fe:	6078      	str	r0, [r7, #4]
	// Convert the given time to a number of 250 ns delays.
	unsigned int delays = us * 4;
20000300:	687b      	ldr	r3, [r7, #4]
20000302:	009b      	lsls	r3, r3, #2
20000304:	60bb      	str	r3, [r7, #8]
	unsigned int i;
	for(i = 0; i < delays; i++)
20000306:	2300      	movs	r3, #0
20000308:	60fb      	str	r3, [r7, #12]
2000030a:	e004      	b.n	20000316 <delay_mikro+0x1e>
	{
		delay_250ns();
2000030c:	f7ff ffd4 	bl	200002b8 <delay_250ns>
	for(i = 0; i < delays; i++)
20000310:	68fb      	ldr	r3, [r7, #12]
20000312:	3301      	adds	r3, #1
20000314:	60fb      	str	r3, [r7, #12]
20000316:	68fa      	ldr	r2, [r7, #12]
20000318:	68bb      	ldr	r3, [r7, #8]
2000031a:	429a      	cmp	r2, r3
2000031c:	d3f6      	bcc.n	2000030c <delay_mikro+0x14>
	}
}
2000031e:	46c0      	nop			; (mov r8, r8)
20000320:	46bd      	mov	sp, r7
20000322:	b004      	add	sp, #16
20000324:	bd80      	pop	{r7, pc}

20000326 <delay_milli>:
///				'delay_250ns()' function is suboptimal as you reset
///				the 'STK_CTRL' register twice between every iteration
///				of the for loop.
/// 			
void delay_milli( unsigned int ms )
{
20000326:	b580      	push	{r7, lr}
20000328:	b084      	sub	sp, #16
2000032a:	af00      	add	r7, sp, #0
2000032c:	6078      	str	r0, [r7, #4]
#ifdef SIMULATOR
	ms = ms / 1000;
2000032e:	687a      	ldr	r2, [r7, #4]
20000330:	23fa      	movs	r3, #250	; 0xfa
20000332:	0099      	lsls	r1, r3, #2
20000334:	0010      	movs	r0, r2
20000336:	f000 f81b 	bl	20000370 <__udivsi3>
2000033a:	0003      	movs	r3, r0
2000033c:	607b      	str	r3, [r7, #4]
	ms++;
2000033e:	687b      	ldr	r3, [r7, #4]
20000340:	3301      	adds	r3, #1
20000342:	607b      	str	r3, [r7, #4]
#endif
	// Convert the given time to a number of 250 ns delays.
	unsigned int delays = ms * 4000;
20000344:	687b      	ldr	r3, [r7, #4]
20000346:	22fa      	movs	r2, #250	; 0xfa
20000348:	0112      	lsls	r2, r2, #4
2000034a:	4353      	muls	r3, r2
2000034c:	60bb      	str	r3, [r7, #8]
	unsigned int i;
	for(i = 0; i < delays; i++)
2000034e:	2300      	movs	r3, #0
20000350:	60fb      	str	r3, [r7, #12]
20000352:	e004      	b.n	2000035e <delay_milli+0x38>
	{
		delay_250ns();
20000354:	f7ff ffb0 	bl	200002b8 <delay_250ns>
	for(i = 0; i < delays; i++)
20000358:	68fb      	ldr	r3, [r7, #12]
2000035a:	3301      	adds	r3, #1
2000035c:	60fb      	str	r3, [r7, #12]
2000035e:	68fa      	ldr	r2, [r7, #12]
20000360:	68bb      	ldr	r3, [r7, #8]
20000362:	429a      	cmp	r2, r3
20000364:	d3f6      	bcc.n	20000354 <delay_milli+0x2e>
	}
20000366:	46c0      	nop			; (mov r8, r8)
20000368:	46bd      	mov	sp, r7
2000036a:	b004      	add	sp, #16
2000036c:	bd80      	pop	{r7, pc}
2000036e:	46c0      	nop			; (mov r8, r8)

20000370 <__udivsi3>:
20000370:	2200      	movs	r2, #0
20000372:	0843      	lsrs	r3, r0, #1
20000374:	428b      	cmp	r3, r1
20000376:	d374      	bcc.n	20000462 <__udivsi3+0xf2>
20000378:	0903      	lsrs	r3, r0, #4
2000037a:	428b      	cmp	r3, r1
2000037c:	d35f      	bcc.n	2000043e <__udivsi3+0xce>
2000037e:	0a03      	lsrs	r3, r0, #8
20000380:	428b      	cmp	r3, r1
20000382:	d344      	bcc.n	2000040e <__udivsi3+0x9e>
20000384:	0b03      	lsrs	r3, r0, #12
20000386:	428b      	cmp	r3, r1
20000388:	d328      	bcc.n	200003dc <__udivsi3+0x6c>
2000038a:	0c03      	lsrs	r3, r0, #16
2000038c:	428b      	cmp	r3, r1
2000038e:	d30d      	bcc.n	200003ac <__udivsi3+0x3c>
20000390:	22ff      	movs	r2, #255	; 0xff
20000392:	0209      	lsls	r1, r1, #8
20000394:	ba12      	rev	r2, r2
20000396:	0c03      	lsrs	r3, r0, #16
20000398:	428b      	cmp	r3, r1
2000039a:	d302      	bcc.n	200003a2 <__udivsi3+0x32>
2000039c:	1212      	asrs	r2, r2, #8
2000039e:	0209      	lsls	r1, r1, #8
200003a0:	d065      	beq.n	2000046e <__udivsi3+0xfe>
200003a2:	0b03      	lsrs	r3, r0, #12
200003a4:	428b      	cmp	r3, r1
200003a6:	d319      	bcc.n	200003dc <__udivsi3+0x6c>
200003a8:	e000      	b.n	200003ac <__udivsi3+0x3c>
200003aa:	0a09      	lsrs	r1, r1, #8
200003ac:	0bc3      	lsrs	r3, r0, #15
200003ae:	428b      	cmp	r3, r1
200003b0:	d301      	bcc.n	200003b6 <__udivsi3+0x46>
200003b2:	03cb      	lsls	r3, r1, #15
200003b4:	1ac0      	subs	r0, r0, r3
200003b6:	4152      	adcs	r2, r2
200003b8:	0b83      	lsrs	r3, r0, #14
200003ba:	428b      	cmp	r3, r1
200003bc:	d301      	bcc.n	200003c2 <__udivsi3+0x52>
200003be:	038b      	lsls	r3, r1, #14
200003c0:	1ac0      	subs	r0, r0, r3
200003c2:	4152      	adcs	r2, r2
200003c4:	0b43      	lsrs	r3, r0, #13
200003c6:	428b      	cmp	r3, r1
200003c8:	d301      	bcc.n	200003ce <__udivsi3+0x5e>
200003ca:	034b      	lsls	r3, r1, #13
200003cc:	1ac0      	subs	r0, r0, r3
200003ce:	4152      	adcs	r2, r2
200003d0:	0b03      	lsrs	r3, r0, #12
200003d2:	428b      	cmp	r3, r1
200003d4:	d301      	bcc.n	200003da <__udivsi3+0x6a>
200003d6:	030b      	lsls	r3, r1, #12
200003d8:	1ac0      	subs	r0, r0, r3
200003da:	4152      	adcs	r2, r2
200003dc:	0ac3      	lsrs	r3, r0, #11
200003de:	428b      	cmp	r3, r1
200003e0:	d301      	bcc.n	200003e6 <__udivsi3+0x76>
200003e2:	02cb      	lsls	r3, r1, #11
200003e4:	1ac0      	subs	r0, r0, r3
200003e6:	4152      	adcs	r2, r2
200003e8:	0a83      	lsrs	r3, r0, #10
200003ea:	428b      	cmp	r3, r1
200003ec:	d301      	bcc.n	200003f2 <__udivsi3+0x82>
200003ee:	028b      	lsls	r3, r1, #10
200003f0:	1ac0      	subs	r0, r0, r3
200003f2:	4152      	adcs	r2, r2
200003f4:	0a43      	lsrs	r3, r0, #9
200003f6:	428b      	cmp	r3, r1
200003f8:	d301      	bcc.n	200003fe <__udivsi3+0x8e>
200003fa:	024b      	lsls	r3, r1, #9
200003fc:	1ac0      	subs	r0, r0, r3
200003fe:	4152      	adcs	r2, r2
20000400:	0a03      	lsrs	r3, r0, #8
20000402:	428b      	cmp	r3, r1
20000404:	d301      	bcc.n	2000040a <__udivsi3+0x9a>
20000406:	020b      	lsls	r3, r1, #8
20000408:	1ac0      	subs	r0, r0, r3
2000040a:	4152      	adcs	r2, r2
2000040c:	d2cd      	bcs.n	200003aa <__udivsi3+0x3a>
2000040e:	09c3      	lsrs	r3, r0, #7
20000410:	428b      	cmp	r3, r1
20000412:	d301      	bcc.n	20000418 <__udivsi3+0xa8>
20000414:	01cb      	lsls	r3, r1, #7
20000416:	1ac0      	subs	r0, r0, r3
20000418:	4152      	adcs	r2, r2
2000041a:	0983      	lsrs	r3, r0, #6
2000041c:	428b      	cmp	r3, r1
2000041e:	d301      	bcc.n	20000424 <__udivsi3+0xb4>
20000420:	018b      	lsls	r3, r1, #6
20000422:	1ac0      	subs	r0, r0, r3
20000424:	4152      	adcs	r2, r2
20000426:	0943      	lsrs	r3, r0, #5
20000428:	428b      	cmp	r3, r1
2000042a:	d301      	bcc.n	20000430 <__udivsi3+0xc0>
2000042c:	014b      	lsls	r3, r1, #5
2000042e:	1ac0      	subs	r0, r0, r3
20000430:	4152      	adcs	r2, r2
20000432:	0903      	lsrs	r3, r0, #4
20000434:	428b      	cmp	r3, r1
20000436:	d301      	bcc.n	2000043c <__udivsi3+0xcc>
20000438:	010b      	lsls	r3, r1, #4
2000043a:	1ac0      	subs	r0, r0, r3
2000043c:	4152      	adcs	r2, r2
2000043e:	08c3      	lsrs	r3, r0, #3
20000440:	428b      	cmp	r3, r1
20000442:	d301      	bcc.n	20000448 <__udivsi3+0xd8>
20000444:	00cb      	lsls	r3, r1, #3
20000446:	1ac0      	subs	r0, r0, r3
20000448:	4152      	adcs	r2, r2
2000044a:	0883      	lsrs	r3, r0, #2
2000044c:	428b      	cmp	r3, r1
2000044e:	d301      	bcc.n	20000454 <__udivsi3+0xe4>
20000450:	008b      	lsls	r3, r1, #2
20000452:	1ac0      	subs	r0, r0, r3
20000454:	4152      	adcs	r2, r2
20000456:	0843      	lsrs	r3, r0, #1
20000458:	428b      	cmp	r3, r1
2000045a:	d301      	bcc.n	20000460 <__udivsi3+0xf0>
2000045c:	004b      	lsls	r3, r1, #1
2000045e:	1ac0      	subs	r0, r0, r3
20000460:	4152      	adcs	r2, r2
20000462:	1a41      	subs	r1, r0, r1
20000464:	d200      	bcs.n	20000468 <__udivsi3+0xf8>
20000466:	4601      	mov	r1, r0
20000468:	4152      	adcs	r2, r2
2000046a:	4610      	mov	r0, r2
2000046c:	4770      	bx	lr
2000046e:	e7ff      	b.n	20000470 <__udivsi3+0x100>
20000470:	b501      	push	{r0, lr}
20000472:	2000      	movs	r0, #0
20000474:	f000 f806 	bl	20000484 <__aeabi_idiv0>
20000478:	bd02      	pop	{r1, pc}
2000047a:	46c0      	nop			; (mov r8, r8)

2000047c <__aeabi_uidivmod>:
2000047c:	2900      	cmp	r1, #0
2000047e:	d0f7      	beq.n	20000470 <__udivsi3+0x100>
20000480:	e776      	b.n	20000370 <__udivsi3>
20000482:	4770      	bx	lr

20000484 <__aeabi_idiv0>:
20000484:	4770      	bx	lr
20000486:	46c0      	nop			; (mov r8, r8)
20000488:	0a030201 	beq	200c0c94 <__aeabi_idiv0+0xc0810>
2000048c:	0b060504 	bleq	201818a4 <__aeabi_idiv0+0x181420>
20000490:	0c090807 	stceq	8, cr0, [r9], {7}
20000494:	0d0f000e 	stceq	0, cr0, [pc, #-56]	; 20000464 <__udivsi3+0xf4>
20000498:	0006003f 	andeq	r0, r6, pc, lsr r0
2000049c:	004f005b 	subeq	r0, pc, fp, asr r0	; <UNPREDICTABLE>
200004a0:	006d0066 	rsbeq	r0, sp, r6, rrx
200004a4:	0007007d 	andeq	r0, r7, sp, ror r0
200004a8:	006f007f 	rsbeq	r0, pc, pc, ror r0	; <UNPREDICTABLE>
200004ac:	007c0077 	rsbseq	r0, ip, r7, ror r0
200004b0:	005e0058 	subseq	r0, lr, r8, asr r0
200004b4:	00760080 	rsbseq	r0, r6, r0, lsl #1

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	00000171 	andeq	r0, r0, r1, ror r1
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	00000065 	andeq	r0, r0, r5, rrx
  10:	0000120c 	andeq	r1, r0, ip, lsl #4
	...
  20:	06010200 	streq	r0, [r1], -r0, lsl #4
  24:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
  28:	00000003 	andeq	r0, r0, r3
  2c:	332b0200 			; <UNDEFINED> instruction: 0x332b0200
  30:	02000000 	andeq	r0, r0, #0
  34:	00fd0801 	rscseq	r0, sp, r1, lsl #16
  38:	02020000 	andeq	r0, r2, #0
  3c:	0001a805 	andeq	sl, r1, r5, lsl #16
  40:	013b0300 	teqeq	fp, r0, lsl #6
  44:	39020000 	stmdbcc	r2, {}	; <UNPREDICTABLE>
  48:	0000004c 	andeq	r0, r0, ip, asr #32
  4c:	17070202 	strne	r0, [r7, -r2, lsl #4]
  50:	02000001 	andeq	r0, r0, #1
  54:	01980504 	orrseq	r0, r8, r4, lsl #10
  58:	46030000 	strmi	r0, [r3], -r0
  5c:	02000001 	andeq	r0, r0, #1
  60:	0000654f 	andeq	r6, r0, pc, asr #10
  64:	07040200 	streq	r0, [r4, -r0, lsl #4]
  68:	0000016a 	andeq	r0, r0, sl, ror #2
  6c:	93050802 	movwls	r0, #22530	; 0x5802
  70:	02000001 	andeq	r0, r0, #1
  74:	01650708 	cmneq	r5, r8, lsl #14
  78:	04040000 	streq	r0, [r4], #-0
  7c:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
  80:	07040200 	streq	r0, [r4, -r0, lsl #4]
  84:	0000016f 	andeq	r0, r0, pc, ror #2
  88:	00000203 	andeq	r0, r0, r3, lsl #4
  8c:	28180300 	ldmdacs	r8, {r8, r9}
  90:	03000000 	movweq	r0, #0
  94:	0000013d 	andeq	r0, r0, sp, lsr r1
  98:	00412403 	subeq	r2, r1, r3, lsl #8
  9c:	48030000 	stmdami	r3, {}	; <UNPREDICTABLE>
  a0:	03000001 	movweq	r0, #1
  a4:	00005a30 	andeq	r5, r0, r0, lsr sl
  a8:	04180500 	ldreq	r0, [r8], #-1280	; 0xfffffb00
  ac:	00013609 	andeq	r3, r1, r9, lsl #12
  b0:	01b20600 			; <UNDEFINED> instruction: 0x01b20600
  b4:	0a040000 	beq	1000bc <startup-0x1fefff44>
  b8:	0000009e 	muleq	r0, lr, r0
  bc:	004b0600 	subeq	r0, fp, r0, lsl #12
  c0:	0b040000 	bleq	1000c8 <startup-0x1fefff38>
  c4:	00000093 	muleq	r0, r3, r0
  c8:	005a0604 	subseq	r0, sl, r4, lsl #12
  cc:	0c040000 	stceq	0, cr0, [r4], {-0}
  d0:	00000093 	muleq	r0, r3, r0
  d4:	000a0606 	andeq	r0, sl, r6, lsl #12
  d8:	0d040000 	stceq	0, cr0, [r4, #-0]
  dc:	0000009e 	muleq	r0, lr, r0
  e0:	01510608 	cmpeq	r1, r8, lsl #12
  e4:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
  e8:	0000009e 	muleq	r0, lr, r0
  ec:	01a1060c 			; <UNDEFINED> instruction: 0x01a1060c
  f0:	0f040000 	svceq	0x00040000
  f4:	00000088 	andeq	r0, r0, r8, lsl #1
  f8:	01830610 	orreq	r0, r3, r0, lsl r6
  fc:	10040000 	andne	r0, r4, r0
 100:	00000088 	andeq	r0, r0, r8, lsl #1
 104:	012f0611 			; <UNDEFINED> instruction: 0x012f0611
 108:	11040000 	mrsne	r0, (UNDEF: 4)
 10c:	00000093 	muleq	r0, r3, r0
 110:	017c0612 	cmneq	ip, r2, lsl r6
 114:	12040000 	andne	r0, r4, #0
 118:	00000088 	andeq	r0, r0, r8, lsl #1
 11c:	00520614 	subseq	r0, r2, r4, lsl r6
 120:	13040000 	movwne	r0, #16384	; 0x4000
 124:	00000088 	andeq	r0, r0, r8, lsl #1
 128:	010b0615 	tsteq	fp, r5, lsl r6
 12c:	14040000 	strne	r0, [r4], #-0
 130:	00000093 	muleq	r0, r3, r0
 134:	2a030016 	bcs	c0194 <startup-0x1ff3fe6c>
 138:	04000001 	streq	r0, [r0], #-1
 13c:	0000a915 	andeq	sl, r0, r5, lsl r9
 140:	01570700 	cmpeq	r7, r0, lsl #14
 144:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
 148:	20000028 	andcs	r0, r0, r8, lsr #32
 14c:	00000030 	andeq	r0, r0, r0, lsr r0
 150:	5c079c01 	stcpl	12, cr9, [r7], {1}
 154:	01000001 	tsteq	r0, r1
 158:	00001014 	andeq	r1, r0, r4, lsl r0
 15c:	00001820 	andeq	r1, r0, r0, lsr #16
 160:	089c0100 	ldmeq	ip, {r8}
 164:	0000018b 	andeq	r0, r0, fp, lsl #3
 168:	00000a01 	andeq	r0, r0, r1, lsl #20
 16c:	000c2000 	andeq	r2, ip, r0
 170:	9c010000 	stcls	0, cr0, [r1], {-0}
 174:	0002af00 	andeq	sl, r2, r0, lsl #30
 178:	81000400 	tsthi	r0, r0, lsl #8
 17c:	04000000 	streq	r0, [r0], #-0
 180:	00006501 	andeq	r6, r0, r1, lsl #10
 184:	01d30c00 	bicseq	r0, r3, r0, lsl #24
 188:	00580000 	subseq	r0, r8, r0
 18c:	02602000 	rsbeq	r2, r0, #0
 190:	013b0000 	teqeq	fp, r0
 194:	01020000 	mrseq	r0, (UNDEF: 2)
 198:	0000ff06 	andeq	pc, r0, r6, lsl #30
 19c:	00000300 	andeq	r0, r0, r0, lsl #6
 1a0:	2b020000 	blcs	801a8 <startup-0x1ff7fe58>
 1a4:	00000033 	andeq	r0, r0, r3, lsr r0
 1a8:	fd080102 	stc2	1, cr0, [r8, #-8]
 1ac:	02000000 	andeq	r0, r0, #0
 1b0:	01a80502 			; <UNDEFINED> instruction: 0x01a80502
 1b4:	3b030000 	blcc	c01bc <startup-0x1ff3fe44>
 1b8:	02000001 	andeq	r0, r0, #1
 1bc:	00004c39 	andeq	r4, r0, r9, lsr ip
 1c0:	07020200 	streq	r0, [r2, -r0, lsl #4]
 1c4:	00000117 	andeq	r0, r0, r7, lsl r1
 1c8:	98050402 	stmdals	r5, {r1, sl}
 1cc:	03000001 	movweq	r0, #1
 1d0:	00000146 	andeq	r0, r0, r6, asr #2
 1d4:	00654f02 	rsbeq	r4, r5, r2, lsl #30
 1d8:	04020000 	streq	r0, [r2], #-0
 1dc:	00016a07 	andeq	r6, r1, r7, lsl #20
 1e0:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
 1e4:	00000193 	muleq	r0, r3, r1
 1e8:	65070802 	strvs	r0, [r7, #-2050]	; 0xfffff7fe
 1ec:	04000001 	streq	r0, [r0], #-1
 1f0:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
 1f4:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
 1f8:	00016f07 	andeq	r6, r1, r7, lsl #30
 1fc:	00020300 	andeq	r0, r2, r0, lsl #6
 200:	18030000 	stmdane	r3, {}	; <UNPREDICTABLE>
 204:	00000028 	andeq	r0, r0, r8, lsr #32
 208:	00013d03 	andeq	r3, r1, r3, lsl #26
 20c:	41240300 			; <UNDEFINED> instruction: 0x41240300
 210:	03000000 	movweq	r0, #0
 214:	00000148 	andeq	r0, r0, r8, asr #2
 218:	005a3003 	subseq	r3, sl, r3
 21c:	18050000 	stmdane	r5, {}	; <UNPREDICTABLE>
 220:	01360904 	teqeq	r6, r4, lsl #18
 224:	b2060000 	andlt	r0, r6, #0
 228:	04000001 	streq	r0, [r0], #-1
 22c:	00009e0a 	andeq	r9, r0, sl, lsl #28
 230:	4b060000 	blmi	180238 <startup-0x1fe7fdc8>
 234:	04000000 	streq	r0, [r0], #-0
 238:	0000930b 	andeq	r9, r0, fp, lsl #6
 23c:	5a060400 	bpl	181244 <startup-0x1fe7edbc>
 240:	04000000 	streq	r0, [r0], #-0
 244:	0000930c 	andeq	r9, r0, ip, lsl #6
 248:	0a060600 	beq	181a50 <startup-0x1fe7e5b0>
 24c:	04000000 	streq	r0, [r0], #-0
 250:	00009e0d 	andeq	r9, r0, sp, lsl #28
 254:	51060800 	tstpl	r6, r0, lsl #16
 258:	04000001 	streq	r0, [r0], #-1
 25c:	00009e0e 	andeq	r9, r0, lr, lsl #28
 260:	a1060c00 	tstge	r6, r0, lsl #24
 264:	04000001 	streq	r0, [r0], #-1
 268:	0000880f 	andeq	r8, r0, pc, lsl #16
 26c:	83061000 	movwhi	r1, #24576	; 0x6000
 270:	04000001 	streq	r0, [r0], #-1
 274:	00008810 	andeq	r8, r0, r0, lsl r8
 278:	2f061100 	svccs	0x00061100
 27c:	04000001 	streq	r0, [r0], #-1
 280:	00009311 	andeq	r9, r0, r1, lsl r3
 284:	7c061200 	sfmvc	f1, 4, [r6], {-0}
 288:	04000001 	streq	r0, [r0], #-1
 28c:	00008812 	andeq	r8, r0, r2, lsl r8
 290:	52061400 	andpl	r1, r6, #0, 8
 294:	04000000 	streq	r0, [r0], #-0
 298:	00008813 	andeq	r8, r0, r3, lsl r8
 29c:	0b061500 	bleq	1856a4 <startup-0x1fe7a95c>
 2a0:	04000001 	streq	r0, [r0], #-1
 2a4:	00009314 	andeq	r9, r0, r4, lsl r3
 2a8:	03001600 	movweq	r1, #1536	; 0x600
 2ac:	0000012a 	andeq	r0, r0, sl, lsr #2
 2b0:	00a91504 	adceq	r1, r9, r4, lsl #10
 2b4:	37070000 	strcc	r0, [r7, -r0]
 2b8:	01000002 	tsteq	r0, r2
 2bc:	00003363 	andeq	r3, r0, r3, ror #6
 2c0:	00026600 	andeq	r6, r2, r0, lsl #12
 2c4:	00005220 	andeq	r5, r0, r0, lsr #4
 2c8:	699c0100 	ldmibvs	ip, {r8}
 2cc:	08000001 	stmdaeq	r0, {r0}
 2d0:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
 2d4:	01696301 	cmneq	r9, r1, lsl #6
 2d8:	91020000 	mrsls	r0, (UNDEF: 2)
 2dc:	04090074 	streq	r0, [r9], #-116	; 0xffffff8c
 2e0:	00000136 	andeq	r0, r0, r6, lsr r1
 2e4:	0001c30a 	andeq	ip, r1, sl, lsl #6
 2e8:	505e0100 	subspl	r0, lr, r0, lsl #2
 2ec:	16200002 	strtne	r0, [r0], -r2
 2f0:	01000000 	mrseq	r0, (UNDEF: 0)
 2f4:	0001939c 	muleq	r1, ip, r3
 2f8:	01b80800 			; <UNDEFINED> instruction: 0x01b80800
 2fc:	5e010000 	cdppl	0, 0, cr0, cr1, cr0, {0}
 300:	00000169 	andeq	r0, r0, r9, ror #2
 304:	00749102 	rsbseq	r9, r4, r2, lsl #2
 308:	0002400a 	andeq	r4, r2, sl
 30c:	00540100 	subseq	r0, r4, r0, lsl #2
 310:	50200002 	eorpl	r0, r0, r2
 314:	01000000 	mrseq	r0, (UNDEF: 0)
 318:	0001c59c 	muleq	r1, ip, r5
 31c:	01b80800 			; <UNDEFINED> instruction: 0x01b80800
 320:	54010000 	strpl	r0, [r1], #-0
 324:	00000169 	andeq	r0, r0, r9, ror #2
 328:	0b749102 	bleq	1d24738 <startup-0x1e2db8c8>
 32c:	00776f72 	rsbseq	r6, r7, r2, ror pc
 330:	00335401 	eorseq	r5, r3, r1, lsl #8
 334:	91020000 	mrsls	r0, (UNDEF: 2)
 338:	2f0a0073 	svccs	0x000a0073
 33c:	01000002 	tsteq	r0, r2
 340:	0001b038 	andeq	fp, r1, r8, lsr r0
 344:	00005020 	andeq	r5, r0, r0, lsr #32
 348:	039c0100 	orrseq	r0, ip, #0, 2
 34c:	08000002 	stmdaeq	r0, {r1}
 350:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
 354:	01693801 	cmneq	r9, r1, lsl #16
 358:	91020000 	mrsls	r0, (UNDEF: 2)
 35c:	00630b4c 	rsbeq	r0, r3, ip, asr #22
 360:	00333801 	eorseq	r3, r3, r1, lsl #16
 364:	91020000 	mrsls	r0, (UNDEF: 2)
 368:	021a0c4b 	andseq	r0, sl, #19200	; 0x4b00
 36c:	3a010000 	bcc	40374 <startup-0x1ffbfc8c>
 370:	00000203 	andeq	r0, r0, r3, lsl #4
 374:	00509102 	subseq	r9, r0, r2, lsl #2
 378:	00004c0d 	andeq	r4, r0, sp, lsl #24
 37c:	00021300 	andeq	r1, r2, r0, lsl #6
 380:	02130e00 	andseq	r0, r3, #0, 28
 384:	000f0000 	andeq	r0, pc, r0
 388:	26070402 	strcs	r0, [r7], -r2, lsl #8
 38c:	0f000002 	svceq	0x00000002
 390:	00000221 	andeq	r0, r0, r1, lsr #4
 394:	00332401 	eorseq	r2, r3, r1, lsl #8
 398:	01200000 			; <UNDEFINED> instruction: 0x01200000
 39c:	00902000 	addseq	r2, r0, r0
 3a0:	9c010000 	stcls	0, cr0, [r1], {-0}
 3a4:	0000025e 	andeq	r0, r0, lr, asr r2
 3a8:	0001be0c 	andeq	fp, r1, ip, lsl #28
 3ac:	5e260100 	sufpls	f0, f6, f0
 3b0:	02000002 	andeq	r0, r0, #2
 3b4:	72105c91 	andsvc	r5, r0, #37120	; 0x9100
 3b8:	0100776f 	tsteq	r0, pc, ror #14
 3bc:	0000332c 	andeq	r3, r0, ip, lsr #6
 3c0:	6f910200 	svcvs	0x00910200
 3c4:	6c6f6310 	stclvs	3, cr6, [pc], #-64	; 38c <startup-0x1ffffc74>
 3c8:	332c0100 			; <UNDEFINED> instruction: 0x332c0100
 3cc:	02000000 	andeq	r0, r0, #0
 3d0:	0d006e91 	stceq	14, cr6, [r0, #-580]	; 0xfffffdbc
 3d4:	00000033 	andeq	r0, r0, r3, lsr r0
 3d8:	0000026e 	andeq	r0, r0, lr, ror #4
 3dc:	0002130e 	andeq	r1, r2, lr, lsl #6
 3e0:	0a000f00 	beq	3fe8 <startup-0x1fffc018>
 3e4:	0000024d 	andeq	r0, r0, sp, asr #4
 3e8:	00bc1501 	adcseq	r1, ip, r1, lsl #10
 3ec:	00642000 	rsbeq	r2, r4, r0
 3f0:	9c010000 	stcls	0, cr0, [r1], {-0}
 3f4:	00000292 	muleq	r0, r2, r2
 3f8:	0001b808 	andeq	fp, r1, r8, lsl #16
 3fc:	69150100 	ldmdbvs	r5, {r8}
 400:	02000001 	andeq	r0, r0, #1
 404:	11007491 			; <UNDEFINED> instruction: 0x11007491
 408:	00000209 	andeq	r0, r0, r9, lsl #4
 40c:	00580301 	subseq	r0, r8, r1, lsl #6
 410:	00642000 	rsbeq	r2, r4, r0
 414:	9c010000 	stcls	0, cr0, [r1], {-0}
 418:	0001b808 	andeq	fp, r1, r8, lsl #16
 41c:	69030100 	stmdbvs	r3, {r8}
 420:	02000001 	andeq	r0, r0, #1
 424:	00007491 	muleq	r0, r1, r4
 428:	00000149 	andeq	r0, r0, r9, asr #2
 42c:	01930004 	orrseq	r0, r3, r4
 430:	01040000 	mrseq	r0, (UNDEF: 4)
 434:	00000065 	andeq	r0, r0, r5, rrx
 438:	0002680c 	andeq	r6, r2, ip, lsl #16
 43c:	0002b800 	andeq	fp, r2, r0, lsl #16
 440:	0000b620 	andeq	fp, r0, r0, lsr #12
 444:	0002a700 	andeq	sl, r2, r0, lsl #14
 448:	06010200 	streq	r0, [r1], -r0, lsl #4
 44c:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
 450:	fd080102 	stc2	1, cr0, [r8, #-8]
 454:	02000000 	andeq	r0, r0, #0
 458:	01a80502 			; <UNDEFINED> instruction: 0x01a80502
 45c:	02020000 	andeq	r0, r2, #0
 460:	00011707 	andeq	r1, r1, r7, lsl #14
 464:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
 468:	00000198 	muleq	r0, r8, r1
 46c:	00014603 	andeq	r4, r1, r3, lsl #12
 470:	4f4f0200 	svcmi	0x004f0200
 474:	02000000 	andeq	r0, r0, #0
 478:	016a0704 	cmneq	sl, r4, lsl #14
 47c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
 480:	00019305 	andeq	r9, r1, r5, lsl #6
 484:	07080200 	streq	r0, [r8, -r0, lsl #4]
 488:	00000165 	andeq	r0, r0, r5, ror #2
 48c:	69050404 	stmdbvs	r5, {r2, sl}
 490:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
 494:	016f0704 	cmneq	pc, r4, lsl #14
 498:	48030000 	stmdami	r3, {}	; <UNPREDICTABLE>
 49c:	03000001 	movweq	r0, #1
 4a0:	00004430 	andeq	r4, r0, r0, lsr r4
 4a4:	04100500 	ldreq	r0, [r0], #-1280	; 0xfffffb00
 4a8:	0000b605 	andeq	fp, r0, r5, lsl #12
 4ac:	02b50600 	adcseq	r0, r5, #0, 12
 4b0:	06040000 	streq	r0, [r4], -r0
 4b4:	00000072 	andeq	r0, r0, r2, ror r0
 4b8:	02be0600 	adcseq	r0, lr, #0, 12
 4bc:	07040000 	streq	r0, [r4, -r0]
 4c0:	00000072 	andeq	r0, r0, r2, ror r0
 4c4:	02ad0604 	adceq	r0, sp, #4, 12	; 0x400000
 4c8:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
 4cc:	00000072 	andeq	r0, r0, r2, ror r0
 4d0:	02a30608 	adceq	r0, r3, #8, 12	; 0x800000
 4d4:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
 4d8:	00000072 	andeq	r0, r0, r2, ror r0
 4dc:	6003000c 	andvs	r0, r3, ip
 4e0:	04000002 	streq	r0, [r0], #-2
 4e4:	00007d0a 	andeq	r7, r0, sl, lsl #26
 4e8:	02e60700 	rsceq	r0, r6, #0, 14
 4ec:	50010000 	andpl	r0, r1, r0
 4f0:	20000326 	andcs	r0, r0, r6, lsr #6
 4f4:	00000048 	andeq	r0, r0, r8, asr #32
 4f8:	00fe9c01 	rscseq	r9, lr, r1, lsl #24
 4fc:	6d080000 	stcvs	0, cr0, [r8, #-0]
 500:	50010073 	andpl	r0, r1, r3, ror r0
 504:	0000006b 	andeq	r0, r0, fp, rrx
 508:	096c9102 	stmdbeq	ip!, {r1, r8, ip, pc}^
 50c:	000002df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
 510:	006b5701 	rsbeq	r5, fp, r1, lsl #14
 514:	91020000 	mrsls	r0, (UNDEF: 2)
 518:	00690a70 	rsbeq	r0, r9, r0, ror sl
 51c:	006b5801 	rsbeq	r5, fp, r1, lsl #16
 520:	91020000 	mrsls	r0, (UNDEF: 2)
 524:	c7070074 	smlsdxgt	r7, r4, r0, r0
 528:	01000002 	tsteq	r0, r2
 52c:	0002f83b 	andeq	pc, r2, fp, lsr r8	; <UNPREDICTABLE>
 530:	00002e20 	andeq	r2, r0, r0, lsr #28
 534:	3b9c0100 	blcc	fe70093c <__aeabi_idiv0+0xde7004b8>
 538:	08000001 	stmdaeq	r0, {r0}
 53c:	01007375 	tsteq	r0, r5, ror r3
 540:	00006b3b 	andeq	r6, r0, fp, lsr fp
 544:	6c910200 	lfmvs	f0, 4, [r1], {0}
 548:	0002df09 	andeq	sp, r2, r9, lsl #30
 54c:	6b3e0100 	blvs	f80954 <startup-0x1f07f6ac>
 550:	02000000 	andeq	r0, r0, #0
 554:	690a7091 	stmdbvs	sl, {r0, r4, r7, ip, sp, lr}
 558:	6b3f0100 	blvs	fc0960 <startup-0x1f03f6a0>
 55c:	02000000 	andeq	r0, r0, #0
 560:	0b007491 	bleq	1d7ac <startup-0x1ffe2854>
 564:	000002d3 	ldrdeq	r0, [r0], -r3
 568:	02b80701 	adcseq	r0, r8, #262144	; 0x40000
 56c:	00402000 	subeq	r2, r0, r0
 570:	9c010000 	stcls	0, cr0, [r1], {-0}
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	1117550e 	tstne	r7, lr, lsl #10
   c:	00171001 	andseq	r1, r7, r1
  10:	00240200 	eoreq	r0, r4, r0, lsl #4
  14:	0b3e0b0b 	bleq	f82c48 <startup-0x1f07d3b8>
  18:	00000e03 	andeq	r0, r0, r3, lsl #28
  1c:	03001603 	movweq	r1, #1539	; 0x603
  20:	3b0b3a0e 	blcc	2ce860 <startup-0x1fd317a0>
  24:	0013490b 	andseq	r4, r3, fp, lsl #18
  28:	00240400 	eoreq	r0, r4, r0, lsl #8
  2c:	0b3e0b0b 	bleq	f82c60 <startup-0x1f07d3a0>
  30:	00000803 	andeq	r0, r0, r3, lsl #16
  34:	0b011305 	bleq	44c50 <startup-0x1ffbb3b0>
  38:	3b0b3a0b 	blcc	2ce86c <startup-0x1fd31794>
  3c:	0013010b 	andseq	r0, r3, fp, lsl #2
  40:	000d0600 	andeq	r0, sp, r0, lsl #12
  44:	0b3a0e03 	bleq	e83858 <startup-0x1f17c7a8>
  48:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  4c:	00000b38 	andeq	r0, r0, r8, lsr fp
  50:	3f002e07 	svccc	0x00002e07
  54:	3a0e0319 	bcc	380cc0 <startup-0x1fc7f340>
  58:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
  5c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
  60:	96184006 	ldrls	r4, [r8], -r6
  64:	00001942 	andeq	r1, r0, r2, asr #18
  68:	3f002e08 	svccc	0x00002e08
  6c:	3a0e0319 	bcc	380cd8 <startup-0x1fc7f328>
  70:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
  74:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
  78:	97184006 	ldrls	r4, [r8, -r6]
  7c:	00001942 	andeq	r1, r0, r2, asr #18
  80:	01110100 	tsteq	r1, r0, lsl #2
  84:	0b130e25 	bleq	4c3920 <startup-0x1fb3c6e0>
  88:	01110e03 	tsteq	r1, r3, lsl #28
  8c:	17100612 			; <UNDEFINED> instruction: 0x17100612
  90:	24020000 	strcs	r0, [r2], #-0
  94:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  98:	000e030b 	andeq	r0, lr, fp, lsl #6
  9c:	00160300 	andseq	r0, r6, r0, lsl #6
  a0:	0b3a0e03 	bleq	e838b4 <startup-0x1f17c74c>
  a4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  a8:	24040000 	strcs	r0, [r4], #-0
  ac:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  b0:	0008030b 	andeq	r0, r8, fp, lsl #6
  b4:	01130500 	tsteq	r3, r0, lsl #10
  b8:	0b3a0b0b 	bleq	e82cec <startup-0x1f17d314>
  bc:	13010b3b 	movwne	r0, #6971	; 0x1b3b
  c0:	0d060000 	stceq	0, cr0, [r6, #-0]
  c4:	3a0e0300 	bcc	380ccc <startup-0x1fc7f334>
  c8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  cc:	000b3813 	andeq	r3, fp, r3, lsl r8
  d0:	012e0700 			; <UNDEFINED> instruction: 0x012e0700
  d4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  d8:	0b3b0b3a 	bleq	ec2dc8 <startup-0x1f13d238>
  dc:	13491927 	movtne	r1, #39207	; 0x9927
  e0:	06120111 			; <UNDEFINED> instruction: 0x06120111
  e4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
  e8:	00130119 	andseq	r0, r3, r9, lsl r1
  ec:	00050800 	andeq	r0, r5, r0, lsl #16
  f0:	0b3a0e03 	bleq	e83904 <startup-0x1f17c6fc>
  f4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  f8:	00001802 	andeq	r1, r0, r2, lsl #16
  fc:	0b000f09 	bleq	3d28 <startup-0x1fffc2d8>
 100:	0013490b 	andseq	r4, r3, fp, lsl #18
 104:	012e0a00 			; <UNDEFINED> instruction: 0x012e0a00
 108:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 10c:	0b3b0b3a 	bleq	ec2dfc <startup-0x1f13d204>
 110:	01111927 	tsteq	r1, r7, lsr #18
 114:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 118:	01194297 			; <UNDEFINED> instruction: 0x01194297
 11c:	0b000013 	bleq	170 <startup-0x1ffffe90>
 120:	08030005 	stmdaeq	r3, {r0, r2}
 124:	0b3b0b3a 	bleq	ec2e14 <startup-0x1f13d1ec>
 128:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 12c:	340c0000 	strcc	r0, [ip], #-0
 130:	3a0e0300 	bcc	380d38 <startup-0x1fc7f2c8>
 134:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 138:	00180213 	andseq	r0, r8, r3, lsl r2
 13c:	01010d00 	tsteq	r1, r0, lsl #26
 140:	13011349 	movwne	r1, #4937	; 0x1349
 144:	210e0000 	mrscs	r0, (UNDEF: 14)
 148:	2f134900 	svccs	0x00134900
 14c:	0f00000b 	svceq	0x0000000b
 150:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 154:	0b3a0e03 	bleq	e83968 <startup-0x1f17c698>
 158:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 15c:	01111349 	tsteq	r1, r9, asr #6
 160:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 164:	01194296 			; <UNDEFINED> instruction: 0x01194296
 168:	10000013 	andne	r0, r0, r3, lsl r0
 16c:	08030034 	stmdaeq	r3, {r2, r4, r5}
 170:	0b3b0b3a 	bleq	ec2e60 <startup-0x1f13d1a0>
 174:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 178:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
 17c:	03193f01 	tsteq	r9, #1, 30
 180:	3b0b3a0e 	blcc	2ce9c0 <startup-0x1fd31640>
 184:	1119270b 	tstne	r9, fp, lsl #14
 188:	40061201 	andmi	r1, r6, r1, lsl #4
 18c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 190:	01000000 	mrseq	r0, (UNDEF: 0)
 194:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 198:	0e030b13 	vmoveq.32	d3[0], r0
 19c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 1a0:	00001710 	andeq	r1, r0, r0, lsl r7
 1a4:	0b002402 	bleq	91b4 <startup-0x1fff6e4c>
 1a8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 1ac:	0300000e 	movweq	r0, #14
 1b0:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 1b4:	0b3b0b3a 	bleq	ec2ea4 <startup-0x1f13d15c>
 1b8:	00001349 	andeq	r1, r0, r9, asr #6
 1bc:	0b002404 	bleq	91d4 <startup-0x1fff6e2c>
 1c0:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 1c4:	05000008 	streq	r0, [r0, #-8]
 1c8:	0b0b0113 	bleq	2c061c <startup-0x1fd3f9e4>
 1cc:	0b3b0b3a 	bleq	ec2ebc <startup-0x1f13d144>
 1d0:	00001301 	andeq	r1, r0, r1, lsl #6
 1d4:	03000d06 	movweq	r0, #3334	; 0xd06
 1d8:	3b0b3a0e 	blcc	2cea18 <startup-0x1fd315e8>
 1dc:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 1e0:	0700000b 	streq	r0, [r0, -fp]
 1e4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 1e8:	0b3a0e03 	bleq	e839fc <startup-0x1f17c604>
 1ec:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 1f0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 1f4:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 1f8:	00130119 	andseq	r0, r3, r9, lsl r1
 1fc:	00050800 	andeq	r0, r5, r0, lsl #16
 200:	0b3a0803 	bleq	e82214 <startup-0x1f17ddec>
 204:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 208:	00001802 	andeq	r1, r0, r2, lsl #16
 20c:	03003409 	movweq	r3, #1033	; 0x409
 210:	3b0b3a0e 	blcc	2cea50 <startup-0x1fd315b0>
 214:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 218:	0a000018 	beq	280 <startup-0x1ffffd80>
 21c:	08030034 	stmdaeq	r3, {r2, r4, r5}
 220:	0b3b0b3a 	bleq	ec2f10 <startup-0x1f13d0f0>
 224:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 228:	2e0b0000 	cdpcs	0, 0, cr0, cr11, cr0, {0}
 22c:	03193f00 	tsteq	r9, #0, 30
 230:	3b0b3a0e 	blcc	2cea70 <startup-0x1fd31590>
 234:	1119270b 	tstne	r9, fp, lsl #14
 238:	40061201 	andmi	r1, r6, r1, lsl #4
 23c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 240:	Address 0x00000240 is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	00000048 	andeq	r0, r0, r8, asr #32
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...
  28:	0000001c 	andeq	r0, r0, ip, lsl r0
  2c:	01750002 	cmneq	r5, r2
  30:	00040000 	andeq	r0, r4, r0
  34:	00000000 	andeq	r0, r0, r0
  38:	20000058 	andcs	r0, r0, r8, asr r0
  3c:	00000260 	andeq	r0, r0, r0, ror #4
	...
  48:	0000001c 	andeq	r0, r0, ip, lsl r0
  4c:	04280002 	strteq	r0, [r8], #-2
  50:	00040000 	andeq	r0, r4, r0
  54:	00000000 	andeq	r0, r0, r0
  58:	200002b8 			; <UNDEFINED> instruction: 0x200002b8
  5c:	000000b6 	strheq	r0, [r0], -r6
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	20000058 	andcs	r0, r0, r8, asr r0
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	00000137 	andeq	r0, r0, r7, lsr r1
   4:	00f40002 	rscseq	r0, r4, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	45010000 	strmi	r0, [r1, #-0]
  1c:	41442f3a 	cmpmi	r4, sl, lsr pc
  20:	37313054 			; <UNDEFINED> instruction: 0x37313054
  24:	646f432f 	strbtvs	r4, [pc], #-815	; 2c <startup-0x1fffffd4>
  28:	74694c65 	strbtvc	r4, [r9], #-3173	; 0xfffff39b
  2c:	69662065 	stmdbvs	r6!, {r0, r2, r5, r6, sp}^
  30:	2f73656c 	svccs	0x0073656c
  34:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
  38:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
  3c:	6f697461 	svcvs	0x00697461
  40:	2f72656e 	svccs	0x0072656e
  44:	616c6564 	cmnvs	ip, r4, ror #10
  48:	3a630079 	bcc	18c0234 <startup-0x1e73fdcc>
  4c:	6573635c 	ldrbvs	r6, [r3, #-860]!	; 0xfffffca4
  50:	5c707061 	ldclpl	0, cr7, [r0], #-388	; 0xfffffe7c
  54:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
  58:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
  5c:	6f6f745c 	svcvs	0x006f745c
  60:	675c736c 	ldrbvs	r7, [ip, -ip, ror #6]
  64:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
  68:	615c6d72 	cmpvs	ip, r2, ror sp
  6c:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
  70:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
  74:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
  78:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
  7c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
  80:	63616d5c 	cmnvs	r1, #92, 26	; 0x1700
  84:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
  88:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
  8c:	61657363 	cmnvs	r5, r3, ror #6
  90:	635c7070 	cmpvs	ip, #112	; 0x70
  94:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
  98:	5c657469 	cfstrdpl	mvd7, [r5], #-420	; 0xfffffe5c
  9c:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; fffffed4 <__aeabi_idiv0+0xdffffa50>
  a0:	63675c73 	cmnvs	r7, #29440	; 0x7300
  a4:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
  a8:	72615c6d 	rsbvc	r5, r1, #27904	; 0x6d00
  ac:	6f6e2d6d 	svcvs	0x006e2d6d
  b0:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
  b4:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
  b8:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
  bc:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
  c0:	00737973 	rsbseq	r7, r3, r3, ror r9
  c4:	61747300 	cmnvs	r4, r0, lsl #6
  c8:	70757472 	rsbsvc	r7, r5, r2, ror r4
  cc:	0100632e 	tsteq	r0, lr, lsr #6
  d0:	645f0000 	ldrbvs	r0, [pc], #-0	; d8 <startup-0x1fffff28>
  d4:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
  d8:	745f746c 	ldrbvc	r7, [pc], #-1132	; e0 <startup-0x1fffff20>
  dc:	73657079 	cmnvc	r5, #121	; 0x79
  e0:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
  e4:	735f0000 	cmpvc	pc, #0
  e8:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
  ec:	00682e74 	rsbeq	r2, r8, r4, ror lr
  f0:	67000003 	strvs	r0, [r0, -r3]
  f4:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
  f8:	00010068 	andeq	r0, r1, r8, rrx
  fc:	05000000 	streq	r0, [r0, #-0]
 100:	00000002 	andeq	r0, r0, r2
 104:	010a0320 	tsteq	sl, r0, lsr #6
 108:	03025e13 	movweq	r5, #11795	; 0x2e13
 10c:	00010100 	andeq	r0, r1, r0, lsl #2
 110:	00100205 	andseq	r0, r0, r5, lsl #4
 114:	14032000 	strne	r2, [r3], #-0
 118:	694b2f01 	stmdbvs	fp, {r0, r8, r9, sl, fp, sp}^
 11c:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
 120:	02003101 	andeq	r3, r0, #1073741824	; 0x40000000
 124:	003e0104 	eorseq	r0, lr, r4, lsl #2
 128:	59010402 	stmdbpl	r1, {r1, sl}
 12c:	01040200 	mrseq	r0, R12_usr
 130:	0402003e 	streq	r0, [r2], #-62	; 0xffffffc2
 134:	04025301 	streq	r5, [r2], #-769	; 0xfffffcff
 138:	68010100 	stmdavs	r1, {r8}
 13c:	02000001 	andeq	r0, r0, #1
 140:	0000f100 	andeq	pc, r0, r0, lsl #2
 144:	fb010200 	blx	4094e <startup-0x1ffbf6b2>
 148:	01000d0e 	tsteq	r0, lr, lsl #26
 14c:	00010101 	andeq	r0, r1, r1, lsl #2
 150:	00010000 	andeq	r0, r1, r0
 154:	3a450100 	bcc	114055c <startup-0x1eebfaa4>
 158:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
 15c:	2f373130 	svccs	0x00373130
 160:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
 164:	6574694c 	ldrbvs	r6, [r4, #-2380]!	; 0xfffff6b4
 168:	6c696620 	stclvs	6, cr6, [r9], #-128	; 0xffffff80
 16c:	4d2f7365 	stcmi	3, cr7, [pc, #-404]!	; ffffffe0 <__aeabi_idiv0+0xdffffb5c>
 170:	616c706f 	cmnvs	ip, pc, rrx
 174:	61726f62 	cmnvs	r2, r2, ror #30
 178:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 17c:	642f7265 	strtvs	r7, [pc], #-613	; 184 <startup-0x1ffffe7c>
 180:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 184:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
 188:	61657363 	cmnvs	r5, r3, ror #6
 18c:	635c7070 	cmpvs	ip, #112	; 0x70
 190:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
 194:	5c657469 	cfstrdpl	mvd7, [r5], #-420	; 0xfffffe5c
 198:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; ffffffd0 <__aeabi_idiv0+0xdffffb4c>
 19c:	63675c73 	cmnvs	r7, #29440	; 0x7300
 1a0:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
 1a4:	72615c6d 	rsbvc	r5, r1, #27904	; 0x6d00
 1a8:	6f6e2d6d 	svcvs	0x006e2d6d
 1ac:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
 1b0:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
 1b4:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 1b8:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
 1bc:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
 1c0:	00656e69 	rsbeq	r6, r5, r9, ror #28
 1c4:	635c3a63 	cmpvs	ip, #405504	; 0x63000
 1c8:	70616573 	rsbvc	r6, r1, r3, ror r5
 1cc:	6f635c70 	svcvs	0x00635c70
 1d0:	696c6564 	stmdbvs	ip!, {r2, r5, r6, r8, sl, sp, lr}^
 1d4:	745c6574 	ldrbvc	r6, [ip], #-1396	; 0xfffffa8c
 1d8:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
 1dc:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
 1e0:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
 1e4:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
 1e8:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
 1ec:	61652d65 	cmnvs	r5, r5, ror #26
 1f0:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
 1f4:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
 1f8:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
 1fc:	00007379 	andeq	r7, r0, r9, ror r3
 200:	6f697067 	svcvs	0x00697067
 204:	0100632e 	tsteq	r0, lr, lsr #6
 208:	645f0000 	ldrbvs	r0, [pc], #-0	; 210 <startup-0x1ffffdf0>
 20c:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
 210:	745f746c 	ldrbvc	r7, [pc], #-1132	; 218 <startup-0x1ffffde8>
 214:	73657079 	cmnvc	r5, #121	; 0x79
 218:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
 21c:	735f0000 	cmpvc	pc, #0
 220:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
 224:	00682e74 	rsbeq	r2, r8, r4, ror lr
 228:	67000003 	strvs	r0, [r0, -r3]
 22c:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
 230:	00010068 	andeq	r0, r1, r8, rrx
 234:	05000000 	streq	r0, [r0, #-0]
 238:	00005802 	andeq	r5, r0, r2, lsl #16
 23c:	674d1520 	strbvs	r1, [sp, -r0, lsr #10]
 240:	6786756a 	strvs	r7, [r6, sl, ror #10]
 244:	674c6975 	smlsldxvs	r6, ip, r5, r9
 248:	75777569 	ldrbvc	r7, [r7, #-1385]!	; 0xfffffa97
 24c:	6d3d7767 	ldcvs	7, cr7, [sp, #-412]!	; 0xfffffe64
 250:	83834b59 	orrhi	r4, r3, #91136	; 0x16400
 254:	04020059 	streq	r0, [r2], #-89	; 0xffffffa7
 258:	0200a702 	andeq	sl, r0, #524288	; 0x80000
 25c:	74060104 	strvc	r0, [r6], #-260	; 0xfffffefc
 260:	02006006 	andeq	r6, r0, #6
 264:	93210104 			; <UNDEFINED> instruction: 0x93210104
 268:	90130375 	andsls	r0, r3, r5, ror r3
 26c:	921e404b 	andsls	r4, lr, #75	; 0x4b
 270:	037a7577 	cmneq	sl, #499122176	; 0x1dc00000
 274:	1b50207a 	blne	1408464 <startup-0x1ebf7b9c>
 278:	4c4b4b4b 	mcrrmi	11, 4, r4, fp, cr11
 27c:	4d3d4b4d 	fldmdbxmi	sp!, {d4-d41}	;@ Deprecated
 280:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
 284:	06660601 	strbteq	r0, [r6], -r1, lsl #12
 288:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
 28c:	06660601 	strbteq	r0, [r6], -r1, lsl #12
 290:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
 294:	06660601 	strbteq	r0, [r6], -r1, lsl #12
 298:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
 29c:	06660601 	strbteq	r0, [r6], -r1, lsl #12
 2a0:	0402212f 	streq	r2, [r2], #-303	; 0xfffffed1
 2a4:	4c010100 	stfmis	f0, [r1], {-0}
 2a8:	02000001 	andeq	r0, r0, #1
 2ac:	0000fb00 	andeq	pc, r0, r0, lsl #22
 2b0:	fb010200 	blx	40aba <startup-0x1ffbf546>
 2b4:	01000d0e 	tsteq	r0, lr, lsl #26
 2b8:	00010101 	andeq	r0, r1, r1, lsl #2
 2bc:	00010000 	andeq	r0, r1, r0
 2c0:	3a450100 	bcc	11406c8 <startup-0x1eebf938>
 2c4:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
 2c8:	2f373130 	svccs	0x00373130
 2cc:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
 2d0:	6574694c 	ldrbvs	r6, [r4, #-2380]!	; 0xfffff6b4
 2d4:	6c696620 	stclvs	6, cr6, [r9], #-128	; 0xffffff80
 2d8:	4d2f7365 	stcmi	3, cr7, [pc, #-404]!	; 14c <startup-0x1ffffeb4>
 2dc:	616c706f 	cmnvs	ip, pc, rrx
 2e0:	61726f62 	cmnvs	r2, r2, ror #30
 2e4:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 2e8:	642f7265 	strtvs	r7, [pc], #-613	; 2f0 <startup-0x1ffffd10>
 2ec:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 2f0:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
 2f4:	61657363 	cmnvs	r5, r3, ror #6
 2f8:	635c7070 	cmpvs	ip, #112	; 0x70
 2fc:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
 300:	5c657469 	cfstrdpl	mvd7, [r5], #-420	; 0xfffffe5c
 304:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 13c <startup-0x1ffffec4>
 308:	63675c73 	cmnvs	r7, #29440	; 0x7300
 30c:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
 310:	72615c6d 	rsbvc	r5, r1, #27904	; 0x6d00
 314:	6f6e2d6d 	svcvs	0x006e2d6d
 318:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
 31c:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
 320:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 324:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
 328:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
 32c:	00656e69 	rsbeq	r6, r5, r9, ror #28
 330:	635c3a63 	cmpvs	ip, #405504	; 0x63000
 334:	70616573 	rsbvc	r6, r1, r3, ror r5
 338:	6f635c70 	svcvs	0x00635c70
 33c:	696c6564 	stmdbvs	ip!, {r2, r5, r6, r8, sl, sp, lr}^
 340:	745c6574 	ldrbvc	r6, [ip], #-1396	; 0xfffffa8c
 344:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
 348:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
 34c:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
 350:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
 354:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
 358:	61652d65 	cmnvs	r5, r5, ror #26
 35c:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
 360:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
 364:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
 368:	00007379 	andeq	r7, r0, r9, ror r3
 36c:	5f737973 	svcpl	0x00737973
 370:	616c6564 	cmnvs	ip, r4, ror #10
 374:	00632e79 	rsbeq	r2, r3, r9, ror lr
 378:	5f000001 	svcpl	0x00000001
 37c:	61666564 	cmnvs	r6, r4, ror #10
 380:	5f746c75 	svcpl	0x00746c75
 384:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 388:	00682e73 	rsbeq	r2, r8, r3, ror lr
 38c:	5f000002 	svcpl	0x00000002
 390:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
 394:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
 398:	00000300 	andeq	r0, r0, r0, lsl #6
 39c:	5f737973 	svcpl	0x00737973
 3a0:	616c6564 	cmnvs	ip, r4, ror #10
 3a4:	00682e79 	rsbeq	r2, r8, r9, ror lr
 3a8:	00000001 	andeq	r0, r0, r1
 3ac:	b8020500 	stmdalt	r2, {r8, sl}
 3b0:	19200002 	stmdbne	r0!, {r1}
 3b4:	43424433 	movtmi	r4, #9267	; 0x2433
 3b8:	04020042 	streq	r0, [r2], #-66	; 0xffffffbe
 3bc:	06200601 	strteq	r0, [r0], -r1, lsl #12
 3c0:	0d033d6c 	stceq	13, cr3, [r3, #-432]	; 0xfffffe50
 3c4:	003e4c82 	eorseq	r4, lr, r2, lsl #25
 3c8:	3e030402 	cdpcc	4, 0, cr0, cr3, cr2, {0}
 3cc:	03040200 	movweq	r0, #16896	; 0x4200
 3d0:	0402002c 	streq	r0, [r2], #-44	; 0xffffffd4
 3d4:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
 3d8:	4a0d034e 	bmi	341118 <startup-0x1fcbeee8>
 3dc:	5a3f834c 	bpl	fe1114 <startup-0x1f01eeec>
 3e0:	03040200 	movweq	r0, #16896	; 0x4200
 3e4:	0402003e 	streq	r0, [r2], #-62	; 0xffffffc2
 3e8:	02002c03 	andeq	r2, r0, #768	; 0x300
 3ec:	3c060104 	stfccs	f0, [r6], {4}
 3f0:	04024e06 	streq	r4, [r2], #-3590	; 0xfffff1fa
 3f4:	Address 0x000003f4 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	69755f5f 	ldmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
   4:	5f38746e 	svcpl	0x0038746e
   8:	736f0074 	cmnvc	pc, #116	; 0x74
   c:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
  10:	3a450072 	bcc	11401e0 <startup-0x1eebfe20>
  14:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
  18:	2f373130 	svccs	0x00373130
  1c:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
  20:	6574694c 	ldrbvs	r6, [r4, #-2380]!	; 0xfffff6b4
  24:	6c696620 	stclvs	6, cr6, [r9], #-128	; 0xffffff80
  28:	4d2f7365 	stcmi	3, cr7, [pc, #-404]!	; fffffe9c <__aeabi_idiv0+0xdffffa18>
  2c:	616c706f 	cmnvs	ip, pc, rrx
  30:	61726f62 	cmnvs	r2, r2, ror #30
  34:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
  38:	642f7265 	strtvs	r7, [pc], #-613	; 40 <startup-0x1fffffc0>
  3c:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
  40:	6174732f 	cmnvs	r4, pc, lsr #6
  44:	70757472 	rsbsvc	r7, r5, r2, ror r4
  48:	6f00632e 	svcvs	0x0000632e
  4c:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
  50:	646f0072 	strbtvs	r0, [pc], #-114	; 58 <startup-0x1fffffa8>
  54:	67694872 			; <UNDEFINED> instruction: 0x67694872
  58:	746f0068 	strbtvc	r0, [pc], #-104	; 60 <startup-0x1fffffa0>
  5c:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
  60:	64657672 	strbtvs	r7, [r5], #-1650	; 0xfffff98e
  64:	554e4700 	strbpl	r4, [lr, #-1792]	; 0xfffff900
  68:	39394320 	ldmdbcc	r9!, {r5, r8, r9, lr}
  6c:	332e3620 			; <UNDEFINED> instruction: 0x332e3620
  70:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  74:	30373130 	eorscc	r3, r7, r0, lsr r1
  78:	20353132 	eorscs	r3, r5, r2, lsr r1
  7c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  80:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  84:	415b2029 	cmpmi	fp, r9, lsr #32
  88:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff33e <__aeabi_idiv0+0xdfffeeba>
  8c:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
  90:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  94:	72622d36 	rsbvc	r2, r2, #3456	; 0xd80
  98:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
  9c:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
  a0:	6f697369 	svcvs	0x00697369
  a4:	3432206e 	ldrtcc	r2, [r2], #-110	; 0xffffff92
  a8:	32313535 	eorscc	r3, r1, #222298112	; 0xd400000
  ac:	6d2d205d 	stcvs	0, cr2, [sp, #-372]!	; 0xfffffe8c
  b0:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
  b4:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
  b8:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
  bc:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
  c0:	6d2d3676 	stcvs	6, cr3, [sp, #-472]!	; 0xfffffe28
  c4:	666d2d20 	strbtvs	r2, [sp], -r0, lsr #26
  c8:	74616f6c 	strbtvc	r6, [r1], #-3948	; 0xfffff094
  cc:	6962612d 	stmdbvs	r2!, {r0, r2, r3, r5, r8, sp, lr}^
  d0:	666f733d 			; <UNDEFINED> instruction: 0x666f733d
  d4:	6d2d2074 	stcvs	0, cr2, [sp, #-464]!	; 0xfffffe30
  d8:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
  dc:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
  e0:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
  e4:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
  e8:	6d2d3676 	stcvs	6, cr3, [sp, #-472]!	; 0xfffffe28
  ec:	20672d20 	rsbcs	r2, r7, r0, lsr #26
  f0:	20304f2d 	eorscs	r4, r0, sp, lsr #30
  f4:	6474732d 	ldrbtvs	r7, [r4], #-813	; 0xfffffcd3
  f8:	3939633d 	ldmdbcc	r9!, {r0, r2, r3, r4, r5, r8, r9, sp, lr}
  fc:	736e7500 	cmnvc	lr, #0, 10
 100:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
 104:	68632064 	stmdavs	r3!, {r2, r5, r6, sp}^
 108:	6f007261 	svcvs	0x00007261
 10c:	65527264 	ldrbvs	r7, [r2, #-612]	; 0xfffffd9c
 110:	76726573 			; <UNDEFINED> instruction: 0x76726573
 114:	73006465 	movwvc	r6, #1125	; 0x465
 118:	74726f68 	ldrbtvc	r6, [r2], #-3944	; 0xfffff098
 11c:	736e7520 	cmnvc	lr, #32, 10	; 0x8000000
 120:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
 124:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
 128:	50470074 	subpl	r0, r7, r4, ror r0
 12c:	69004f49 	stmdbvs	r0, {r0, r3, r6, r8, r9, sl, fp, lr}
 130:	65527264 	ldrbvs	r7, [r2, #-612]	; 0xfffffd9c
 134:	76726573 			; <UNDEFINED> instruction: 0x76726573
 138:	5f006465 	svcpl	0x00006465
 13c:	6e69755f 	mcrvs	5, 3, r7, cr9, cr15, {2}
 140:	5f363174 	svcpl	0x00363174
 144:	5f5f0074 	svcpl	0x005f0074
 148:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
 14c:	745f3233 	ldrbvc	r3, [pc], #-563	; 154 <startup-0x1ffffeac>
 150:	70757000 	rsbsvc	r7, r5, r0
 154:	6d007264 	sfmvs	f7, 4, [r0, #-400]	; 0xfffffe70
 158:	006e6961 	rsbeq	r6, lr, r1, ror #18
 15c:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 160:	7070615f 	rsbsvc	r6, r0, pc, asr r1
 164:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
 168:	6f6c2067 	svcvs	0x006c2067
 16c:	7520676e 	strvc	r6, [r0, #-1902]!	; 0xfffff892
 170:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
 174:	2064656e 	rsbcs	r6, r4, lr, ror #10
 178:	00746e69 	rsbseq	r6, r4, r9, ror #28
 17c:	4c72646f 	cfldrdmi	mvd6, [r2], #-444	; 0xfffffe44
 180:	6900776f 	stmdbvs	r0, {r0, r1, r2, r3, r5, r6, r8, r9, sl, ip, sp, lr}
 184:	69487264 	stmdbvs	r8, {r2, r5, r6, r9, ip, sp, lr}^
 188:	73006867 	movwvc	r6, #2151	; 0x867
 18c:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 190:	6c007075 	stcvs	0, cr7, [r0], {117}	; 0x75
 194:	20676e6f 	rsbcs	r6, r7, pc, ror #28
 198:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
 19c:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
 1a0:	72646900 	rsbvc	r6, r4, #0, 18
 1a4:	00776f4c 	rsbseq	r6, r7, ip, asr #30
 1a8:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
 1ac:	6e692074 	mcrvs	0, 3, r2, cr9, cr4, {3}
 1b0:	6f6d0074 	svcvs	0x006d0074
 1b4:	00726564 	rsbseq	r6, r2, r4, ror #10
 1b8:	6970675f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, sp, lr}^
 1bc:	656b006f 	strbvs	r0, [fp, #-111]!	; 0xffffff91
 1c0:	64007379 	strvs	r7, [r0], #-889	; 0xfffffc87
 1c4:	74636165 	strbtvc	r6, [r3], #-357	; 0xfffffe9b
 1c8:	74617669 	strbtvc	r7, [r1], #-1641	; 0xfffff997
 1cc:	6f725f65 	svcvs	0x00725f65
 1d0:	45007377 	strmi	r7, [r0, #-887]	; 0xfffffc89
 1d4:	41442f3a 	cmpmi	r4, sl, lsr pc
 1d8:	37313054 			; <UNDEFINED> instruction: 0x37313054
 1dc:	646f432f 	strbtvs	r4, [pc], #-815	; 1e4 <startup-0x1ffffe1c>
 1e0:	74694c65 	strbtvc	r4, [r9], #-3173	; 0xfffff39b
 1e4:	69662065 	stmdbvs	r6!, {r0, r2, r5, r6, sp}^
 1e8:	2f73656c 	svccs	0x0073656c
 1ec:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
 1f0:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
 1f4:	6f697461 	svcvs	0x00697461
 1f8:	2f72656e 	svccs	0x0072656e
 1fc:	616c6564 	cmnvs	ip, r4, ror #10
 200:	70672f79 	rsbvc	r2, r7, r9, ror pc
 204:	632e6f69 			; <UNDEFINED> instruction: 0x632e6f69
 208:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
 20c:	665f7075 			; <UNDEFINED> instruction: 0x665f7075
 210:	6b5f726f 	blvs	17dcbd4 <startup-0x1e82342c>
 214:	61707965 	cmnvs	r0, r5, ror #18
 218:	65720064 	ldrbvs	r0, [r2, #-100]!	; 0xffffff9c
 21c:	746c7573 	strbtvc	r7, [ip], #-1395	; 0xfffffa8d
 220:	79656b00 	stmdbvc	r5!, {r8, r9, fp, sp, lr}^
 224:	69730062 	ldmdbvs	r3!, {r1, r5, r6}^
 228:	7974657a 	ldmdbvc	r4!, {r1, r3, r4, r5, r6, r8, sl, sp, lr}^
 22c:	6f006570 	svcvs	0x00006570
 230:	73377475 	teqvc	r7, #1962934272	; 0x75000000
 234:	72006765 	andvc	r6, r0, #26476544	; 0x1940000
 238:	5f646165 	svcpl	0x00646165
 23c:	006c6f63 	rsbeq	r6, ip, r3, ror #30
 240:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
 244:	65746176 	ldrbvs	r6, [r4, #-374]!	; 0xfffffe8a
 248:	776f725f 			; <UNDEFINED> instruction: 0x776f725f
 24c:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
 250:	665f7075 			; <UNDEFINED> instruction: 0x665f7075
 254:	735f726f 	cmpvc	pc, #-268435450	; 0xf0000006
 258:	645f6765 	ldrbvs	r6, [pc], #-1893	; 260 <startup-0x1ffffda0>
 25c:	00707369 	rsbseq	r7, r0, r9, ror #6
 260:	54737953 	ldrbtpl	r7, [r3], #-2387	; 0xfffff6ad
 264:	006b6369 	rsbeq	r6, fp, r9, ror #6
 268:	442f3a45 	strtmi	r3, [pc], #-2629	; 270 <startup-0x1ffffd90>
 26c:	31305441 	teqcc	r0, r1, asr #8
 270:	6f432f37 	svcvs	0x00432f37
 274:	694c6564 	stmdbvs	ip, {r2, r5, r6, r8, sl, sp, lr}^
 278:	66206574 			; <UNDEFINED> instruction: 0x66206574
 27c:	73656c69 	cmnvc	r5, #26880	; 0x6900
 280:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
 284:	6f62616c 	svcvs	0x0062616c
 288:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
 28c:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
 290:	6c65642f 	cfstrdvs	mvd6, [r5], #-188	; 0xffffff44
 294:	732f7961 			; <UNDEFINED> instruction: 0x732f7961
 298:	645f7379 	ldrbvs	r7, [pc], #-889	; 2a0 <startup-0x1ffffd60>
 29c:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 2a0:	5300632e 	movwpl	r6, #814	; 0x32e
 2a4:	435f4b54 	cmpmi	pc, #84, 22	; 0x15000
 2a8:	42494c41 	submi	r4, r9, #16640	; 0x4100
 2ac:	4b545300 	blmi	1514eb4 <startup-0x1eaeb14c>
 2b0:	4c41565f 	mcrrmi	6, 5, r5, r1, cr15
 2b4:	4b545300 	blmi	1514ebc <startup-0x1eaeb144>
 2b8:	5254435f 	subspl	r4, r4, #2080374785	; 0x7c000001
 2bc:	5453004c 	ldrbpl	r0, [r3], #-76	; 0xffffffb4
 2c0:	4f4c5f4b 	svcmi	0x004c5f4b
 2c4:	64004441 	strvs	r4, [r0], #-1089	; 0xfffffbbf
 2c8:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 2cc:	6b696d5f 	blvs	1a5b850 <startup-0x1e5a47b0>
 2d0:	64006f72 	strvs	r6, [r0], #-3954	; 0xfffff08e
 2d4:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 2d8:	3035325f 	eorscc	r3, r5, pc, asr r2
 2dc:	6400736e 	strvs	r7, [r0], #-878	; 0xfffffc92
 2e0:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 2e4:	65640073 	strbvs	r0, [r4, #-115]!	; 0xffffff8d
 2e8:	5f79616c 	svcpl	0x0079616c
 2ec:	6c6c696d 			; <UNDEFINED> instruction: 0x6c6c696d
 2f0:	Address 0x000002f0 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	204d5241 	subcs	r5, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d36 	eorscc	r2, r2, r6, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	70752d31 	rsbsvc	r2, r5, r1, lsr sp
  38:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
  3c:	2e362029 	cdpcs	0, 3, cr2, cr6, cr9, {1}
  40:	20312e33 	eorscs	r2, r1, r3, lsr lr
  44:	37313032 			; <UNDEFINED> instruction: 0x37313032
  48:	35313230 	ldrcc	r3, [r1, #-560]!	; 0xfffffdd0
  4c:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
  50:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
  54:	5b202965 	blpl	80a5f0 <startup-0x1f7f5a10>
  58:	2f4d5241 	svccs	0x004d5241
  5c:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
  60:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  64:	622d362d 	eorvs	r3, sp, #47185920	; 0x2d00000
  68:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
  6c:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
  70:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
  74:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
  78:	31353534 	teqcc	r5, r4, lsr r5
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	00000018 	andeq	r0, r0, r8, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	00000018 	andeq	r0, r0, r8, lsl r0
  30:	40080e41 	andmi	r0, r8, r1, asr #28
  34:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  38:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  3c:	00000018 	andeq	r0, r0, r8, lsl r0
  40:	00000000 	andeq	r0, r0, r0
  44:	20000028 	andcs	r0, r0, r8, lsr #32
  48:	00000030 	andeq	r0, r0, r0, lsr r0
  4c:	40080e41 	andmi	r0, r8, r1, asr #28
  50:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  54:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  58:	0000000c 	andeq	r0, r0, ip
  5c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  60:	7c020001 	stcvc	0, cr0, [r2], {1}
  64:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  68:	0000001c 	andeq	r0, r0, ip, lsl r0
  6c:	00000058 	andeq	r0, r0, r8, asr r0
  70:	20000058 	andcs	r0, r0, r8, asr r0
  74:	00000064 	andeq	r0, r0, r4, rrx
  78:	40080e41 	andmi	r0, r8, r1, asr #28
  7c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  80:	100e4101 	andne	r4, lr, r1, lsl #2
  84:	00070d41 	andeq	r0, r7, r1, asr #26
  88:	0000001c 	andeq	r0, r0, ip, lsl r0
  8c:	00000058 	andeq	r0, r0, r8, asr r0
  90:	200000bc 	strhcs	r0, [r0], -ip
  94:	00000064 	andeq	r0, r0, r4, rrx
  98:	40080e41 	andmi	r0, r8, r1, asr #28
  9c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  a0:	100e4101 	andne	r4, lr, r1, lsl #2
  a4:	00070d41 	andeq	r0, r7, r1, asr #26
  a8:	00000020 	andeq	r0, r0, r0, lsr #32
  ac:	00000058 	andeq	r0, r0, r8, asr r0
  b0:	20000120 	andcs	r0, r0, r0, lsr #2
  b4:	00000090 	muleq	r0, r0, r0
  b8:	400c0e41 	andmi	r0, ip, r1, asr #28
  bc:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
  c0:	018e4002 	orreq	r4, lr, r2
  c4:	41280e41 			; <UNDEFINED> instruction: 0x41280e41
  c8:	0000070d 	andeq	r0, r0, sp, lsl #14
  cc:	00000020 	andeq	r0, r0, r0, lsr #32
  d0:	00000058 	andeq	r0, r0, r8, asr r0
  d4:	200001b0 			; <UNDEFINED> instruction: 0x200001b0
  d8:	00000050 	andeq	r0, r0, r0, asr r0
  dc:	400c0e41 	andmi	r0, ip, r1, asr #28
  e0:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
  e4:	018e4002 	orreq	r4, lr, r2
  e8:	41380e41 	teqmi	r8, r1, asr #28
  ec:	0000070d 	andeq	r0, r0, sp, lsl #14
  f0:	0000001c 	andeq	r0, r0, ip, lsl r0
  f4:	00000058 	andeq	r0, r0, r8, asr r0
  f8:	20000200 	andcs	r0, r0, r0, lsl #4
  fc:	00000050 	andeq	r0, r0, r0, asr r0
 100:	40080e41 	andmi	r0, r8, r1, asr #28
 104:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 108:	100e4101 	andne	r4, lr, r1, lsl #2
 10c:	00070d41 	andeq	r0, r7, r1, asr #26
 110:	0000001c 	andeq	r0, r0, ip, lsl r0
 114:	00000058 	andeq	r0, r0, r8, asr r0
 118:	20000250 	andcs	r0, r0, r0, asr r2
 11c:	00000016 	andeq	r0, r0, r6, lsl r0
 120:	40080e41 	andmi	r0, r8, r1, asr #28
 124:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 128:	100e4101 	andne	r4, lr, r1, lsl #2
 12c:	00070d41 	andeq	r0, r7, r1, asr #26
 130:	0000001c 	andeq	r0, r0, ip, lsl r0
 134:	00000058 	andeq	r0, r0, r8, asr r0
 138:	20000266 	andcs	r0, r0, r6, ror #4
 13c:	00000052 	andeq	r0, r0, r2, asr r0
 140:	40080e41 	andmi	r0, r8, r1, asr #28
 144:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 148:	100e4101 	andne	r4, lr, r1, lsl #2
 14c:	00070d41 	andeq	r0, r7, r1, asr #26
 150:	0000000c 	andeq	r0, r0, ip
 154:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 158:	7c020001 	stcvc	0, cr0, [r2], {1}
 15c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 160:	00000018 	andeq	r0, r0, r8, lsl r0
 164:	00000150 	andeq	r0, r0, r0, asr r1
 168:	200002b8 			; <UNDEFINED> instruction: 0x200002b8
 16c:	00000040 	andeq	r0, r0, r0, asr #32
 170:	40080e41 	andmi	r0, r8, r1, asr #28
 174:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 178:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 17c:	0000001c 	andeq	r0, r0, ip, lsl r0
 180:	00000150 	andeq	r0, r0, r0, asr r1
 184:	200002f8 	strdcs	r0, [r0], -r8
 188:	0000002e 	andeq	r0, r0, lr, lsr #32
 18c:	40080e41 	andmi	r0, r8, r1, asr #28
 190:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 194:	180e4101 	stmdane	lr, {r0, r8, lr}
 198:	00070d41 	andeq	r0, r7, r1, asr #26
 19c:	0000001c 	andeq	r0, r0, ip, lsl r0
 1a0:	00000150 	andeq	r0, r0, r0, asr r1
 1a4:	20000326 	andcs	r0, r0, r6, lsr #6
 1a8:	00000048 	andeq	r0, r0, r8, asr #32
 1ac:	40080e41 	andmi	r0, r8, r1, asr #28
 1b0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1b4:	180e4101 	stmdane	lr, {r0, r8, lr}
 1b8:	00070d41 	andeq	r0, r7, r1, asr #26
 1bc:	0000000c 	andeq	r0, r0, ip
 1c0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 1c4:	7c010001 	stcvc	0, cr0, [r1], {1}
 1c8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 1cc:	0000000c 	andeq	r0, r0, ip
 1d0:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
 1d4:	20000371 	andcs	r0, r0, r1, ror r3
 1d8:	0000010a 	andeq	r0, r0, sl, lsl #2
