
./Debug/graphicdisplay.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
 */
void startup(void) __attribute__((naked)) __attribute__((section (".start_section")) );

void startup ( void )
{
__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 f80b 	bl	2000001e <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	"_exit: B .\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <init_app>:

void init_app(void) {
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
	setup_for_graphic_display();
20000014:	f000 fd97 	bl	20000b46 <setup_for_graphic_display>
}
20000018:	46c0      	nop			; (mov r8, r8)
2000001a:	46bd      	mov	sp, r7
2000001c:	bd80      	pop	{r7, pc}

2000001e <main>:

void main(void)
{
2000001e:	b580      	push	{r7, lr}
20000020:	b082      	sub	sp, #8
20000022:	af00      	add	r7, sp, #0
	init_app();
20000024:	f7ff fff4 	bl	20000010 <init_app>
	graphic_initialize();
20000028:	f000 fc17 	bl	2000085a <graphic_initialize>
#ifndef SIMULATOR
	graphic_clear_screen();
#endif

	unsigned char i;
	for (i = 0; i < 128; i++)
2000002c:	1dfb      	adds	r3, r7, #7
2000002e:	2200      	movs	r2, #0
20000030:	701a      	strb	r2, [r3, #0]
20000032:	e00b      	b.n	2000004c <main+0x2e>
		pixel(i, 10, 1);
20000034:	1dfb      	adds	r3, r7, #7
20000036:	781b      	ldrb	r3, [r3, #0]
20000038:	2201      	movs	r2, #1
2000003a:	210a      	movs	r1, #10
2000003c:	0018      	movs	r0, r3
2000003e:	f000 fd91 	bl	20000b64 <pixel>
	for (i = 0; i < 128; i++)
20000042:	1dfb      	adds	r3, r7, #7
20000044:	781a      	ldrb	r2, [r3, #0]
20000046:	1dfb      	adds	r3, r7, #7
20000048:	3201      	adds	r2, #1
2000004a:	701a      	strb	r2, [r3, #0]
2000004c:	1dfb      	adds	r3, r7, #7
2000004e:	781b      	ldrb	r3, [r3, #0]
20000050:	b25b      	sxtb	r3, r3
20000052:	2b00      	cmp	r3, #0
20000054:	daee      	bge.n	20000034 <main+0x16>
	for (i = 0; i < 64; i++)
20000056:	1dfb      	adds	r3, r7, #7
20000058:	2200      	movs	r2, #0
2000005a:	701a      	strb	r2, [r3, #0]
2000005c:	e00b      	b.n	20000076 <main+0x58>
		pixel(10, i, 1);
2000005e:	1dfb      	adds	r3, r7, #7
20000060:	781b      	ldrb	r3, [r3, #0]
20000062:	2201      	movs	r2, #1
20000064:	0019      	movs	r1, r3
20000066:	200a      	movs	r0, #10
20000068:	f000 fd7c 	bl	20000b64 <pixel>
	for (i = 0; i < 64; i++)
2000006c:	1dfb      	adds	r3, r7, #7
2000006e:	781a      	ldrb	r2, [r3, #0]
20000070:	1dfb      	adds	r3, r7, #7
20000072:	3201      	adds	r2, #1
20000074:	701a      	strb	r2, [r3, #0]
20000076:	1dfb      	adds	r3, r7, #7
20000078:	781b      	ldrb	r3, [r3, #0]
2000007a:	2b3f      	cmp	r3, #63	; 0x3f
2000007c:	d9ef      	bls.n	2000005e <main+0x40>
	delay_milli(30);
2000007e:	201e      	movs	r0, #30
20000080:	f000 f879 	bl	20000176 <delay_milli>
	for (i = 0; i < 128; i++)
20000084:	1dfb      	adds	r3, r7, #7
20000086:	2200      	movs	r2, #0
20000088:	701a      	strb	r2, [r3, #0]
2000008a:	e00b      	b.n	200000a4 <main+0x86>
		pixel(i, 10, 0);
2000008c:	1dfb      	adds	r3, r7, #7
2000008e:	781b      	ldrb	r3, [r3, #0]
20000090:	2200      	movs	r2, #0
20000092:	210a      	movs	r1, #10
20000094:	0018      	movs	r0, r3
20000096:	f000 fd65 	bl	20000b64 <pixel>
	for (i = 0; i < 128; i++)
2000009a:	1dfb      	adds	r3, r7, #7
2000009c:	781a      	ldrb	r2, [r3, #0]
2000009e:	1dfb      	adds	r3, r7, #7
200000a0:	3201      	adds	r2, #1
200000a2:	701a      	strb	r2, [r3, #0]
200000a4:	1dfb      	adds	r3, r7, #7
200000a6:	781b      	ldrb	r3, [r3, #0]
200000a8:	b25b      	sxtb	r3, r3
200000aa:	2b00      	cmp	r3, #0
200000ac:	daee      	bge.n	2000008c <main+0x6e>
	for (i = 0; i < 64; i++)
200000ae:	1dfb      	adds	r3, r7, #7
200000b0:	2200      	movs	r2, #0
200000b2:	701a      	strb	r2, [r3, #0]
200000b4:	e00b      	b.n	200000ce <main+0xb0>
		pixel(10, i, 0);
200000b6:	1dfb      	adds	r3, r7, #7
200000b8:	781b      	ldrb	r3, [r3, #0]
200000ba:	2200      	movs	r2, #0
200000bc:	0019      	movs	r1, r3
200000be:	200a      	movs	r0, #10
200000c0:	f000 fd50 	bl	20000b64 <pixel>
	for (i = 0; i < 64; i++)
200000c4:	1dfb      	adds	r3, r7, #7
200000c6:	781a      	ldrb	r2, [r3, #0]
200000c8:	1dfb      	adds	r3, r7, #7
200000ca:	3201      	adds	r2, #1
200000cc:	701a      	strb	r2, [r3, #0]
200000ce:	1dfb      	adds	r3, r7, #7
200000d0:	781b      	ldrb	r3, [r3, #0]
200000d2:	2b3f      	cmp	r3, #63	; 0x3f
200000d4:	d9ef      	bls.n	200000b6 <main+0x98>
	
	// Print left only
	//graphic_write_command(LCD_SET_ADD | 10, B_CS1|B_CS2);
	//graphic_write_command(LCD_SET_PAGE | 1, B_CS1|B_CS2);
	//graphic_write_data(0xFF, B_CS1|B_CS2);
}
200000d6:	46c0      	nop			; (mov r8, r8)
200000d8:	46bd      	mov	sp, r7
200000da:	b002      	add	sp, #8
200000dc:	bd80      	pop	{r7, pc}
	...

200000e0 <delay_250ns>:
/// Delays the thread 250 ns.
///
/// NOTE: 		The routine is not exact but takes a MINIMUM of 
///				250 ns.
void delay_250ns( void )
{
200000e0:	b580      	push	{r7, lr}
200000e2:	af00      	add	r7, sp, #0
	// ----------------------
	// = Återställ räknaren =
	// ----------------------
	// Nollställ register STK_CTRL.
	SYS_TICK->STK_CTRL = 0;
200000e4:	4b0c      	ldr	r3, [pc, #48]	; (20000118 <delay_250ns+0x38>)
200000e6:	2200      	movs	r2, #0
200000e8:	601a      	str	r2, [r3, #0]
	// = Ladda in räknarvärdet =
	// -------------------------
	// 		168 ticks/µs 		* 1000
	// => 	168'000 ticks/ns 	/ 4
	// => 	42'000 ticks for a wait of 250 ns.
	SYS_TICK->STK_LOAD = 0x0000A410;
200000ea:	4b0b      	ldr	r3, [pc, #44]	; (20000118 <delay_250ns+0x38>)
200000ec:	4a0b      	ldr	r2, [pc, #44]	; (2000011c <delay_250ns+0x3c>)
200000ee:	605a      	str	r2, [r3, #4]
	
	// -----------------------------
	// = Nollställ räknarregistret =
	// -----------------------------
	// Nolställ register STK_VAL.
	SYS_TICK->STK_VAL = 0;
200000f0:	4b09      	ldr	r3, [pc, #36]	; (20000118 <delay_250ns+0x38>)
200000f2:	2200      	movs	r2, #0
200000f4:	609a      	str	r2, [r3, #8]
	// ---------------------
	// = Start om räknaren =
	// ---------------------
	// Ettställ bitar 2 och 0.
	// Nollställ bitar 31-3 och 1.
	SYS_TICK->STK_CTRL = 0x00000005;
200000f6:	4b08      	ldr	r3, [pc, #32]	; (20000118 <delay_250ns+0x38>)
200000f8:	2205      	movs	r2, #5
200000fa:	601a      	str	r2, [r3, #0]
	
	// -----------------------------------------
	// = Vänta tills räknaren har räknat klart =
	// -----------------------------------------
	// Väntar tills COUNTFLAG = 1.
	while(SYS_TICK->STK_CTRL & 0x00010000) { }
200000fc:	46c0      	nop			; (mov r8, r8)
200000fe:	4b06      	ldr	r3, [pc, #24]	; (20000118 <delay_250ns+0x38>)
20000100:	681a      	ldr	r2, [r3, #0]
20000102:	2380      	movs	r3, #128	; 0x80
20000104:	025b      	lsls	r3, r3, #9
20000106:	4013      	ands	r3, r2
20000108:	d1f9      	bne.n	200000fe <delay_250ns+0x1e>
	
	// ----------------------
	// = Återställ räknaren =
	// ----------------------
	// Nollställ register STK_CTRL.
	SYS_TICK->STK_CTRL = 0;
2000010a:	4b03      	ldr	r3, [pc, #12]	; (20000118 <delay_250ns+0x38>)
2000010c:	2200      	movs	r2, #0
2000010e:	601a      	str	r2, [r3, #0]
}
20000110:	46c0      	nop			; (mov r8, r8)
20000112:	46bd      	mov	sp, r7
20000114:	bd80      	pop	{r7, pc}
20000116:	46c0      	nop			; (mov r8, r8)
20000118:	e000e010 	and	lr, r0, r0, lsl r0
2000011c:	0000a410 	andeq	sl, r0, r0, lsl r4

20000120 <delay_500ns>:
/// Dealys the thread 500 ns.
/// 
/// NOTE:		The routine is not exact but takes a MINIMUM of
///				500 ns.
void delay_500ns( void )
{
20000120:	b580      	push	{r7, lr}
20000122:	af00      	add	r7, sp, #0
	delay_250ns();
20000124:	f7ff ffdc 	bl	200000e0 <delay_250ns>
	delay_250ns();
20000128:	f7ff ffda 	bl	200000e0 <delay_250ns>
}
2000012c:	46c0      	nop			; (mov r8, r8)
2000012e:	46bd      	mov	sp, r7
20000130:	bd80      	pop	{r7, pc}

20000132 <delay_mikro>:
///				'delay_250ns()' function is suboptimal as you reset
///				the STK_CTRL register twice between every iteration
///				of the for loop.
/// 			
void delay_mikro( unsigned int us )
{
20000132:	b580      	push	{r7, lr}
20000134:	b084      	sub	sp, #16
20000136:	af00      	add	r7, sp, #0
20000138:	6078      	str	r0, [r7, #4]
#ifdef SIMULATOR
	us = us / 1000;
2000013a:	687a      	ldr	r2, [r7, #4]
2000013c:	23fa      	movs	r3, #250	; 0xfa
2000013e:	0099      	lsls	r1, r3, #2
20000140:	0010      	movs	r0, r2
20000142:	f000 fe03 	bl	20000d4c <__udivsi3>
20000146:	0003      	movs	r3, r0
20000148:	607b      	str	r3, [r7, #4]
	us++;
2000014a:	687b      	ldr	r3, [r7, #4]
2000014c:	3301      	adds	r3, #1
2000014e:	607b      	str	r3, [r7, #4]
#endif
	// Convert the given time to a number of 250 ns delays.
	unsigned int delays = us * 4;
20000150:	687b      	ldr	r3, [r7, #4]
20000152:	009b      	lsls	r3, r3, #2
20000154:	60bb      	str	r3, [r7, #8]
	unsigned int i;
	for(i = 0; i < delays; i++)
20000156:	2300      	movs	r3, #0
20000158:	60fb      	str	r3, [r7, #12]
2000015a:	e004      	b.n	20000166 <delay_mikro+0x34>
	{
		delay_250ns();
2000015c:	f7ff ffc0 	bl	200000e0 <delay_250ns>
	for(i = 0; i < delays; i++)
20000160:	68fb      	ldr	r3, [r7, #12]
20000162:	3301      	adds	r3, #1
20000164:	60fb      	str	r3, [r7, #12]
20000166:	68fa      	ldr	r2, [r7, #12]
20000168:	68bb      	ldr	r3, [r7, #8]
2000016a:	429a      	cmp	r2, r3
2000016c:	d3f6      	bcc.n	2000015c <delay_mikro+0x2a>
	}
}
2000016e:	46c0      	nop			; (mov r8, r8)
20000170:	46bd      	mov	sp, r7
20000172:	b004      	add	sp, #16
20000174:	bd80      	pop	{r7, pc}

20000176 <delay_milli>:
///				'delay_250ns()' function is suboptimal as you reset
///				the 'STK_CTRL' register twice between every iteration
///				of the for loop.
/// 			
void delay_milli( unsigned int ms )
{
20000176:	b580      	push	{r7, lr}
20000178:	b084      	sub	sp, #16
2000017a:	af00      	add	r7, sp, #0
2000017c:	6078      	str	r0, [r7, #4]
#ifdef SIMULATOR
	ms = ms / 1000;
2000017e:	687a      	ldr	r2, [r7, #4]
20000180:	23fa      	movs	r3, #250	; 0xfa
20000182:	0099      	lsls	r1, r3, #2
20000184:	0010      	movs	r0, r2
20000186:	f000 fde1 	bl	20000d4c <__udivsi3>
2000018a:	0003      	movs	r3, r0
2000018c:	607b      	str	r3, [r7, #4]
	ms++;
2000018e:	687b      	ldr	r3, [r7, #4]
20000190:	3301      	adds	r3, #1
20000192:	607b      	str	r3, [r7, #4]
#endif
	// Convert the given time to a number of 250 ns delays.
	unsigned int delays = ms * 4000;
20000194:	687b      	ldr	r3, [r7, #4]
20000196:	22fa      	movs	r2, #250	; 0xfa
20000198:	0112      	lsls	r2, r2, #4
2000019a:	4353      	muls	r3, r2
2000019c:	60bb      	str	r3, [r7, #8]
	unsigned int i;
	for(i = 0; i < delays; i++)
2000019e:	2300      	movs	r3, #0
200001a0:	60fb      	str	r3, [r7, #12]
200001a2:	e004      	b.n	200001ae <delay_milli+0x38>
	{
		delay_250ns();
200001a4:	f7ff ff9c 	bl	200000e0 <delay_250ns>
	for(i = 0; i < delays; i++)
200001a8:	68fb      	ldr	r3, [r7, #12]
200001aa:	3301      	adds	r3, #1
200001ac:	60fb      	str	r3, [r7, #12]
200001ae:	68fa      	ldr	r2, [r7, #12]
200001b0:	68bb      	ldr	r3, [r7, #8]
200001b2:	429a      	cmp	r2, r3
200001b4:	d3f6      	bcc.n	200001a4 <delay_milli+0x2e>
	}
200001b6:	46c0      	nop			; (mov r8, r8)
200001b8:	46bd      	mov	sp, r7
200001ba:	b004      	add	sp, #16
200001bc:	bd80      	pop	{r7, pc}
200001be:	46c0      	nop			; (mov r8, r8)

200001c0 <setup_for_keypad>:
#include "gpio.h"
#include "sys_delay.h"
#include <stdint.h>

void setup_for_keypad(GPIO* _gpio) {
200001c0:	b580      	push	{r7, lr}
200001c2:	b082      	sub	sp, #8
200001c4:	af00      	add	r7, sp, #0
200001c6:	6078      	str	r0, [r7, #4]
	// Sätt pinnar 15-12 till utportar
	// och pinnar 11-8 till inportar.
    _gpio->moder &= 0x0000FFFF;
200001c8:	687b      	ldr	r3, [r7, #4]
200001ca:	681b      	ldr	r3, [r3, #0]
200001cc:	041b      	lsls	r3, r3, #16
200001ce:	0c1a      	lsrs	r2, r3, #16
200001d0:	687b      	ldr	r3, [r7, #4]
200001d2:	601a      	str	r2, [r3, #0]
    _gpio->moder |= 0x5500FFFF;
200001d4:	687b      	ldr	r3, [r7, #4]
200001d6:	681b      	ldr	r3, [r3, #0]
200001d8:	4a11      	ldr	r2, [pc, #68]	; (20000220 <setup_for_keypad+0x60>)
200001da:	431a      	orrs	r2, r3
200001dc:	687b      	ldr	r3, [r7, #4]
200001de:	601a      	str	r2, [r3, #0]

	// Sätt pinnar 15-12 till "push-pull"
	// och pinnar 11-8 till "open drain".
    _gpio->otyper &= 0xFFFF00FF;
200001e0:	687b      	ldr	r3, [r7, #4]
200001e2:	889b      	ldrh	r3, [r3, #4]
200001e4:	22ff      	movs	r2, #255	; 0xff
200001e6:	4013      	ands	r3, r2
200001e8:	b29a      	uxth	r2, r3
200001ea:	687b      	ldr	r3, [r7, #4]
200001ec:	809a      	strh	r2, [r3, #4]
    _gpio->otyper |= 0x00000F00;
200001ee:	687b      	ldr	r3, [r7, #4]
200001f0:	889b      	ldrh	r3, [r3, #4]
200001f2:	22f0      	movs	r2, #240	; 0xf0
200001f4:	0112      	lsls	r2, r2, #4
200001f6:	4313      	orrs	r3, r2
200001f8:	b29a      	uxth	r2, r3
200001fa:	687b      	ldr	r3, [r7, #4]
200001fc:	809a      	strh	r2, [r3, #4]

	// Sätt pinnar 15-12 till "floating"
	// och pinnar 11-8 till "pull-down"
    _gpio->pupdr &= 0x0000FFFF;
200001fe:	687b      	ldr	r3, [r7, #4]
20000200:	68db      	ldr	r3, [r3, #12]
20000202:	041b      	lsls	r3, r3, #16
20000204:	0c1a      	lsrs	r2, r3, #16
20000206:	687b      	ldr	r3, [r7, #4]
20000208:	60da      	str	r2, [r3, #12]
    _gpio->pupdr |= 0x00AA0000;
2000020a:	687b      	ldr	r3, [r7, #4]
2000020c:	68db      	ldr	r3, [r3, #12]
2000020e:	22aa      	movs	r2, #170	; 0xaa
20000210:	0412      	lsls	r2, r2, #16
20000212:	431a      	orrs	r2, r3
20000214:	687b      	ldr	r3, [r7, #4]
20000216:	60da      	str	r2, [r3, #12]
}
20000218:	46c0      	nop			; (mov r8, r8)
2000021a:	46bd      	mov	sp, r7
2000021c:	b002      	add	sp, #8
2000021e:	bd80      	pop	{r7, pc}
20000220:	5500ffff 	strpl	pc, [r0, #-4095]	; 0xfffff001

20000224 <setup_for_seg_disp>:

void setup_for_seg_disp(GPIO* _gpio) {
20000224:	b580      	push	{r7, lr}
20000226:	b082      	sub	sp, #8
20000228:	af00      	add	r7, sp, #0
2000022a:	6078      	str	r0, [r7, #4]
	// Sätt pinnar 7-0 till utportar
	_gpio->moder &= 0xFFFF0000;
2000022c:	687b      	ldr	r3, [r7, #4]
2000022e:	681b      	ldr	r3, [r3, #0]
20000230:	0c1b      	lsrs	r3, r3, #16
20000232:	041a      	lsls	r2, r3, #16
20000234:	687b      	ldr	r3, [r7, #4]
20000236:	601a      	str	r2, [r3, #0]
	_gpio->moder |= 0x00005555;
20000238:	687b      	ldr	r3, [r7, #4]
2000023a:	681b      	ldr	r3, [r3, #0]
2000023c:	4a11      	ldr	r2, [pc, #68]	; (20000284 <setup_for_seg_disp+0x60>)
2000023e:	431a      	orrs	r2, r3
20000240:	687b      	ldr	r3, [r7, #4]
20000242:	601a      	str	r2, [r3, #0]

	// Sätt pinnar 7-0 till "push-pull"
	_gpio->otyper &= 0xFFFFFF00;
20000244:	687b      	ldr	r3, [r7, #4]
20000246:	889b      	ldrh	r3, [r3, #4]
20000248:	22ff      	movs	r2, #255	; 0xff
2000024a:	4393      	bics	r3, r2
2000024c:	b29a      	uxth	r2, r3
2000024e:	687b      	ldr	r3, [r7, #4]
20000250:	809a      	strh	r2, [r3, #4]
	_gpio->otyper |= 0x000000FF;
20000252:	687b      	ldr	r3, [r7, #4]
20000254:	889b      	ldrh	r3, [r3, #4]
20000256:	22ff      	movs	r2, #255	; 0xff
20000258:	4313      	orrs	r3, r2
2000025a:	b29a      	uxth	r2, r3
2000025c:	687b      	ldr	r3, [r7, #4]
2000025e:	809a      	strh	r2, [r3, #4]

	// Sätter pinnar 4-0 till "pull-down"
	_gpio->pupdr &= 0xFFFFFF00;
20000260:	687b      	ldr	r3, [r7, #4]
20000262:	68db      	ldr	r3, [r3, #12]
20000264:	22ff      	movs	r2, #255	; 0xff
20000266:	4393      	bics	r3, r2
20000268:	001a      	movs	r2, r3
2000026a:	687b      	ldr	r3, [r7, #4]
2000026c:	60da      	str	r2, [r3, #12]
	_gpio->pupdr |= 0x000000AA;
2000026e:	687b      	ldr	r3, [r7, #4]
20000270:	68db      	ldr	r3, [r3, #12]
20000272:	22aa      	movs	r2, #170	; 0xaa
20000274:	431a      	orrs	r2, r3
20000276:	687b      	ldr	r3, [r7, #4]
20000278:	60da      	str	r2, [r3, #12]
}
2000027a:	46c0      	nop			; (mov r8, r8)
2000027c:	46bd      	mov	sp, r7
2000027e:	b002      	add	sp, #8
20000280:	bd80      	pop	{r7, pc}
20000282:	46c0      	nop			; (mov r8, r8)
20000284:	00005555 	andeq	r5, r0, r5, asr r5

20000288 <keyb>:

unsigned char keyb(void) {
20000288:	b590      	push	{r4, r7, lr}
2000028a:	b087      	sub	sp, #28
2000028c:	af00      	add	r7, sp, #0
	unsigned char keys[] = {
2000028e:	1d3b      	adds	r3, r7, #4
20000290:	4a1f      	ldr	r2, [pc, #124]	; (20000310 <keyb+0x88>)
20000292:	ca13      	ldmia	r2!, {r0, r1, r4}
20000294:	c313      	stmia	r3!, {r0, r1, r4}
20000296:	6812      	ldr	r2, [r2, #0]
20000298:	601a      	str	r2, [r3, #0]
		4,  5,  6,  11,
		7,  8,  9,  12,
		14, 0,  15, 13
	};
	unsigned char row, col;
	for(row = 0; row < 4; row++) {
2000029a:	2317      	movs	r3, #23
2000029c:	18fb      	adds	r3, r7, r3
2000029e:	2200      	movs	r2, #0
200002a0:	701a      	strb	r2, [r3, #0]
200002a2:	e02a      	b.n	200002fa <keyb+0x72>
		deactivate_rows(GPIO_D);
200002a4:	4b1b      	ldr	r3, [pc, #108]	; (20000314 <keyb+0x8c>)
200002a6:	0018      	movs	r0, r3
200002a8:	f000 f886 	bl	200003b8 <deactivate_rows>
		activate_row(GPIO_D, row);
200002ac:	2317      	movs	r3, #23
200002ae:	18fb      	adds	r3, r7, r3
200002b0:	781b      	ldrb	r3, [r3, #0]
200002b2:	4a18      	ldr	r2, [pc, #96]	; (20000314 <keyb+0x8c>)
200002b4:	0019      	movs	r1, r3
200002b6:	0010      	movs	r0, r2
200002b8:	f000 f856 	bl	20000368 <activate_row>
		col = read_col(GPIO_D);
200002bc:	2316      	movs	r3, #22
200002be:	18fc      	adds	r4, r7, r3
200002c0:	4b14      	ldr	r3, [pc, #80]	; (20000314 <keyb+0x8c>)
200002c2:	0018      	movs	r0, r3
200002c4:	f000 f883 	bl	200003ce <read_col>
200002c8:	0003      	movs	r3, r0
200002ca:	7023      	strb	r3, [r4, #0]
		if(col != 0xFF) {
200002cc:	2316      	movs	r3, #22
200002ce:	18fb      	adds	r3, r7, r3
200002d0:	781b      	ldrb	r3, [r3, #0]
200002d2:	2bff      	cmp	r3, #255	; 0xff
200002d4:	d00a      	beq.n	200002ec <keyb+0x64>
			return keys[ 4 * row + col];
200002d6:	2317      	movs	r3, #23
200002d8:	18fb      	adds	r3, r7, r3
200002da:	781b      	ldrb	r3, [r3, #0]
200002dc:	009a      	lsls	r2, r3, #2
200002de:	2316      	movs	r3, #22
200002e0:	18fb      	adds	r3, r7, r3
200002e2:	781b      	ldrb	r3, [r3, #0]
200002e4:	18d3      	adds	r3, r2, r3
200002e6:	1d3a      	adds	r2, r7, #4
200002e8:	5cd3      	ldrb	r3, [r2, r3]
200002ea:	e00c      	b.n	20000306 <keyb+0x7e>
	for(row = 0; row < 4; row++) {
200002ec:	2317      	movs	r3, #23
200002ee:	18fb      	adds	r3, r7, r3
200002f0:	781a      	ldrb	r2, [r3, #0]
200002f2:	2317      	movs	r3, #23
200002f4:	18fb      	adds	r3, r7, r3
200002f6:	3201      	adds	r2, #1
200002f8:	701a      	strb	r2, [r3, #0]
200002fa:	2317      	movs	r3, #23
200002fc:	18fb      	adds	r3, r7, r3
200002fe:	781b      	ldrb	r3, [r3, #0]
20000300:	2b03      	cmp	r3, #3
20000302:	d9cf      	bls.n	200002a4 <keyb+0x1c>
		}
	}
	return 0xFF;
20000304:	23ff      	movs	r3, #255	; 0xff
}
20000306:	0018      	movs	r0, r3
20000308:	46bd      	mov	sp, r7
2000030a:	b007      	add	sp, #28
2000030c:	bd90      	pop	{r4, r7, pc}
2000030e:	46c0      	nop			; (mov r8, r8)
20000310:	20000e64 	andcs	r0, r0, r4, ror #28
20000314:	40020c00 	andmi	r0, r2, r0, lsl #24

20000318 <out7seg>:

void out7seg(GPIO* _gpio, unsigned char c) {
20000318:	b590      	push	{r4, r7, lr}
2000031a:	b08b      	sub	sp, #44	; 0x2c
2000031c:	af00      	add	r7, sp, #0
2000031e:	6078      	str	r0, [r7, #4]
20000320:	000a      	movs	r2, r1
20000322:	1cfb      	adds	r3, r7, #3
20000324:	701a      	strb	r2, [r3, #0]
    unsigned short result[] = {
20000326:	2308      	movs	r3, #8
20000328:	18fb      	adds	r3, r7, r3
2000032a:	4a0e      	ldr	r2, [pc, #56]	; (20000364 <out7seg+0x4c>)
2000032c:	ca13      	ldmia	r2!, {r0, r1, r4}
2000032e:	c313      	stmia	r3!, {r0, r1, r4}
20000330:	ca13      	ldmia	r2!, {r0, r1, r4}
20000332:	c313      	stmia	r3!, {r0, r1, r4}
20000334:	ca03      	ldmia	r2!, {r0, r1}
20000336:	c303      	stmia	r3!, {r0, r1}
		0x5E, // D
		0x80, // E
		0x76  // F
	};

    if(c > 0xF) {
20000338:	1cfb      	adds	r3, r7, #3
2000033a:	781b      	ldrb	r3, [r3, #0]
2000033c:	2b0f      	cmp	r3, #15
2000033e:	d903      	bls.n	20000348 <out7seg+0x30>
		_gpio->odrLow = 0x00;
20000340:	687b      	ldr	r3, [r7, #4]
20000342:	2200      	movs	r2, #0
20000344:	751a      	strb	r2, [r3, #20]
    } else {
		_gpio->odrLow = result[c];
    }
}
20000346:	e008      	b.n	2000035a <out7seg+0x42>
		_gpio->odrLow = result[c];
20000348:	1cfb      	adds	r3, r7, #3
2000034a:	781a      	ldrb	r2, [r3, #0]
2000034c:	2308      	movs	r3, #8
2000034e:	18fb      	adds	r3, r7, r3
20000350:	0052      	lsls	r2, r2, #1
20000352:	5ad3      	ldrh	r3, [r2, r3]
20000354:	b2da      	uxtb	r2, r3
20000356:	687b      	ldr	r3, [r7, #4]
20000358:	751a      	strb	r2, [r3, #20]
}
2000035a:	46c0      	nop			; (mov r8, r8)
2000035c:	46bd      	mov	sp, r7
2000035e:	b00b      	add	sp, #44	; 0x2c
20000360:	bd90      	pop	{r4, r7, pc}
20000362:	46c0      	nop			; (mov r8, r8)
20000364:	20000e74 	andcs	r0, r0, r4, ror lr

20000368 <activate_row>:

void activate_row(GPIO* _gpio, unsigned char row) {
20000368:	b580      	push	{r7, lr}
2000036a:	b082      	sub	sp, #8
2000036c:	af00      	add	r7, sp, #0
2000036e:	6078      	str	r0, [r7, #4]
20000370:	000a      	movs	r2, r1
20000372:	1cfb      	adds	r3, r7, #3
20000374:	701a      	strb	r2, [r3, #0]
	switch(row){
20000376:	1cfb      	adds	r3, r7, #3
20000378:	781b      	ldrb	r3, [r3, #0]
2000037a:	2b01      	cmp	r3, #1
2000037c:	d00c      	beq.n	20000398 <activate_row+0x30>
2000037e:	dc02      	bgt.n	20000386 <activate_row+0x1e>
20000380:	2b00      	cmp	r3, #0
20000382:	d005      	beq.n	20000390 <activate_row+0x28>
		case 0: _gpio->odrHigh = 0x10; break;
		case 1: _gpio->odrHigh = 0x20; break;
		case 2: _gpio->odrHigh = 0x40; break;
		case 3: _gpio->odrHigh = 0x80; break;
	}
}
20000384:	e014      	b.n	200003b0 <activate_row+0x48>
	switch(row){
20000386:	2b02      	cmp	r3, #2
20000388:	d00a      	beq.n	200003a0 <activate_row+0x38>
2000038a:	2b03      	cmp	r3, #3
2000038c:	d00c      	beq.n	200003a8 <activate_row+0x40>
}
2000038e:	e00f      	b.n	200003b0 <activate_row+0x48>
		case 0: _gpio->odrHigh = 0x10; break;
20000390:	687b      	ldr	r3, [r7, #4]
20000392:	2210      	movs	r2, #16
20000394:	755a      	strb	r2, [r3, #21]
20000396:	e00b      	b.n	200003b0 <activate_row+0x48>
		case 1: _gpio->odrHigh = 0x20; break;
20000398:	687b      	ldr	r3, [r7, #4]
2000039a:	2220      	movs	r2, #32
2000039c:	755a      	strb	r2, [r3, #21]
2000039e:	e007      	b.n	200003b0 <activate_row+0x48>
		case 2: _gpio->odrHigh = 0x40; break;
200003a0:	687b      	ldr	r3, [r7, #4]
200003a2:	2240      	movs	r2, #64	; 0x40
200003a4:	755a      	strb	r2, [r3, #21]
200003a6:	e003      	b.n	200003b0 <activate_row+0x48>
		case 3: _gpio->odrHigh = 0x80; break;
200003a8:	687b      	ldr	r3, [r7, #4]
200003aa:	2280      	movs	r2, #128	; 0x80
200003ac:	755a      	strb	r2, [r3, #21]
200003ae:	46c0      	nop			; (mov r8, r8)
}
200003b0:	46c0      	nop			; (mov r8, r8)
200003b2:	46bd      	mov	sp, r7
200003b4:	b002      	add	sp, #8
200003b6:	bd80      	pop	{r7, pc}

200003b8 <deactivate_rows>:

void deactivate_rows(GPIO* _gpio) {
200003b8:	b580      	push	{r7, lr}
200003ba:	b082      	sub	sp, #8
200003bc:	af00      	add	r7, sp, #0
200003be:	6078      	str	r0, [r7, #4]
	_gpio->odrHigh = 0x00;
200003c0:	687b      	ldr	r3, [r7, #4]
200003c2:	2200      	movs	r2, #0
200003c4:	755a      	strb	r2, [r3, #21]
}
200003c6:	46c0      	nop			; (mov r8, r8)
200003c8:	46bd      	mov	sp, r7
200003ca:	b002      	add	sp, #8
200003cc:	bd80      	pop	{r7, pc}

200003ce <read_col>:

unsigned char read_col(GPIO* _gpio) {
200003ce:	b580      	push	{r7, lr}
200003d0:	b082      	sub	sp, #8
200003d2:	af00      	add	r7, sp, #0
200003d4:	6078      	str	r0, [r7, #4]
	if(_gpio->idrHigh & 0x01) return 0;
200003d6:	687b      	ldr	r3, [r7, #4]
200003d8:	7c5b      	ldrb	r3, [r3, #17]
200003da:	001a      	movs	r2, r3
200003dc:	2301      	movs	r3, #1
200003de:	4013      	ands	r3, r2
200003e0:	d001      	beq.n	200003e6 <read_col+0x18>
200003e2:	2300      	movs	r3, #0
200003e4:	e018      	b.n	20000418 <read_col+0x4a>
	if(_gpio->idrHigh & 0x02) return 1;
200003e6:	687b      	ldr	r3, [r7, #4]
200003e8:	7c5b      	ldrb	r3, [r3, #17]
200003ea:	001a      	movs	r2, r3
200003ec:	2302      	movs	r3, #2
200003ee:	4013      	ands	r3, r2
200003f0:	d001      	beq.n	200003f6 <read_col+0x28>
200003f2:	2301      	movs	r3, #1
200003f4:	e010      	b.n	20000418 <read_col+0x4a>
	if(_gpio->idrHigh & 0x04) return 2;
200003f6:	687b      	ldr	r3, [r7, #4]
200003f8:	7c5b      	ldrb	r3, [r3, #17]
200003fa:	001a      	movs	r2, r3
200003fc:	2304      	movs	r3, #4
200003fe:	4013      	ands	r3, r2
20000400:	d001      	beq.n	20000406 <read_col+0x38>
20000402:	2302      	movs	r3, #2
20000404:	e008      	b.n	20000418 <read_col+0x4a>
	if(_gpio->idrHigh & 0x08) return 3;
20000406:	687b      	ldr	r3, [r7, #4]
20000408:	7c5b      	ldrb	r3, [r3, #17]
2000040a:	001a      	movs	r2, r3
2000040c:	2308      	movs	r3, #8
2000040e:	4013      	ands	r3, r2
20000410:	d001      	beq.n	20000416 <read_col+0x48>
20000412:	2303      	movs	r3, #3
20000414:	e000      	b.n	20000418 <read_col+0x4a>
	return 0xFF;
20000416:	23ff      	movs	r3, #255	; 0xff
}
20000418:	0018      	movs	r0, r3
2000041a:	46bd      	mov	sp, r7
2000041c:	b002      	add	sp, #8
2000041e:	bd80      	pop	{r7, pc}

20000420 <setup_for_ascii_display>:

void setup_for_ascii_display() {
20000420:	b580      	push	{r7, lr}
20000422:	af00      	add	r7, sp, #0
	// Sätt alla pinnar till utportar.
	GPIO_E->moder = 0x55555555;
20000424:	4b05      	ldr	r3, [pc, #20]	; (2000043c <setup_for_ascii_display+0x1c>)
20000426:	4a06      	ldr	r2, [pc, #24]	; (20000440 <setup_for_ascii_display+0x20>)
20000428:	601a      	str	r2, [r3, #0]

	// Sätt utportar till "push/pull".
	//GPIO_E->otyper = 0x00000000;

	// Sätt utportars hastighet till medium.
	GPIO_E->ospeedr = 0x55555555;
2000042a:	4b04      	ldr	r3, [pc, #16]	; (2000043c <setup_for_ascii_display+0x1c>)
2000042c:	4a04      	ldr	r2, [pc, #16]	; (20000440 <setup_for_ascii_display+0x20>)
2000042e:	609a      	str	r2, [r3, #8]
	//GPIO_E->ospeedr = 0x00000000;

	// inportar är "pull-up"
	//GPIO_E->pupdr = 0x55550000;

	ascii_init();
20000430:	f000 f808 	bl	20000444 <ascii_init>
}
20000434:	46c0      	nop			; (mov r8, r8)
20000436:	46bd      	mov	sp, r7
20000438:	bd80      	pop	{r7, pc}
2000043a:	46c0      	nop			; (mov r8, r8)
2000043c:	40021000 	andmi	r1, r2, r0
20000440:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000444 <ascii_init>:

void ascii_init(void) {
20000444:	b580      	push	{r7, lr}
20000446:	af00      	add	r7, sp, #0
	while((ascii_read_status() & 0x80) == 0x80)
20000448:	46c0      	nop			; (mov r8, r8)
2000044a:	f000 f8bd 	bl	200005c8 <ascii_read_status>
2000044e:	0003      	movs	r3, r0
20000450:	001a      	movs	r2, r3
20000452:	2380      	movs	r3, #128	; 0x80
20000454:	4013      	ands	r3, r2
20000456:	2b80      	cmp	r3, #128	; 0x80
20000458:	d0f7      	beq.n	2000044a <ascii_init+0x6>
	{} // vänta tills display är klar att ta emot komando.
	delay_mikro(20);
2000045a:	2014      	movs	r0, #20
2000045c:	f7ff fe69 	bl	20000132 <delay_mikro>
	// Function Set - 2 rader, 5x8 punkters tecken.
	ascii_write_cmd(0x38);
20000460:	2038      	movs	r0, #56	; 0x38
20000462:	f000 f887 	bl	20000574 <ascii_write_cmd>
	delay_mikro(39);
20000466:	2027      	movs	r0, #39	; 0x27
20000468:	f7ff fe63 	bl	20000132 <delay_mikro>


	while((ascii_read_status() & 0x80) == 0x80)
2000046c:	46c0      	nop			; (mov r8, r8)
2000046e:	f000 f8ab 	bl	200005c8 <ascii_read_status>
20000472:	0003      	movs	r3, r0
20000474:	001a      	movs	r2, r3
20000476:	2380      	movs	r3, #128	; 0x80
20000478:	4013      	ands	r3, r2
2000047a:	2b80      	cmp	r3, #128	; 0x80
2000047c:	d0f7      	beq.n	2000046e <ascii_init+0x2a>
	{} // vänta tills display är klar att ta emot komando.
	delay_mikro(20);
2000047e:	2014      	movs	r0, #20
20000480:	f7ff fe57 	bl	20000132 <delay_mikro>
	// Tänd display, tänd markör ("cursor"), konstant visning.
	ascii_write_cmd(0x0E);
20000484:	200e      	movs	r0, #14
20000486:	f000 f875 	bl	20000574 <ascii_write_cmd>
	delay_mikro(39);
2000048a:	2027      	movs	r0, #39	; 0x27
2000048c:	f7ff fe51 	bl	20000132 <delay_mikro>

	while((ascii_read_status() & 0x80) == 0x80)
20000490:	46c0      	nop			; (mov r8, r8)
20000492:	f000 f899 	bl	200005c8 <ascii_read_status>
20000496:	0003      	movs	r3, r0
20000498:	001a      	movs	r2, r3
2000049a:	2380      	movs	r3, #128	; 0x80
2000049c:	4013      	ands	r3, r2
2000049e:	2b80      	cmp	r3, #128	; 0x80
200004a0:	d0f7      	beq.n	20000492 <ascii_init+0x4e>
	{} // vänta tills display är klar att ta emot komando.
	delay_mikro(20);
200004a2:	2014      	movs	r0, #20
200004a4:	f7ff fe45 	bl	20000132 <delay_mikro>
	// Clear display.
	ascii_write_cmd(0x01);
200004a8:	2001      	movs	r0, #1
200004aa:	f000 f863 	bl	20000574 <ascii_write_cmd>
	delay_mikro(39);
200004ae:	2027      	movs	r0, #39	; 0x27
200004b0:	f7ff fe3f 	bl	20000132 <delay_mikro>

	while((ascii_read_status() & 0x80) == 0x80)
200004b4:	46c0      	nop			; (mov r8, r8)
200004b6:	f000 f887 	bl	200005c8 <ascii_read_status>
200004ba:	0003      	movs	r3, r0
200004bc:	001a      	movs	r2, r3
200004be:	2380      	movs	r3, #128	; 0x80
200004c0:	4013      	ands	r3, r2
200004c2:	2b80      	cmp	r3, #128	; 0x80
200004c4:	d0f7      	beq.n	200004b6 <ascii_init+0x72>
	{} // vänta tills display är klar att ta emot komando.
	delay_mikro(20);
200004c6:	2014      	movs	r0, #20
200004c8:	f7ff fe33 	bl	20000132 <delay_mikro>
	// Adressering med "increment", inget skift av adressbuffern.
	ascii_write_cmd(0x04);
200004cc:	2004      	movs	r0, #4
200004ce:	f000 f851 	bl	20000574 <ascii_write_cmd>
	delay_mikro(39);
200004d2:	2027      	movs	r0, #39	; 0x27
200004d4:	f7ff fe2d 	bl	20000132 <delay_mikro>
}
200004d8:	46c0      	nop			; (mov r8, r8)
200004da:	46bd      	mov	sp, r7
200004dc:	bd80      	pop	{r7, pc}

200004de <ascii_ctrl_bit_set>:

void ascii_ctrl_bit_set(unsigned char x) {
200004de:	b580      	push	{r7, lr}
200004e0:	b084      	sub	sp, #16
200004e2:	af00      	add	r7, sp, #0
200004e4:	0002      	movs	r2, r0
200004e6:	1dfb      	adds	r3, r7, #7
200004e8:	701a      	strb	r2, [r3, #0]
	//GPIO_E->odrLow |= x;

	unsigned char c;
	c = GPIO_E->odrLow;
200004ea:	4a0d      	ldr	r2, [pc, #52]	; (20000520 <ascii_ctrl_bit_set+0x42>)
200004ec:	230f      	movs	r3, #15
200004ee:	18fb      	adds	r3, r7, r3
200004f0:	7d12      	ldrb	r2, [r2, #20]
200004f2:	701a      	strb	r2, [r3, #0]
	c |= (B_SELECT | x);
200004f4:	1dfa      	adds	r2, r7, #7
200004f6:	230f      	movs	r3, #15
200004f8:	18fb      	adds	r3, r7, r3
200004fa:	7812      	ldrb	r2, [r2, #0]
200004fc:	781b      	ldrb	r3, [r3, #0]
200004fe:	4313      	orrs	r3, r2
20000500:	b2da      	uxtb	r2, r3
20000502:	230f      	movs	r3, #15
20000504:	18fb      	adds	r3, r7, r3
20000506:	2104      	movs	r1, #4
20000508:	430a      	orrs	r2, r1
2000050a:	701a      	strb	r2, [r3, #0]
	GPIO_E->odrLow = c;
2000050c:	4a04      	ldr	r2, [pc, #16]	; (20000520 <ascii_ctrl_bit_set+0x42>)
2000050e:	230f      	movs	r3, #15
20000510:	18fb      	adds	r3, r7, r3
20000512:	781b      	ldrb	r3, [r3, #0]
20000514:	7513      	strb	r3, [r2, #20]
}
20000516:	46c0      	nop			; (mov r8, r8)
20000518:	46bd      	mov	sp, r7
2000051a:	b004      	add	sp, #16
2000051c:	bd80      	pop	{r7, pc}
2000051e:	46c0      	nop			; (mov r8, r8)
20000520:	40021000 	andmi	r1, r2, r0

20000524 <ascii_ctrl_bit_clear>:

void ascii_ctrl_bit_clear(unsigned char x) {
20000524:	b580      	push	{r7, lr}
20000526:	b084      	sub	sp, #16
20000528:	af00      	add	r7, sp, #0
2000052a:	0002      	movs	r2, r0
2000052c:	1dfb      	adds	r3, r7, #7
2000052e:	701a      	strb	r2, [r3, #0]
	//GPIO_E->odrLow &= (~x);

	unsigned char c;
	c = GPIO_E->odrLow;
20000530:	4a0f      	ldr	r2, [pc, #60]	; (20000570 <ascii_ctrl_bit_clear+0x4c>)
20000532:	230f      	movs	r3, #15
20000534:	18fb      	adds	r3, r7, r3
20000536:	7d12      	ldrb	r2, [r2, #20]
20000538:	701a      	strb	r2, [r3, #0]
	c = (B_SELECT | c & ~x);
2000053a:	1dfb      	adds	r3, r7, #7
2000053c:	781b      	ldrb	r3, [r3, #0]
2000053e:	b25b      	sxtb	r3, r3
20000540:	43db      	mvns	r3, r3
20000542:	b25b      	sxtb	r3, r3
20000544:	220f      	movs	r2, #15
20000546:	18ba      	adds	r2, r7, r2
20000548:	7812      	ldrb	r2, [r2, #0]
2000054a:	b252      	sxtb	r2, r2
2000054c:	4013      	ands	r3, r2
2000054e:	b25b      	sxtb	r3, r3
20000550:	2204      	movs	r2, #4
20000552:	4313      	orrs	r3, r2
20000554:	b25a      	sxtb	r2, r3
20000556:	230f      	movs	r3, #15
20000558:	18fb      	adds	r3, r7, r3
2000055a:	701a      	strb	r2, [r3, #0]
	GPIO_E->odrLow = c;
2000055c:	4a04      	ldr	r2, [pc, #16]	; (20000570 <ascii_ctrl_bit_clear+0x4c>)
2000055e:	230f      	movs	r3, #15
20000560:	18fb      	adds	r3, r7, r3
20000562:	781b      	ldrb	r3, [r3, #0]
20000564:	7513      	strb	r3, [r2, #20]
}
20000566:	46c0      	nop			; (mov r8, r8)
20000568:	46bd      	mov	sp, r7
2000056a:	b004      	add	sp, #16
2000056c:	bd80      	pop	{r7, pc}
2000056e:	46c0      	nop			; (mov r8, r8)
20000570:	40021000 	andmi	r1, r2, r0

20000574 <ascii_write_cmd>:

void ascii_write_cmd(unsigned char command) {
20000574:	b580      	push	{r7, lr}
20000576:	b082      	sub	sp, #8
20000578:	af00      	add	r7, sp, #0
2000057a:	0002      	movs	r2, r0
2000057c:	1dfb      	adds	r3, r7, #7
2000057e:	701a      	strb	r2, [r3, #0]
	// Doesn't wait or check for the status flag...
	ascii_ctrl_bit_clear(B_RS);
20000580:	2001      	movs	r0, #1
20000582:	f7ff ffcf 	bl	20000524 <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_clear(B_RW);
20000586:	2002      	movs	r0, #2
20000588:	f7ff ffcc 	bl	20000524 <ascii_ctrl_bit_clear>
	ascii_write_controller(command);
2000058c:	1dfb      	adds	r3, r7, #7
2000058e:	781b      	ldrb	r3, [r3, #0]
20000590:	0018      	movs	r0, r3
20000592:	f000 f861 	bl	20000658 <ascii_write_controller>
}
20000596:	46c0      	nop			; (mov r8, r8)
20000598:	46bd      	mov	sp, r7
2000059a:	b002      	add	sp, #8
2000059c:	bd80      	pop	{r7, pc}

2000059e <ascii_write_data>:

void ascii_write_data(unsigned char data) {
2000059e:	b580      	push	{r7, lr}
200005a0:	b082      	sub	sp, #8
200005a2:	af00      	add	r7, sp, #0
200005a4:	0002      	movs	r2, r0
200005a6:	1dfb      	adds	r3, r7, #7
200005a8:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RS);
200005aa:	2001      	movs	r0, #1
200005ac:	f7ff ff97 	bl	200004de <ascii_ctrl_bit_set>
	ascii_ctrl_bit_clear(B_RW);
200005b0:	2002      	movs	r0, #2
200005b2:	f7ff ffb7 	bl	20000524 <ascii_ctrl_bit_clear>
	ascii_write_controller(data);
200005b6:	1dfb      	adds	r3, r7, #7
200005b8:	781b      	ldrb	r3, [r3, #0]
200005ba:	0018      	movs	r0, r3
200005bc:	f000 f84c 	bl	20000658 <ascii_write_controller>
}
200005c0:	46c0      	nop			; (mov r8, r8)
200005c2:	46bd      	mov	sp, r7
200005c4:	b002      	add	sp, #8
200005c6:	bd80      	pop	{r7, pc}

200005c8 <ascii_read_status>:

unsigned char ascii_read_status(void) {
200005c8:	b590      	push	{r4, r7, lr}
200005ca:	b083      	sub	sp, #12
200005cc:	af00      	add	r7, sp, #0
	unsigned char read_value;

	// Sätt pinnar 15-8 till ingångar.
	GPIO_E->moder &= 0x0000FFFF;
200005ce:	4b0e      	ldr	r3, [pc, #56]	; (20000608 <ascii_read_status+0x40>)
200005d0:	4a0d      	ldr	r2, [pc, #52]	; (20000608 <ascii_read_status+0x40>)
200005d2:	6812      	ldr	r2, [r2, #0]
200005d4:	0412      	lsls	r2, r2, #16
200005d6:	0c12      	lsrs	r2, r2, #16
200005d8:	601a      	str	r2, [r3, #0]

	ascii_ctrl_bit_clear(B_RS);
200005da:	2001      	movs	r0, #1
200005dc:	f7ff ffa2 	bl	20000524 <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_set(B_RW);
200005e0:	2002      	movs	r0, #2
200005e2:	f7ff ff7c 	bl	200004de <ascii_ctrl_bit_set>
	read_value = ascii_read_controller();
200005e6:	1dfc      	adds	r4, r7, #7
200005e8:	f000 f84e 	bl	20000688 <ascii_read_controller>
200005ec:	0003      	movs	r3, r0
200005ee:	7023      	strb	r3, [r4, #0]

	// Sätt pinnar 15-8 till utgångar igen.
	GPIO_E->moder |= 0x55550000;
200005f0:	4b05      	ldr	r3, [pc, #20]	; (20000608 <ascii_read_status+0x40>)
200005f2:	4a05      	ldr	r2, [pc, #20]	; (20000608 <ascii_read_status+0x40>)
200005f4:	6812      	ldr	r2, [r2, #0]
200005f6:	4905      	ldr	r1, [pc, #20]	; (2000060c <ascii_read_status+0x44>)
200005f8:	430a      	orrs	r2, r1
200005fa:	601a      	str	r2, [r3, #0]

	return read_value;
200005fc:	1dfb      	adds	r3, r7, #7
200005fe:	781b      	ldrb	r3, [r3, #0]
}
20000600:	0018      	movs	r0, r3
20000602:	46bd      	mov	sp, r7
20000604:	b003      	add	sp, #12
20000606:	bd90      	pop	{r4, r7, pc}
20000608:	40021000 	andmi	r1, r2, r0
2000060c:	55550000 	ldrbpl	r0, [r5, #-0]

20000610 <ascii_read_data>:

unsigned char ascii_read_data(void) {
20000610:	b590      	push	{r4, r7, lr}
20000612:	b083      	sub	sp, #12
20000614:	af00      	add	r7, sp, #0
	unsigned char read_value;

	// Sätt pinnar 15-8 till ingångar.
	GPIO_E->moder &= 0x0000FFFF;
20000616:	4b0e      	ldr	r3, [pc, #56]	; (20000650 <ascii_read_data+0x40>)
20000618:	4a0d      	ldr	r2, [pc, #52]	; (20000650 <ascii_read_data+0x40>)
2000061a:	6812      	ldr	r2, [r2, #0]
2000061c:	0412      	lsls	r2, r2, #16
2000061e:	0c12      	lsrs	r2, r2, #16
20000620:	601a      	str	r2, [r3, #0]

	ascii_ctrl_bit_set(B_RS);
20000622:	2001      	movs	r0, #1
20000624:	f7ff ff5b 	bl	200004de <ascii_ctrl_bit_set>
	ascii_ctrl_bit_set(B_RW);
20000628:	2002      	movs	r0, #2
2000062a:	f7ff ff58 	bl	200004de <ascii_ctrl_bit_set>
	read_value = ascii_read_controller();
2000062e:	1dfc      	adds	r4, r7, #7
20000630:	f000 f82a 	bl	20000688 <ascii_read_controller>
20000634:	0003      	movs	r3, r0
20000636:	7023      	strb	r3, [r4, #0]

	// Sätt pinnar 15-8 till utgångar igen.
	GPIO_E->moder |= 0xFFFF0000;
20000638:	4b05      	ldr	r3, [pc, #20]	; (20000650 <ascii_read_data+0x40>)
2000063a:	4a05      	ldr	r2, [pc, #20]	; (20000650 <ascii_read_data+0x40>)
2000063c:	6812      	ldr	r2, [r2, #0]
2000063e:	4905      	ldr	r1, [pc, #20]	; (20000654 <ascii_read_data+0x44>)
20000640:	430a      	orrs	r2, r1
20000642:	601a      	str	r2, [r3, #0]

	return read_value;
20000644:	1dfb      	adds	r3, r7, #7
20000646:	781b      	ldrb	r3, [r3, #0]
}
20000648:	0018      	movs	r0, r3
2000064a:	46bd      	mov	sp, r7
2000064c:	b003      	add	sp, #12
2000064e:	bd90      	pop	{r4, r7, pc}
20000650:	40021000 	andmi	r1, r2, r0
20000654:	ffff0000 			; <UNDEFINED> instruction: 0xffff0000

20000658 <ascii_write_controller>:

void ascii_write_controller(unsigned char byte) {
20000658:	b580      	push	{r7, lr}
2000065a:	b082      	sub	sp, #8
2000065c:	af00      	add	r7, sp, #0
2000065e:	0002      	movs	r2, r0
20000660:	1dfb      	adds	r3, r7, #7
20000662:	701a      	strb	r2, [r3, #0]
	// Delay40ns is redundant
	ascii_ctrl_bit_set(B_E);
20000664:	2040      	movs	r0, #64	; 0x40
20000666:	f7ff ff3a 	bl	200004de <ascii_ctrl_bit_set>
	GPIO_E->odrHigh = byte;
2000066a:	4a06      	ldr	r2, [pc, #24]	; (20000684 <ascii_write_controller+0x2c>)
2000066c:	1dfb      	adds	r3, r7, #7
2000066e:	781b      	ldrb	r3, [r3, #0]
20000670:	7553      	strb	r3, [r2, #21]
	delay_250ns();
20000672:	f7ff fd35 	bl	200000e0 <delay_250ns>
	ascii_ctrl_bit_clear(B_E);
20000676:	2040      	movs	r0, #64	; 0x40
20000678:	f7ff ff54 	bl	20000524 <ascii_ctrl_bit_clear>
	// Delay10ns is redundant
}
2000067c:	46c0      	nop			; (mov r8, r8)
2000067e:	46bd      	mov	sp, r7
20000680:	b002      	add	sp, #8
20000682:	bd80      	pop	{r7, pc}
20000684:	40021000 	andmi	r1, r2, r0

20000688 <ascii_read_controller>:

unsigned char ascii_read_controller(void) {
20000688:	b580      	push	{r7, lr}
2000068a:	b082      	sub	sp, #8
2000068c:	af00      	add	r7, sp, #0
	unsigned char read_value;
	ascii_ctrl_bit_set(B_E);
2000068e:	2040      	movs	r0, #64	; 0x40
20000690:	f7ff ff25 	bl	200004de <ascii_ctrl_bit_set>
	delay_250ns();
20000694:	f7ff fd24 	bl	200000e0 <delay_250ns>
	delay_250ns();
20000698:	f7ff fd22 	bl	200000e0 <delay_250ns>
	read_value = GPIO_E->idrHigh;
2000069c:	4a06      	ldr	r2, [pc, #24]	; (200006b8 <ascii_read_controller+0x30>)
2000069e:	1dfb      	adds	r3, r7, #7
200006a0:	7c52      	ldrb	r2, [r2, #17]
200006a2:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_E);
200006a4:	2040      	movs	r0, #64	; 0x40
200006a6:	f7ff ff3d 	bl	20000524 <ascii_ctrl_bit_clear>
	return read_value;
200006aa:	1dfb      	adds	r3, r7, #7
200006ac:	781b      	ldrb	r3, [r3, #0]
}
200006ae:	0018      	movs	r0, r3
200006b0:	46bd      	mov	sp, r7
200006b2:	b002      	add	sp, #8
200006b4:	bd80      	pop	{r7, pc}
200006b6:	46c0      	nop			; (mov r8, r8)
200006b8:	40021000 	andmi	r1, r2, r0

200006bc <ascii_gotoxy>:

void ascii_gotoxy(int x, int y) {
200006bc:	b580      	push	{r7, lr}
200006be:	b084      	sub	sp, #16
200006c0:	af00      	add	r7, sp, #0
200006c2:	6078      	str	r0, [r7, #4]
200006c4:	6039      	str	r1, [r7, #0]
	if(!(y == 1 || y == 2)) return;
200006c6:	683b      	ldr	r3, [r7, #0]
200006c8:	2b01      	cmp	r3, #1
200006ca:	d002      	beq.n	200006d2 <ascii_gotoxy+0x16>
200006cc:	683b      	ldr	r3, [r7, #0]
200006ce:	2b02      	cmp	r3, #2
200006d0:	d11a      	bne.n	20000708 <ascii_gotoxy+0x4c>
	unsigned char address = x - 1;
200006d2:	687b      	ldr	r3, [r7, #4]
200006d4:	b2da      	uxtb	r2, r3
200006d6:	230f      	movs	r3, #15
200006d8:	18fb      	adds	r3, r7, r3
200006da:	3a01      	subs	r2, #1
200006dc:	701a      	strb	r2, [r3, #0]
	if(y == 2){
200006de:	683b      	ldr	r3, [r7, #0]
200006e0:	2b02      	cmp	r3, #2
200006e2:	d106      	bne.n	200006f2 <ascii_gotoxy+0x36>
		address += 0x40;
200006e4:	230f      	movs	r3, #15
200006e6:	18fb      	adds	r3, r7, r3
200006e8:	220f      	movs	r2, #15
200006ea:	18ba      	adds	r2, r7, r2
200006ec:	7812      	ldrb	r2, [r2, #0]
200006ee:	3240      	adds	r2, #64	; 0x40
200006f0:	701a      	strb	r2, [r3, #0]
	}
	ascii_write_cmd(0x80 | address);
200006f2:	230f      	movs	r3, #15
200006f4:	18fb      	adds	r3, r7, r3
200006f6:	781b      	ldrb	r3, [r3, #0]
200006f8:	2280      	movs	r2, #128	; 0x80
200006fa:	4252      	negs	r2, r2
200006fc:	4313      	orrs	r3, r2
200006fe:	b2db      	uxtb	r3, r3
20000700:	0018      	movs	r0, r3
20000702:	f7ff ff37 	bl	20000574 <ascii_write_cmd>
20000706:	e000      	b.n	2000070a <ascii_gotoxy+0x4e>
	if(!(y == 1 || y == 2)) return;
20000708:	46c0      	nop			; (mov r8, r8)
}
2000070a:	46bd      	mov	sp, r7
2000070c:	b004      	add	sp, #16
2000070e:	bd80      	pop	{r7, pc}

20000710 <ascii_write_char>:

void ascii_write_char(unsigned char c) {
20000710:	b580      	push	{r7, lr}
20000712:	b082      	sub	sp, #8
20000714:	af00      	add	r7, sp, #0
20000716:	0002      	movs	r2, r0
20000718:	1dfb      	adds	r3, r7, #7
2000071a:	701a      	strb	r2, [r3, #0]
	while((ascii_read_status() & 0x80) == 0x80)
2000071c:	46c0      	nop			; (mov r8, r8)
2000071e:	f7ff ff53 	bl	200005c8 <ascii_read_status>
20000722:	0003      	movs	r3, r0
20000724:	001a      	movs	r2, r3
20000726:	2380      	movs	r3, #128	; 0x80
20000728:	4013      	ands	r3, r2
2000072a:	2b80      	cmp	r3, #128	; 0x80
2000072c:	d0f7      	beq.n	2000071e <ascii_write_char+0xe>
	{} // vänta tills display är klar att ta emot komando.
	delay_mikro(8);
2000072e:	2008      	movs	r0, #8
20000730:	f7ff fcff 	bl	20000132 <delay_mikro>
	ascii_write_data(c);
20000734:	1dfb      	adds	r3, r7, #7
20000736:	781b      	ldrb	r3, [r3, #0]
20000738:	0018      	movs	r0, r3
2000073a:	f7ff ff30 	bl	2000059e <ascii_write_data>
	delay_mikro(43);
2000073e:	202b      	movs	r0, #43	; 0x2b
20000740:	f7ff fcf7 	bl	20000132 <delay_mikro>
	//delay_mikro(100000);
}
20000744:	46c0      	nop			; (mov r8, r8)
20000746:	46bd      	mov	sp, r7
20000748:	b002      	add	sp, #8
2000074a:	bd80      	pop	{r7, pc}

2000074c <graphic_ctrl_bit_set>:

void graphic_ctrl_bit_set(uint8_t x) {
2000074c:	b580      	push	{r7, lr}
2000074e:	b084      	sub	sp, #16
20000750:	af00      	add	r7, sp, #0
20000752:	0002      	movs	r2, r0
20000754:	1dfb      	adds	r3, r7, #7
20000756:	701a      	strb	r2, [r3, #0]
	uint8_t c;
	c = GPIO_E->odrLow;
20000758:	4a12      	ldr	r2, [pc, #72]	; (200007a4 <graphic_ctrl_bit_set+0x58>)
2000075a:	230f      	movs	r3, #15
2000075c:	18fb      	adds	r3, r7, r3
2000075e:	7d12      	ldrb	r2, [r2, #20]
20000760:	701a      	strb	r2, [r3, #0]
	c &= ~B_SELECT;
20000762:	230f      	movs	r3, #15
20000764:	18fb      	adds	r3, r7, r3
20000766:	220f      	movs	r2, #15
20000768:	18ba      	adds	r2, r7, r2
2000076a:	7812      	ldrb	r2, [r2, #0]
2000076c:	2104      	movs	r1, #4
2000076e:	438a      	bics	r2, r1
20000770:	701a      	strb	r2, [r3, #0]
	c |= (~B_SELECT & x);
20000772:	1dfb      	adds	r3, r7, #7
20000774:	781b      	ldrb	r3, [r3, #0]
20000776:	b25b      	sxtb	r3, r3
20000778:	2204      	movs	r2, #4
2000077a:	4393      	bics	r3, r2
2000077c:	b25a      	sxtb	r2, r3
2000077e:	230f      	movs	r3, #15
20000780:	18fb      	adds	r3, r7, r3
20000782:	781b      	ldrb	r3, [r3, #0]
20000784:	b25b      	sxtb	r3, r3
20000786:	4313      	orrs	r3, r2
20000788:	b25a      	sxtb	r2, r3
2000078a:	230f      	movs	r3, #15
2000078c:	18fb      	adds	r3, r7, r3
2000078e:	701a      	strb	r2, [r3, #0]
	GPIO_E->odrLow = c;
20000790:	4a04      	ldr	r2, [pc, #16]	; (200007a4 <graphic_ctrl_bit_set+0x58>)
20000792:	230f      	movs	r3, #15
20000794:	18fb      	adds	r3, r7, r3
20000796:	781b      	ldrb	r3, [r3, #0]
20000798:	7513      	strb	r3, [r2, #20]
}
2000079a:	46c0      	nop			; (mov r8, r8)
2000079c:	46bd      	mov	sp, r7
2000079e:	b004      	add	sp, #16
200007a0:	bd80      	pop	{r7, pc}
200007a2:	46c0      	nop			; (mov r8, r8)
200007a4:	40021000 	andmi	r1, r2, r0

200007a8 <graphic_ctrl_bit_clear>:

void graphic_ctrl_bit_clear(uint8_t x) {
200007a8:	b580      	push	{r7, lr}
200007aa:	b084      	sub	sp, #16
200007ac:	af00      	add	r7, sp, #0
200007ae:	0002      	movs	r2, r0
200007b0:	1dfb      	adds	r3, r7, #7
200007b2:	701a      	strb	r2, [r3, #0]
	uint8_t c;
	c = GPIO_E->odrLow;
200007b4:	4a11      	ldr	r2, [pc, #68]	; (200007fc <graphic_ctrl_bit_clear+0x54>)
200007b6:	230f      	movs	r3, #15
200007b8:	18fb      	adds	r3, r7, r3
200007ba:	7d12      	ldrb	r2, [r2, #20]
200007bc:	701a      	strb	r2, [r3, #0]
	c &= ~B_SELECT;
200007be:	230f      	movs	r3, #15
200007c0:	18fb      	adds	r3, r7, r3
200007c2:	220f      	movs	r2, #15
200007c4:	18ba      	adds	r2, r7, r2
200007c6:	7812      	ldrb	r2, [r2, #0]
200007c8:	2104      	movs	r1, #4
200007ca:	438a      	bics	r2, r1
200007cc:	701a      	strb	r2, [r3, #0]
	c &= ~x;
200007ce:	1dfb      	adds	r3, r7, #7
200007d0:	781b      	ldrb	r3, [r3, #0]
200007d2:	b25b      	sxtb	r3, r3
200007d4:	43db      	mvns	r3, r3
200007d6:	b25b      	sxtb	r3, r3
200007d8:	220f      	movs	r2, #15
200007da:	18ba      	adds	r2, r7, r2
200007dc:	7812      	ldrb	r2, [r2, #0]
200007de:	b252      	sxtb	r2, r2
200007e0:	4013      	ands	r3, r2
200007e2:	b25a      	sxtb	r2, r3
200007e4:	230f      	movs	r3, #15
200007e6:	18fb      	adds	r3, r7, r3
200007e8:	701a      	strb	r2, [r3, #0]
	GPIO_E->odrLow = c;
200007ea:	4a04      	ldr	r2, [pc, #16]	; (200007fc <graphic_ctrl_bit_clear+0x54>)
200007ec:	230f      	movs	r3, #15
200007ee:	18fb      	adds	r3, r7, r3
200007f0:	781b      	ldrb	r3, [r3, #0]
200007f2:	7513      	strb	r3, [r2, #20]
}
200007f4:	46c0      	nop			; (mov r8, r8)
200007f6:	46bd      	mov	sp, r7
200007f8:	b004      	add	sp, #16
200007fa:	bd80      	pop	{r7, pc}
200007fc:	40021000 	andmi	r1, r2, r0

20000800 <select_controller>:

void select_controller(uint8_t controller) {
20000800:	b580      	push	{r7, lr}
20000802:	b082      	sub	sp, #8
20000804:	af00      	add	r7, sp, #0
20000806:	0002      	movs	r2, r0
20000808:	1dfb      	adds	r3, r7, #7
2000080a:	701a      	strb	r2, [r3, #0]
	switch(controller){
2000080c:	1dfb      	adds	r3, r7, #7
2000080e:	781b      	ldrb	r3, [r3, #0]
20000810:	2b08      	cmp	r3, #8
20000812:	d00c      	beq.n	2000082e <select_controller+0x2e>
20000814:	dc02      	bgt.n	2000081c <select_controller+0x1c>
20000816:	2b00      	cmp	r3, #0
20000818:	d005      	beq.n	20000826 <select_controller+0x26>
			break;
		case B_CS1|B_CS2 :
			graphic_ctrl_bit_set(B_CS1|B_CS2);
			break;
	}
}
2000081a:	e01a      	b.n	20000852 <select_controller+0x52>
	switch(controller){
2000081c:	2b10      	cmp	r3, #16
2000081e:	d00d      	beq.n	2000083c <select_controller+0x3c>
20000820:	2b18      	cmp	r3, #24
20000822:	d012      	beq.n	2000084a <select_controller+0x4a>
}
20000824:	e015      	b.n	20000852 <select_controller+0x52>
			graphic_ctrl_bit_clear(B_CS1|B_CS2);
20000826:	2018      	movs	r0, #24
20000828:	f7ff ffbe 	bl	200007a8 <graphic_ctrl_bit_clear>
			break;
2000082c:	e011      	b.n	20000852 <select_controller+0x52>
			graphic_ctrl_bit_set(B_CS1);
2000082e:	2008      	movs	r0, #8
20000830:	f7ff ff8c 	bl	2000074c <graphic_ctrl_bit_set>
			graphic_ctrl_bit_clear(B_CS2);
20000834:	2010      	movs	r0, #16
20000836:	f7ff ffb7 	bl	200007a8 <graphic_ctrl_bit_clear>
			break;
2000083a:	e00a      	b.n	20000852 <select_controller+0x52>
			graphic_ctrl_bit_set(B_CS2);
2000083c:	2010      	movs	r0, #16
2000083e:	f7ff ff85 	bl	2000074c <graphic_ctrl_bit_set>
			graphic_ctrl_bit_clear(B_CS1);
20000842:	2008      	movs	r0, #8
20000844:	f7ff ffb0 	bl	200007a8 <graphic_ctrl_bit_clear>
			break;
20000848:	e003      	b.n	20000852 <select_controller+0x52>
			graphic_ctrl_bit_set(B_CS1|B_CS2);
2000084a:	2018      	movs	r0, #24
2000084c:	f7ff ff7e 	bl	2000074c <graphic_ctrl_bit_set>
			break;
20000850:	46c0      	nop			; (mov r8, r8)
}
20000852:	46c0      	nop			; (mov r8, r8)
20000854:	46bd      	mov	sp, r7
20000856:	b002      	add	sp, #8
20000858:	bd80      	pop	{r7, pc}

2000085a <graphic_initialize>:

void graphic_initialize(void) {
2000085a:	b580      	push	{r7, lr}
2000085c:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_set(B_E);
2000085e:	2040      	movs	r0, #64	; 0x40
20000860:	f7ff ff74 	bl	2000074c <graphic_ctrl_bit_set>
	delay_mikro(10);
20000864:	200a      	movs	r0, #10
20000866:	f7ff fc64 	bl	20000132 <delay_mikro>
	graphic_ctrl_bit_clear(B_CS1|B_CS2|B_RST|B_E);
2000086a:	2078      	movs	r0, #120	; 0x78
2000086c:	f7ff ff9c 	bl	200007a8 <graphic_ctrl_bit_clear>
	delay_mikro(30);
20000870:	201e      	movs	r0, #30
20000872:	f7ff fc5e 	bl	20000132 <delay_mikro>
	graphic_ctrl_bit_set(B_RST);
20000876:	2020      	movs	r0, #32
20000878:	f7ff ff68 	bl	2000074c <graphic_ctrl_bit_set>
	delay_mikro(100);
2000087c:	2064      	movs	r0, #100	; 0x64
2000087e:	f7ff fc58 	bl	20000132 <delay_mikro>
	graphic_write_command(LCD_OFF, B_CS1|B_CS2);
20000882:	2118      	movs	r1, #24
20000884:	203e      	movs	r0, #62	; 0x3e
20000886:	f000 f8d3 	bl	20000a30 <graphic_write_command>
	graphic_write_command(LCD_ON, B_CS1|B_CS2);
2000088a:	2118      	movs	r1, #24
2000088c:	203f      	movs	r0, #63	; 0x3f
2000088e:	f000 f8cf 	bl	20000a30 <graphic_write_command>
	graphic_write_command(LCD_DISP_START, B_CS1|B_CS2);
20000892:	2118      	movs	r1, #24
20000894:	20c0      	movs	r0, #192	; 0xc0
20000896:	f000 f8cb 	bl	20000a30 <graphic_write_command>
	graphic_write_command(LCD_SET_ADD, B_CS1|B_CS2);
2000089a:	2118      	movs	r1, #24
2000089c:	2040      	movs	r0, #64	; 0x40
2000089e:	f000 f8c7 	bl	20000a30 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE, B_CS1|B_CS2);
200008a2:	2118      	movs	r1, #24
200008a4:	20b8      	movs	r0, #184	; 0xb8
200008a6:	f000 f8c3 	bl	20000a30 <graphic_write_command>
	select_controller(0);
200008aa:	2000      	movs	r0, #0
200008ac:	f7ff ffa8 	bl	20000800 <select_controller>
}
200008b0:	46c0      	nop			; (mov r8, r8)
200008b2:	46bd      	mov	sp, r7
200008b4:	bd80      	pop	{r7, pc}

200008b6 <graphic_wait_ready>:

void graphic_wait_ready(void) {
200008b6:	b580      	push	{r7, lr}
200008b8:	b082      	sub	sp, #8
200008ba:	af00      	add	r7, sp, #0
	uint8_t c;
	graphic_ctrl_bit_clear(B_E);
200008bc:	2040      	movs	r0, #64	; 0x40
200008be:	f7ff ff73 	bl	200007a8 <graphic_ctrl_bit_clear>
	GPIO_E->moder = 0x00005555; // 15-8 inputs, 7-0 outputs
200008c2:	4b14      	ldr	r3, [pc, #80]	; (20000914 <graphic_wait_ready+0x5e>)
200008c4:	4a14      	ldr	r2, [pc, #80]	; (20000918 <graphic_wait_ready+0x62>)
200008c6:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_RS);
200008c8:	2001      	movs	r0, #1
200008ca:	f7ff ff6d 	bl	200007a8 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_set(B_RW);
200008ce:	2002      	movs	r0, #2
200008d0:	f7ff ff3c 	bl	2000074c <graphic_ctrl_bit_set>
	delay_500ns();
200008d4:	f7ff fc24 	bl	20000120 <delay_500ns>
	while(1) {
		graphic_ctrl_bit_set(B_E);
200008d8:	2040      	movs	r0, #64	; 0x40
200008da:	f7ff ff37 	bl	2000074c <graphic_ctrl_bit_set>
		delay_500ns();
200008de:	f7ff fc1f 	bl	20000120 <delay_500ns>
		c = GPIO_E->idrHigh & LCD_BUSY;
200008e2:	4b0c      	ldr	r3, [pc, #48]	; (20000914 <graphic_wait_ready+0x5e>)
200008e4:	7c5b      	ldrb	r3, [r3, #17]
200008e6:	b2da      	uxtb	r2, r3
200008e8:	1dfb      	adds	r3, r7, #7
200008ea:	217f      	movs	r1, #127	; 0x7f
200008ec:	438a      	bics	r2, r1
200008ee:	701a      	strb	r2, [r3, #0]
		graphic_ctrl_bit_clear(B_E);
200008f0:	2040      	movs	r0, #64	; 0x40
200008f2:	f7ff ff59 	bl	200007a8 <graphic_ctrl_bit_clear>
		delay_500ns();
200008f6:	f7ff fc13 	bl	20000120 <delay_500ns>
		if( c == 0 ) break;
200008fa:	1dfb      	adds	r3, r7, #7
200008fc:	781b      	ldrb	r3, [r3, #0]
200008fe:	2b00      	cmp	r3, #0
20000900:	d000      	beq.n	20000904 <graphic_wait_ready+0x4e>
		graphic_ctrl_bit_set(B_E);
20000902:	e7e9      	b.n	200008d8 <graphic_wait_ready+0x22>
		if( c == 0 ) break;
20000904:	46c0      	nop			; (mov r8, r8)
	}
	GPIO_E->moder = 0x55555555; // 15-0 outputs
20000906:	4b03      	ldr	r3, [pc, #12]	; (20000914 <graphic_wait_ready+0x5e>)
20000908:	4a04      	ldr	r2, [pc, #16]	; (2000091c <graphic_wait_ready+0x66>)
2000090a:	601a      	str	r2, [r3, #0]
}
2000090c:	46c0      	nop			; (mov r8, r8)
2000090e:	46bd      	mov	sp, r7
20000910:	b002      	add	sp, #8
20000912:	bd80      	pop	{r7, pc}
20000914:	40021000 	andmi	r1, r2, r0
20000918:	00005555 	andeq	r5, r0, r5, asr r5
2000091c:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000920 <graphic_read>:

uint8_t graphic_read(uint8_t controller) {
20000920:	b580      	push	{r7, lr}
20000922:	b084      	sub	sp, #16
20000924:	af00      	add	r7, sp, #0
20000926:	0002      	movs	r2, r0
20000928:	1dfb      	adds	r3, r7, #7
2000092a:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
2000092c:	2040      	movs	r0, #64	; 0x40
2000092e:	f7ff ff3b 	bl	200007a8 <graphic_ctrl_bit_clear>
	GPIO_E->moder = 0x00005555;
20000932:	4b1c      	ldr	r3, [pc, #112]	; (200009a4 <graphic_read+0x84>)
20000934:	4a1c      	ldr	r2, [pc, #112]	; (200009a8 <graphic_read+0x88>)
20000936:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_set(B_RW);
20000938:	2002      	movs	r0, #2
2000093a:	f7ff ff07 	bl	2000074c <graphic_ctrl_bit_set>
	graphic_ctrl_bit_set(B_RS);
2000093e:	2001      	movs	r0, #1
20000940:	f7ff ff04 	bl	2000074c <graphic_ctrl_bit_set>
	select_controller(controller);
20000944:	1dfb      	adds	r3, r7, #7
20000946:	781b      	ldrb	r3, [r3, #0]
20000948:	0018      	movs	r0, r3
2000094a:	f7ff ff59 	bl	20000800 <select_controller>
	delay_500ns();
2000094e:	f7ff fbe7 	bl	20000120 <delay_500ns>
	graphic_ctrl_bit_set(B_E);
20000952:	2040      	movs	r0, #64	; 0x40
20000954:	f7ff fefa 	bl	2000074c <graphic_ctrl_bit_set>
	delay_500ns();
20000958:	f7ff fbe2 	bl	20000120 <delay_500ns>
	uint8_t rv = GPIO_E->odrHigh;
2000095c:	4a11      	ldr	r2, [pc, #68]	; (200009a4 <graphic_read+0x84>)
2000095e:	230f      	movs	r3, #15
20000960:	18fb      	adds	r3, r7, r3
20000962:	7d52      	ldrb	r2, [r2, #21]
20000964:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20000966:	2040      	movs	r0, #64	; 0x40
20000968:	f7ff ff1e 	bl	200007a8 <graphic_ctrl_bit_clear>
	GPIO_E->moder = 0x55555555;
2000096c:	4b0d      	ldr	r3, [pc, #52]	; (200009a4 <graphic_read+0x84>)
2000096e:	4a0f      	ldr	r2, [pc, #60]	; (200009ac <graphic_read+0x8c>)
20000970:	601a      	str	r2, [r3, #0]
	if(controller == B_CS1) {
20000972:	1dfb      	adds	r3, r7, #7
20000974:	781b      	ldrb	r3, [r3, #0]
20000976:	2b08      	cmp	r3, #8
20000978:	d104      	bne.n	20000984 <graphic_read+0x64>
		select_controller(B_CS1);
2000097a:	2008      	movs	r0, #8
2000097c:	f7ff ff40 	bl	20000800 <select_controller>
		graphic_wait_ready();
20000980:	f7ff ff99 	bl	200008b6 <graphic_wait_ready>
	}
	if(controller == B_CS2){
20000984:	1dfb      	adds	r3, r7, #7
20000986:	781b      	ldrb	r3, [r3, #0]
20000988:	2b10      	cmp	r3, #16
2000098a:	d104      	bne.n	20000996 <graphic_read+0x76>
		select_controller(B_CS2);
2000098c:	2010      	movs	r0, #16
2000098e:	f7ff ff37 	bl	20000800 <select_controller>
		graphic_wait_ready();
20000992:	f7ff ff90 	bl	200008b6 <graphic_wait_ready>
	}
	// graphic_read = RV (what???)
	return rv;
20000996:	230f      	movs	r3, #15
20000998:	18fb      	adds	r3, r7, r3
2000099a:	781b      	ldrb	r3, [r3, #0]
}
2000099c:	0018      	movs	r0, r3
2000099e:	46bd      	mov	sp, r7
200009a0:	b004      	add	sp, #16
200009a2:	bd80      	pop	{r7, pc}
200009a4:	40021000 	andmi	r1, r2, r0
200009a8:	00005555 	andeq	r5, r0, r5, asr r5
200009ac:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200009b0 <graphic_write>:

void graphic_write(uint8_t value, uint8_t controller) {
200009b0:	b580      	push	{r7, lr}
200009b2:	b082      	sub	sp, #8
200009b4:	af00      	add	r7, sp, #0
200009b6:	0002      	movs	r2, r0
200009b8:	1dfb      	adds	r3, r7, #7
200009ba:	701a      	strb	r2, [r3, #0]
200009bc:	1dbb      	adds	r3, r7, #6
200009be:	1c0a      	adds	r2, r1, #0
200009c0:	701a      	strb	r2, [r3, #0]
	GPIO_E->odrHigh = value;
200009c2:	4a1a      	ldr	r2, [pc, #104]	; (20000a2c <graphic_write+0x7c>)
200009c4:	1dfb      	adds	r3, r7, #7
200009c6:	781b      	ldrb	r3, [r3, #0]
200009c8:	7553      	strb	r3, [r2, #21]
	select_controller(controller);
200009ca:	1dbb      	adds	r3, r7, #6
200009cc:	781b      	ldrb	r3, [r3, #0]
200009ce:	0018      	movs	r0, r3
200009d0:	f7ff ff16 	bl	20000800 <select_controller>
	delay_500ns();
200009d4:	f7ff fba4 	bl	20000120 <delay_500ns>
	graphic_ctrl_bit_set(B_E);
200009d8:	2040      	movs	r0, #64	; 0x40
200009da:	f7ff feb7 	bl	2000074c <graphic_ctrl_bit_set>
	delay_500ns();
200009de:	f7ff fb9f 	bl	20000120 <delay_500ns>
	graphic_ctrl_bit_clear(B_E);
200009e2:	2040      	movs	r0, #64	; 0x40
200009e4:	f7ff fee0 	bl	200007a8 <graphic_ctrl_bit_clear>
	if(controller & B_CS1) {
200009e8:	1dbb      	adds	r3, r7, #6
200009ea:	781b      	ldrb	r3, [r3, #0]
200009ec:	2208      	movs	r2, #8
200009ee:	4013      	ands	r3, r2
200009f0:	d004      	beq.n	200009fc <graphic_write+0x4c>
		select_controller(B_CS1);
200009f2:	2008      	movs	r0, #8
200009f4:	f7ff ff04 	bl	20000800 <select_controller>
		graphic_wait_ready();
200009f8:	f7ff ff5d 	bl	200008b6 <graphic_wait_ready>
	}
	if(controller & B_CS2) {
200009fc:	1dbb      	adds	r3, r7, #6
200009fe:	781b      	ldrb	r3, [r3, #0]
20000a00:	2210      	movs	r2, #16
20000a02:	4013      	ands	r3, r2
20000a04:	d004      	beq.n	20000a10 <graphic_write+0x60>
		select_controller(B_CS2);
20000a06:	2010      	movs	r0, #16
20000a08:	f7ff fefa 	bl	20000800 <select_controller>
		graphic_wait_ready();
20000a0c:	f7ff ff53 	bl	200008b6 <graphic_wait_ready>
	}
	GPIO_E->odrHigh = 0;
20000a10:	4b06      	ldr	r3, [pc, #24]	; (20000a2c <graphic_write+0x7c>)
20000a12:	2200      	movs	r2, #0
20000a14:	755a      	strb	r2, [r3, #21]
	graphic_ctrl_bit_set(B_E);
20000a16:	2040      	movs	r0, #64	; 0x40
20000a18:	f7ff fe98 	bl	2000074c <graphic_ctrl_bit_set>
	select_controller(0);
20000a1c:	2000      	movs	r0, #0
20000a1e:	f7ff feef 	bl	20000800 <select_controller>
}
20000a22:	46c0      	nop			; (mov r8, r8)
20000a24:	46bd      	mov	sp, r7
20000a26:	b002      	add	sp, #8
20000a28:	bd80      	pop	{r7, pc}
20000a2a:	46c0      	nop			; (mov r8, r8)
20000a2c:	40021000 	andmi	r1, r2, r0

20000a30 <graphic_write_command>:

void graphic_write_command(uint8_t commandToWrite, uint8_t controller) {
20000a30:	b580      	push	{r7, lr}
20000a32:	b082      	sub	sp, #8
20000a34:	af00      	add	r7, sp, #0
20000a36:	0002      	movs	r2, r0
20000a38:	1dfb      	adds	r3, r7, #7
20000a3a:	701a      	strb	r2, [r3, #0]
20000a3c:	1dbb      	adds	r3, r7, #6
20000a3e:	1c0a      	adds	r2, r1, #0
20000a40:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20000a42:	2040      	movs	r0, #64	; 0x40
20000a44:	f7ff feb0 	bl	200007a8 <graphic_ctrl_bit_clear>
	select_controller(controller);
20000a48:	1dbb      	adds	r3, r7, #6
20000a4a:	781b      	ldrb	r3, [r3, #0]
20000a4c:	0018      	movs	r0, r3
20000a4e:	f7ff fed7 	bl	20000800 <select_controller>
	graphic_ctrl_bit_clear(B_RS | B_RW);
20000a52:	2003      	movs	r0, #3
20000a54:	f7ff fea8 	bl	200007a8 <graphic_ctrl_bit_clear>
	graphic_write(commandToWrite, controller);
20000a58:	1dbb      	adds	r3, r7, #6
20000a5a:	781a      	ldrb	r2, [r3, #0]
20000a5c:	1dfb      	adds	r3, r7, #7
20000a5e:	781b      	ldrb	r3, [r3, #0]
20000a60:	0011      	movs	r1, r2
20000a62:	0018      	movs	r0, r3
20000a64:	f7ff ffa4 	bl	200009b0 <graphic_write>
}
20000a68:	46c0      	nop			; (mov r8, r8)
20000a6a:	46bd      	mov	sp, r7
20000a6c:	b002      	add	sp, #8
20000a6e:	bd80      	pop	{r7, pc}

20000a70 <graphic_write_data>:

void graphic_write_data(uint8_t data, uint8_t controller) {
20000a70:	b580      	push	{r7, lr}
20000a72:	b082      	sub	sp, #8
20000a74:	af00      	add	r7, sp, #0
20000a76:	0002      	movs	r2, r0
20000a78:	1dfb      	adds	r3, r7, #7
20000a7a:	701a      	strb	r2, [r3, #0]
20000a7c:	1dbb      	adds	r3, r7, #6
20000a7e:	1c0a      	adds	r2, r1, #0
20000a80:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20000a82:	2040      	movs	r0, #64	; 0x40
20000a84:	f7ff fe90 	bl	200007a8 <graphic_ctrl_bit_clear>
	select_controller(controller);
20000a88:	1dbb      	adds	r3, r7, #6
20000a8a:	781b      	ldrb	r3, [r3, #0]
20000a8c:	0018      	movs	r0, r3
20000a8e:	f7ff feb7 	bl	20000800 <select_controller>
	graphic_ctrl_bit_set(B_RS);
20000a92:	2001      	movs	r0, #1
20000a94:	f7ff fe5a 	bl	2000074c <graphic_ctrl_bit_set>
	graphic_ctrl_bit_clear(B_RW);
20000a98:	2002      	movs	r0, #2
20000a9a:	f7ff fe85 	bl	200007a8 <graphic_ctrl_bit_clear>
	graphic_write(data, controller);
20000a9e:	1dbb      	adds	r3, r7, #6
20000aa0:	781a      	ldrb	r2, [r3, #0]
20000aa2:	1dfb      	adds	r3, r7, #7
20000aa4:	781b      	ldrb	r3, [r3, #0]
20000aa6:	0011      	movs	r1, r2
20000aa8:	0018      	movs	r0, r3
20000aaa:	f7ff ff81 	bl	200009b0 <graphic_write>
}
20000aae:	46c0      	nop			; (mov r8, r8)
20000ab0:	46bd      	mov	sp, r7
20000ab2:	b002      	add	sp, #8
20000ab4:	bd80      	pop	{r7, pc}

20000ab6 <graphic_read_data>:

uint8_t graphic_read_data(unsigned char controller) {
20000ab6:	b580      	push	{r7, lr}
20000ab8:	b082      	sub	sp, #8
20000aba:	af00      	add	r7, sp, #0
20000abc:	0002      	movs	r2, r0
20000abe:	1dfb      	adds	r3, r7, #7
20000ac0:	701a      	strb	r2, [r3, #0]
	(void) graphic_read(controller);
20000ac2:	1dfb      	adds	r3, r7, #7
20000ac4:	781b      	ldrb	r3, [r3, #0]
20000ac6:	0018      	movs	r0, r3
20000ac8:	f7ff ff2a 	bl	20000920 <graphic_read>
	return graphic_read(controller);
20000acc:	1dfb      	adds	r3, r7, #7
20000ace:	781b      	ldrb	r3, [r3, #0]
20000ad0:	0018      	movs	r0, r3
20000ad2:	f7ff ff25 	bl	20000920 <graphic_read>
20000ad6:	0003      	movs	r3, r0
}
20000ad8:	0018      	movs	r0, r3
20000ada:	46bd      	mov	sp, r7
20000adc:	b002      	add	sp, #8
20000ade:	bd80      	pop	{r7, pc}

20000ae0 <graphic_clear_screen>:

void graphic_clear_screen(void) {
20000ae0:	b580      	push	{r7, lr}
20000ae2:	b082      	sub	sp, #8
20000ae4:	af00      	add	r7, sp, #0
	uint8_t page, add;
	for(page = 0; page < 8; page++){
20000ae6:	1dfb      	adds	r3, r7, #7
20000ae8:	2200      	movs	r2, #0
20000aea:	701a      	strb	r2, [r3, #0]
20000aec:	e023      	b.n	20000b36 <graphic_clear_screen+0x56>
		graphic_write_command(LCD_SET_PAGE	| page, B_CS1|B_CS2);
20000aee:	1dfb      	adds	r3, r7, #7
20000af0:	781b      	ldrb	r3, [r3, #0]
20000af2:	2248      	movs	r2, #72	; 0x48
20000af4:	4252      	negs	r2, r2
20000af6:	4313      	orrs	r3, r2
20000af8:	b2db      	uxtb	r3, r3
20000afa:	2118      	movs	r1, #24
20000afc:	0018      	movs	r0, r3
20000afe:	f7ff ff97 	bl	20000a30 <graphic_write_command>
		graphic_write_command(LCD_SET_ADD	| 0, 	B_CS1|B_CS2);
20000b02:	2118      	movs	r1, #24
20000b04:	2040      	movs	r0, #64	; 0x40
20000b06:	f7ff ff93 	bl	20000a30 <graphic_write_command>
		for(add = 0; add < 64; add++){
20000b0a:	1dbb      	adds	r3, r7, #6
20000b0c:	2200      	movs	r2, #0
20000b0e:	701a      	strb	r2, [r3, #0]
20000b10:	e008      	b.n	20000b24 <graphic_clear_screen+0x44>
			graphic_write_data(0,B_CS1|B_CS2);
20000b12:	2118      	movs	r1, #24
20000b14:	2000      	movs	r0, #0
20000b16:	f7ff ffab 	bl	20000a70 <graphic_write_data>
		for(add = 0; add < 64; add++){
20000b1a:	1dbb      	adds	r3, r7, #6
20000b1c:	781a      	ldrb	r2, [r3, #0]
20000b1e:	1dbb      	adds	r3, r7, #6
20000b20:	3201      	adds	r2, #1
20000b22:	701a      	strb	r2, [r3, #0]
20000b24:	1dbb      	adds	r3, r7, #6
20000b26:	781b      	ldrb	r3, [r3, #0]
20000b28:	2b3f      	cmp	r3, #63	; 0x3f
20000b2a:	d9f2      	bls.n	20000b12 <graphic_clear_screen+0x32>
	for(page = 0; page < 8; page++){
20000b2c:	1dfb      	adds	r3, r7, #7
20000b2e:	781a      	ldrb	r2, [r3, #0]
20000b30:	1dfb      	adds	r3, r7, #7
20000b32:	3201      	adds	r2, #1
20000b34:	701a      	strb	r2, [r3, #0]
20000b36:	1dfb      	adds	r3, r7, #7
20000b38:	781b      	ldrb	r3, [r3, #0]
20000b3a:	2b07      	cmp	r3, #7
20000b3c:	d9d7      	bls.n	20000aee <graphic_clear_screen+0xe>
		}
	}
}
20000b3e:	46c0      	nop			; (mov r8, r8)
20000b40:	46bd      	mov	sp, r7
20000b42:	b002      	add	sp, #8
20000b44:	bd80      	pop	{r7, pc}

20000b46 <setup_for_graphic_display>:

void setup_for_graphic_display(void){
20000b46:	b580      	push	{r7, lr}
20000b48:	af00      	add	r7, sp, #0
	GPIO_E->moder = 0x55555555;
20000b4a:	4b04      	ldr	r3, [pc, #16]	; (20000b5c <setup_for_graphic_display+0x16>)
20000b4c:	4a04      	ldr	r2, [pc, #16]	; (20000b60 <setup_for_graphic_display+0x1a>)
20000b4e:	601a      	str	r2, [r3, #0]
	GPIO_E->ospeedr = 0x55555555;
20000b50:	4b02      	ldr	r3, [pc, #8]	; (20000b5c <setup_for_graphic_display+0x16>)
20000b52:	4a03      	ldr	r2, [pc, #12]	; (20000b60 <setup_for_graphic_display+0x1a>)
20000b54:	609a      	str	r2, [r3, #8]
}
20000b56:	46c0      	nop			; (mov r8, r8)
20000b58:	46bd      	mov	sp, r7
20000b5a:	bd80      	pop	{r7, pc}
20000b5c:	40021000 	andmi	r1, r2, r0
20000b60:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000b64 <pixel>:

void pixel(unsigned char x, unsigned char y, unsigned char set) {
20000b64:	b590      	push	{r4, r7, lr}
20000b66:	b085      	sub	sp, #20
20000b68:	af00      	add	r7, sp, #0
20000b6a:	0004      	movs	r4, r0
20000b6c:	0008      	movs	r0, r1
20000b6e:	0011      	movs	r1, r2
20000b70:	1dfb      	adds	r3, r7, #7
20000b72:	1c22      	adds	r2, r4, #0
20000b74:	701a      	strb	r2, [r3, #0]
20000b76:	1dbb      	adds	r3, r7, #6
20000b78:	1c02      	adds	r2, r0, #0
20000b7a:	701a      	strb	r2, [r3, #0]
20000b7c:	1d7b      	adds	r3, r7, #5
20000b7e:	1c0a      	adds	r2, r1, #0
20000b80:	701a      	strb	r2, [r3, #0]
	// Kontrollera att x och y är i tillåtna intervall. 
	if((x > 128 || x < 1) && (y > 64 || y < 1)) return;
20000b82:	1dfb      	adds	r3, r7, #7
20000b84:	781b      	ldrb	r3, [r3, #0]
20000b86:	2b80      	cmp	r3, #128	; 0x80
20000b88:	d803      	bhi.n	20000b92 <pixel+0x2e>
20000b8a:	1dfb      	adds	r3, r7, #7
20000b8c:	781b      	ldrb	r3, [r3, #0]
20000b8e:	2b00      	cmp	r3, #0
20000b90:	d109      	bne.n	20000ba6 <pixel+0x42>
20000b92:	1dbb      	adds	r3, r7, #6
20000b94:	781b      	ldrb	r3, [r3, #0]
20000b96:	2b40      	cmp	r3, #64	; 0x40
20000b98:	d900      	bls.n	20000b9c <pixel+0x38>
20000b9a:	e0cc      	b.n	20000d36 <pixel+0x1d2>
20000b9c:	1dbb      	adds	r3, r7, #6
20000b9e:	781b      	ldrb	r3, [r3, #0]
20000ba0:	2b00      	cmp	r3, #0
20000ba2:	d100      	bne.n	20000ba6 <pixel+0x42>
20000ba4:	e0c7      	b.n	20000d36 <pixel+0x1d2>
	if(set != 0 && set != 1) return;
20000ba6:	1d7b      	adds	r3, r7, #5
20000ba8:	781b      	ldrb	r3, [r3, #0]
20000baa:	2b00      	cmp	r3, #0
20000bac:	d004      	beq.n	20000bb8 <pixel+0x54>
20000bae:	1d7b      	adds	r3, r7, #5
20000bb0:	781b      	ldrb	r3, [r3, #0]
20000bb2:	2b01      	cmp	r3, #1
20000bb4:	d000      	beq.n	20000bb8 <pixel+0x54>
20000bb6:	e0c0      	b.n	20000d3a <pixel+0x1d6>
	
	uint8_t index = (y - 1) / 8;
20000bb8:	1dbb      	adds	r3, r7, #6
20000bba:	781b      	ldrb	r3, [r3, #0]
20000bbc:	3b01      	subs	r3, #1
20000bbe:	2b00      	cmp	r3, #0
20000bc0:	da00      	bge.n	20000bc4 <pixel+0x60>
20000bc2:	3307      	adds	r3, #7
20000bc4:	10db      	asrs	r3, r3, #3
20000bc6:	001a      	movs	r2, r3
20000bc8:	230c      	movs	r3, #12
20000bca:	18fb      	adds	r3, r7, r3
20000bcc:	701a      	strb	r2, [r3, #0]
	uint8_t mask;
	switch((y - 1) % 8){
20000bce:	1dbb      	adds	r3, r7, #6
20000bd0:	781b      	ldrb	r3, [r3, #0]
20000bd2:	3b01      	subs	r3, #1
20000bd4:	4a5b      	ldr	r2, [pc, #364]	; (20000d44 <pixel+0x1e0>)
20000bd6:	4013      	ands	r3, r2
20000bd8:	d504      	bpl.n	20000be4 <pixel+0x80>
20000bda:	3b01      	subs	r3, #1
20000bdc:	2208      	movs	r2, #8
20000bde:	4252      	negs	r2, r2
20000be0:	4313      	orrs	r3, r2
20000be2:	3301      	adds	r3, #1
20000be4:	2b07      	cmp	r3, #7
20000be6:	d82c      	bhi.n	20000c42 <pixel+0xde>
20000be8:	009a      	lsls	r2, r3, #2
20000bea:	4b57      	ldr	r3, [pc, #348]	; (20000d48 <pixel+0x1e4>)
20000bec:	18d3      	adds	r3, r2, r3
20000bee:	681b      	ldr	r3, [r3, #0]
20000bf0:	469f      	mov	pc, r3
		case 0: mask = 1; break;
20000bf2:	230f      	movs	r3, #15
20000bf4:	18fb      	adds	r3, r7, r3
20000bf6:	2201      	movs	r2, #1
20000bf8:	701a      	strb	r2, [r3, #0]
20000bfa:	e022      	b.n	20000c42 <pixel+0xde>
		case 1: mask = 2; break;
20000bfc:	230f      	movs	r3, #15
20000bfe:	18fb      	adds	r3, r7, r3
20000c00:	2202      	movs	r2, #2
20000c02:	701a      	strb	r2, [r3, #0]
20000c04:	e01d      	b.n	20000c42 <pixel+0xde>
		case 2: mask = 4; break;
20000c06:	230f      	movs	r3, #15
20000c08:	18fb      	adds	r3, r7, r3
20000c0a:	2204      	movs	r2, #4
20000c0c:	701a      	strb	r2, [r3, #0]
20000c0e:	e018      	b.n	20000c42 <pixel+0xde>
		case 3: mask = 8; break;
20000c10:	230f      	movs	r3, #15
20000c12:	18fb      	adds	r3, r7, r3
20000c14:	2208      	movs	r2, #8
20000c16:	701a      	strb	r2, [r3, #0]
20000c18:	e013      	b.n	20000c42 <pixel+0xde>
		case 4: mask = 0x10; break;
20000c1a:	230f      	movs	r3, #15
20000c1c:	18fb      	adds	r3, r7, r3
20000c1e:	2210      	movs	r2, #16
20000c20:	701a      	strb	r2, [r3, #0]
20000c22:	e00e      	b.n	20000c42 <pixel+0xde>
		case 5: mask = 0x20; break;
20000c24:	230f      	movs	r3, #15
20000c26:	18fb      	adds	r3, r7, r3
20000c28:	2220      	movs	r2, #32
20000c2a:	701a      	strb	r2, [r3, #0]
20000c2c:	e009      	b.n	20000c42 <pixel+0xde>
		case 6: mask = 0x40; break;
20000c2e:	230f      	movs	r3, #15
20000c30:	18fb      	adds	r3, r7, r3
20000c32:	2240      	movs	r2, #64	; 0x40
20000c34:	701a      	strb	r2, [r3, #0]
20000c36:	e004      	b.n	20000c42 <pixel+0xde>
		case 7: mask = 0x80; break;
20000c38:	230f      	movs	r3, #15
20000c3a:	18fb      	adds	r3, r7, r3
20000c3c:	2280      	movs	r2, #128	; 0x80
20000c3e:	701a      	strb	r2, [r3, #0]
20000c40:	46c0      	nop			; (mov r8, r8)
	}
	if(set == 0){
20000c42:	1d7b      	adds	r3, r7, #5
20000c44:	781b      	ldrb	r3, [r3, #0]
20000c46:	2b00      	cmp	r3, #0
20000c48:	d106      	bne.n	20000c58 <pixel+0xf4>
		mask = ~mask; // biten ska nollställas
20000c4a:	230f      	movs	r3, #15
20000c4c:	18fb      	adds	r3, r7, r3
20000c4e:	220f      	movs	r2, #15
20000c50:	18ba      	adds	r2, r7, r2
20000c52:	7812      	ldrb	r2, [r2, #0]
20000c54:	43d2      	mvns	r2, r2
20000c56:	701a      	strb	r2, [r3, #0]
	}
	
	uint8_t f_x, controller;
	
	// Bestäm fysiska koordinater och välj styrkrets
	if(x > 64){
20000c58:	1dfb      	adds	r3, r7, #7
20000c5a:	781b      	ldrb	r3, [r3, #0]
20000c5c:	2b40      	cmp	r3, #64	; 0x40
20000c5e:	d90a      	bls.n	20000c76 <pixel+0x112>
		controller = B_CS2;
20000c60:	230d      	movs	r3, #13
20000c62:	18fb      	adds	r3, r7, r3
20000c64:	2210      	movs	r2, #16
20000c66:	701a      	strb	r2, [r3, #0]
		f_x = x - 65;
20000c68:	230e      	movs	r3, #14
20000c6a:	18fb      	adds	r3, r7, r3
20000c6c:	1dfa      	adds	r2, r7, #7
20000c6e:	7812      	ldrb	r2, [r2, #0]
20000c70:	3a41      	subs	r2, #65	; 0x41
20000c72:	701a      	strb	r2, [r3, #0]
20000c74:	e009      	b.n	20000c8a <pixel+0x126>
	}else{
		controller = B_CS1;
20000c76:	230d      	movs	r3, #13
20000c78:	18fb      	adds	r3, r7, r3
20000c7a:	2208      	movs	r2, #8
20000c7c:	701a      	strb	r2, [r3, #0]
		f_x = x - 1;
20000c7e:	230e      	movs	r3, #14
20000c80:	18fb      	adds	r3, r7, r3
20000c82:	1dfa      	adds	r2, r7, #7
20000c84:	7812      	ldrb	r2, [r2, #0]
20000c86:	3a01      	subs	r2, #1
20000c88:	701a      	strb	r2, [r3, #0]
	}
	graphic_write_command(LCD_SET_ADD | f_x, controller);
20000c8a:	230e      	movs	r3, #14
20000c8c:	18fb      	adds	r3, r7, r3
20000c8e:	781b      	ldrb	r3, [r3, #0]
20000c90:	2240      	movs	r2, #64	; 0x40
20000c92:	4313      	orrs	r3, r2
20000c94:	b2da      	uxtb	r2, r3
20000c96:	230d      	movs	r3, #13
20000c98:	18fb      	adds	r3, r7, r3
20000c9a:	781b      	ldrb	r3, [r3, #0]
20000c9c:	0019      	movs	r1, r3
20000c9e:	0010      	movs	r0, r2
20000ca0:	f7ff fec6 	bl	20000a30 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE | index, controller);
20000ca4:	230c      	movs	r3, #12
20000ca6:	18fb      	adds	r3, r7, r3
20000ca8:	781b      	ldrb	r3, [r3, #0]
20000caa:	2248      	movs	r2, #72	; 0x48
20000cac:	4252      	negs	r2, r2
20000cae:	4313      	orrs	r3, r2
20000cb0:	b2da      	uxtb	r2, r3
20000cb2:	230d      	movs	r3, #13
20000cb4:	18fb      	adds	r3, r7, r3
20000cb6:	781b      	ldrb	r3, [r3, #0]
20000cb8:	0019      	movs	r1, r3
20000cba:	0010      	movs	r0, r2
20000cbc:	f7ff feb8 	bl	20000a30 <graphic_write_command>
	uint8_t temp = graphic_read_data(controller);
20000cc0:	230b      	movs	r3, #11
20000cc2:	18fc      	adds	r4, r7, r3
20000cc4:	230d      	movs	r3, #13
20000cc6:	18fb      	adds	r3, r7, r3
20000cc8:	781b      	ldrb	r3, [r3, #0]
20000cca:	0018      	movs	r0, r3
20000ccc:	f7ff fef3 	bl	20000ab6 <graphic_read_data>
20000cd0:	0003      	movs	r3, r0
20000cd2:	7023      	strb	r3, [r4, #0]
	graphic_write_command(LCD_SET_ADD | f_x, controller);
20000cd4:	230e      	movs	r3, #14
20000cd6:	18fb      	adds	r3, r7, r3
20000cd8:	781b      	ldrb	r3, [r3, #0]
20000cda:	2240      	movs	r2, #64	; 0x40
20000cdc:	4313      	orrs	r3, r2
20000cde:	b2da      	uxtb	r2, r3
20000ce0:	230d      	movs	r3, #13
20000ce2:	18fb      	adds	r3, r7, r3
20000ce4:	781b      	ldrb	r3, [r3, #0]
20000ce6:	0019      	movs	r1, r3
20000ce8:	0010      	movs	r0, r2
20000cea:	f7ff fea1 	bl	20000a30 <graphic_write_command>
	if(set == 1){
20000cee:	1d7b      	adds	r3, r7, #5
20000cf0:	781b      	ldrb	r3, [r3, #0]
20000cf2:	2b01      	cmp	r3, #1
20000cf4:	d10a      	bne.n	20000d0c <pixel+0x1a8>
		mask = mask | temp;
20000cf6:	230f      	movs	r3, #15
20000cf8:	18fb      	adds	r3, r7, r3
20000cfa:	220f      	movs	r2, #15
20000cfc:	18b9      	adds	r1, r7, r2
20000cfe:	220b      	movs	r2, #11
20000d00:	18ba      	adds	r2, r7, r2
20000d02:	7809      	ldrb	r1, [r1, #0]
20000d04:	7812      	ldrb	r2, [r2, #0]
20000d06:	430a      	orrs	r2, r1
20000d08:	701a      	strb	r2, [r3, #0]
20000d0a:	e009      	b.n	20000d20 <pixel+0x1bc>
	}else{
		mask = mask & temp;
20000d0c:	230f      	movs	r3, #15
20000d0e:	18fb      	adds	r3, r7, r3
20000d10:	220f      	movs	r2, #15
20000d12:	18ba      	adds	r2, r7, r2
20000d14:	210b      	movs	r1, #11
20000d16:	1879      	adds	r1, r7, r1
20000d18:	7812      	ldrb	r2, [r2, #0]
20000d1a:	7809      	ldrb	r1, [r1, #0]
20000d1c:	400a      	ands	r2, r1
20000d1e:	701a      	strb	r2, [r3, #0]
	}
	graphic_write_data(mask, controller);	
20000d20:	230d      	movs	r3, #13
20000d22:	18fb      	adds	r3, r7, r3
20000d24:	781a      	ldrb	r2, [r3, #0]
20000d26:	230f      	movs	r3, #15
20000d28:	18fb      	adds	r3, r7, r3
20000d2a:	781b      	ldrb	r3, [r3, #0]
20000d2c:	0011      	movs	r1, r2
20000d2e:	0018      	movs	r0, r3
20000d30:	f7ff fe9e 	bl	20000a70 <graphic_write_data>
20000d34:	e002      	b.n	20000d3c <pixel+0x1d8>
	if((x > 128 || x < 1) && (y > 64 || y < 1)) return;
20000d36:	46c0      	nop			; (mov r8, r8)
20000d38:	e000      	b.n	20000d3c <pixel+0x1d8>
	if(set != 0 && set != 1) return;
20000d3a:	46c0      	nop			; (mov r8, r8)
20000d3c:	46bd      	mov	sp, r7
20000d3e:	b005      	add	sp, #20
20000d40:	bd90      	pop	{r4, r7, pc}
20000d42:	46c0      	nop			; (mov r8, r8)
20000d44:	80000007 	andhi	r0, r0, r7
20000d48:	20000e94 	mulcs	r0, r4, lr

20000d4c <__udivsi3>:
20000d4c:	2200      	movs	r2, #0
20000d4e:	0843      	lsrs	r3, r0, #1
20000d50:	428b      	cmp	r3, r1
20000d52:	d374      	bcc.n	20000e3e <__udivsi3+0xf2>
20000d54:	0903      	lsrs	r3, r0, #4
20000d56:	428b      	cmp	r3, r1
20000d58:	d35f      	bcc.n	20000e1a <__udivsi3+0xce>
20000d5a:	0a03      	lsrs	r3, r0, #8
20000d5c:	428b      	cmp	r3, r1
20000d5e:	d344      	bcc.n	20000dea <__udivsi3+0x9e>
20000d60:	0b03      	lsrs	r3, r0, #12
20000d62:	428b      	cmp	r3, r1
20000d64:	d328      	bcc.n	20000db8 <__udivsi3+0x6c>
20000d66:	0c03      	lsrs	r3, r0, #16
20000d68:	428b      	cmp	r3, r1
20000d6a:	d30d      	bcc.n	20000d88 <__udivsi3+0x3c>
20000d6c:	22ff      	movs	r2, #255	; 0xff
20000d6e:	0209      	lsls	r1, r1, #8
20000d70:	ba12      	rev	r2, r2
20000d72:	0c03      	lsrs	r3, r0, #16
20000d74:	428b      	cmp	r3, r1
20000d76:	d302      	bcc.n	20000d7e <__udivsi3+0x32>
20000d78:	1212      	asrs	r2, r2, #8
20000d7a:	0209      	lsls	r1, r1, #8
20000d7c:	d065      	beq.n	20000e4a <__udivsi3+0xfe>
20000d7e:	0b03      	lsrs	r3, r0, #12
20000d80:	428b      	cmp	r3, r1
20000d82:	d319      	bcc.n	20000db8 <__udivsi3+0x6c>
20000d84:	e000      	b.n	20000d88 <__udivsi3+0x3c>
20000d86:	0a09      	lsrs	r1, r1, #8
20000d88:	0bc3      	lsrs	r3, r0, #15
20000d8a:	428b      	cmp	r3, r1
20000d8c:	d301      	bcc.n	20000d92 <__udivsi3+0x46>
20000d8e:	03cb      	lsls	r3, r1, #15
20000d90:	1ac0      	subs	r0, r0, r3
20000d92:	4152      	adcs	r2, r2
20000d94:	0b83      	lsrs	r3, r0, #14
20000d96:	428b      	cmp	r3, r1
20000d98:	d301      	bcc.n	20000d9e <__udivsi3+0x52>
20000d9a:	038b      	lsls	r3, r1, #14
20000d9c:	1ac0      	subs	r0, r0, r3
20000d9e:	4152      	adcs	r2, r2
20000da0:	0b43      	lsrs	r3, r0, #13
20000da2:	428b      	cmp	r3, r1
20000da4:	d301      	bcc.n	20000daa <__udivsi3+0x5e>
20000da6:	034b      	lsls	r3, r1, #13
20000da8:	1ac0      	subs	r0, r0, r3
20000daa:	4152      	adcs	r2, r2
20000dac:	0b03      	lsrs	r3, r0, #12
20000dae:	428b      	cmp	r3, r1
20000db0:	d301      	bcc.n	20000db6 <__udivsi3+0x6a>
20000db2:	030b      	lsls	r3, r1, #12
20000db4:	1ac0      	subs	r0, r0, r3
20000db6:	4152      	adcs	r2, r2
20000db8:	0ac3      	lsrs	r3, r0, #11
20000dba:	428b      	cmp	r3, r1
20000dbc:	d301      	bcc.n	20000dc2 <__udivsi3+0x76>
20000dbe:	02cb      	lsls	r3, r1, #11
20000dc0:	1ac0      	subs	r0, r0, r3
20000dc2:	4152      	adcs	r2, r2
20000dc4:	0a83      	lsrs	r3, r0, #10
20000dc6:	428b      	cmp	r3, r1
20000dc8:	d301      	bcc.n	20000dce <__udivsi3+0x82>
20000dca:	028b      	lsls	r3, r1, #10
20000dcc:	1ac0      	subs	r0, r0, r3
20000dce:	4152      	adcs	r2, r2
20000dd0:	0a43      	lsrs	r3, r0, #9
20000dd2:	428b      	cmp	r3, r1
20000dd4:	d301      	bcc.n	20000dda <__udivsi3+0x8e>
20000dd6:	024b      	lsls	r3, r1, #9
20000dd8:	1ac0      	subs	r0, r0, r3
20000dda:	4152      	adcs	r2, r2
20000ddc:	0a03      	lsrs	r3, r0, #8
20000dde:	428b      	cmp	r3, r1
20000de0:	d301      	bcc.n	20000de6 <__udivsi3+0x9a>
20000de2:	020b      	lsls	r3, r1, #8
20000de4:	1ac0      	subs	r0, r0, r3
20000de6:	4152      	adcs	r2, r2
20000de8:	d2cd      	bcs.n	20000d86 <__udivsi3+0x3a>
20000dea:	09c3      	lsrs	r3, r0, #7
20000dec:	428b      	cmp	r3, r1
20000dee:	d301      	bcc.n	20000df4 <__udivsi3+0xa8>
20000df0:	01cb      	lsls	r3, r1, #7
20000df2:	1ac0      	subs	r0, r0, r3
20000df4:	4152      	adcs	r2, r2
20000df6:	0983      	lsrs	r3, r0, #6
20000df8:	428b      	cmp	r3, r1
20000dfa:	d301      	bcc.n	20000e00 <__udivsi3+0xb4>
20000dfc:	018b      	lsls	r3, r1, #6
20000dfe:	1ac0      	subs	r0, r0, r3
20000e00:	4152      	adcs	r2, r2
20000e02:	0943      	lsrs	r3, r0, #5
20000e04:	428b      	cmp	r3, r1
20000e06:	d301      	bcc.n	20000e0c <__udivsi3+0xc0>
20000e08:	014b      	lsls	r3, r1, #5
20000e0a:	1ac0      	subs	r0, r0, r3
20000e0c:	4152      	adcs	r2, r2
20000e0e:	0903      	lsrs	r3, r0, #4
20000e10:	428b      	cmp	r3, r1
20000e12:	d301      	bcc.n	20000e18 <__udivsi3+0xcc>
20000e14:	010b      	lsls	r3, r1, #4
20000e16:	1ac0      	subs	r0, r0, r3
20000e18:	4152      	adcs	r2, r2
20000e1a:	08c3      	lsrs	r3, r0, #3
20000e1c:	428b      	cmp	r3, r1
20000e1e:	d301      	bcc.n	20000e24 <__udivsi3+0xd8>
20000e20:	00cb      	lsls	r3, r1, #3
20000e22:	1ac0      	subs	r0, r0, r3
20000e24:	4152      	adcs	r2, r2
20000e26:	0883      	lsrs	r3, r0, #2
20000e28:	428b      	cmp	r3, r1
20000e2a:	d301      	bcc.n	20000e30 <__udivsi3+0xe4>
20000e2c:	008b      	lsls	r3, r1, #2
20000e2e:	1ac0      	subs	r0, r0, r3
20000e30:	4152      	adcs	r2, r2
20000e32:	0843      	lsrs	r3, r0, #1
20000e34:	428b      	cmp	r3, r1
20000e36:	d301      	bcc.n	20000e3c <__udivsi3+0xf0>
20000e38:	004b      	lsls	r3, r1, #1
20000e3a:	1ac0      	subs	r0, r0, r3
20000e3c:	4152      	adcs	r2, r2
20000e3e:	1a41      	subs	r1, r0, r1
20000e40:	d200      	bcs.n	20000e44 <__udivsi3+0xf8>
20000e42:	4601      	mov	r1, r0
20000e44:	4152      	adcs	r2, r2
20000e46:	4610      	mov	r0, r2
20000e48:	4770      	bx	lr
20000e4a:	e7ff      	b.n	20000e4c <__udivsi3+0x100>
20000e4c:	b501      	push	{r0, lr}
20000e4e:	2000      	movs	r0, #0
20000e50:	f000 f806 	bl	20000e60 <__aeabi_idiv0>
20000e54:	bd02      	pop	{r1, pc}
20000e56:	46c0      	nop			; (mov r8, r8)

20000e58 <__aeabi_uidivmod>:
20000e58:	2900      	cmp	r1, #0
20000e5a:	d0f7      	beq.n	20000e4c <__udivsi3+0x100>
20000e5c:	e776      	b.n	20000d4c <__udivsi3>
20000e5e:	4770      	bx	lr

20000e60 <__aeabi_idiv0>:
20000e60:	4770      	bx	lr
20000e62:	46c0      	nop			; (mov r8, r8)
20000e64:	0a030201 	beq	200c1670 <__aeabi_idiv0+0xc0810>
20000e68:	0b060504 	bleq	20182280 <__aeabi_idiv0+0x181420>
20000e6c:	0c090807 	stceq	8, cr0, [r9], {7}
20000e70:	0d0f000e 	stceq	0, cr0, [pc, #-56]	; 20000e40 <__udivsi3+0xf4>
20000e74:	0006003f 	andeq	r0, r6, pc, lsr r0
20000e78:	004f005b 	subeq	r0, pc, fp, asr r0	; <UNPREDICTABLE>
20000e7c:	006d0066 	rsbeq	r0, sp, r6, rrx
20000e80:	0007007d 	andeq	r0, r7, sp, ror r0
20000e84:	006f007f 	rsbeq	r0, pc, pc, ror r0	; <UNPREDICTABLE>
20000e88:	007c0077 	rsbseq	r0, ip, r7, ror r0
20000e8c:	005e0058 	subseq	r0, lr, r8, asr r0
20000e90:	00760080 	rsbseq	r0, r6, r0, lsl #1
20000e94:	20000bf2 	strdcs	r0, [r0], -r2
20000e98:	20000bfc 	strdcs	r0, [r0], -ip
20000e9c:	20000c06 	andcs	r0, r0, r6, lsl #24
20000ea0:	20000c10 	andcs	r0, r0, r0, lsl ip
20000ea4:	20000c1a 	andcs	r0, r0, sl, lsl ip
20000ea8:	20000c24 	andcs	r0, r0, r4, lsr #24
20000eac:	20000c2e 	andcs	r0, r0, lr, lsr #24
20000eb0:	20000c38 	andcs	r0, r0, r8, lsr ip

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	000000a8 	andeq	r0, r0, r8, lsr #1
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	00000000 	andeq	r0, r0, r0
  10:	0000e60c 	andeq	lr, r0, ip, lsl #12
	...
  20:	06010200 	streq	r0, [r1], -r0, lsl #4
  24:	0000009a 	muleq	r0, sl, r0
  28:	98080102 	stmdals	r8, {r1, r8}
  2c:	02000000 	andeq	r0, r0, #0
  30:	01360502 	teqeq	r6, r2, lsl #10
  34:	02020000 	andeq	r0, r2, #0
  38:	0000a607 	andeq	sl, r0, r7, lsl #12
  3c:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
  40:	0000012d 	andeq	r0, r0, sp, lsr #2
  44:	cc070402 	cfstrsgt	mvf0, [r7], {2}
  48:	02000000 	andeq	r0, r0, #0
  4c:	01280508 			; <UNDEFINED> instruction: 0x01280508
  50:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
  54:	0000c707 	andeq	ip, r0, r7, lsl #14
  58:	05040300 	streq	r0, [r4, #-768]	; 0xfffffd00
  5c:	00746e69 	rsbseq	r6, r4, r9, ror #28
  60:	d1070402 	tstle	r7, r2, lsl #8
  64:	04000000 	streq	r0, [r0], #-0
  68:	000000b9 	strheq	r0, [r0], -r9
  6c:	001e1801 	andseq	r1, lr, r1, lsl #16
  70:	00c02000 	sbceq	r2, r0, r0
  74:	9c010000 	stcls	0, cr0, [r1], {-0}
  78:	00000089 	andeq	r0, r0, r9, lsl #1
  7c:	01006905 	tsteq	r0, r5, lsl #18
  80:	00002820 	andeq	r2, r0, r0, lsr #16
  84:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
  88:	00be0600 	adcseq	r0, lr, r0, lsl #12
  8c:	14010000 	strne	r0, [r1], #-0
  90:	20000010 	andcs	r0, r0, r0, lsl r0
  94:	0000000e 	andeq	r0, r0, lr
  98:	de079c01 	cdple	12, 0, cr9, cr7, cr1, {0}
  9c:	01000000 	mrseq	r0, (UNDEF: 0)
  a0:	0000000a 	andeq	r0, r0, sl
  a4:	00000c20 	andeq	r0, r0, r0, lsr #24
  a8:	009c0100 	addseq	r0, ip, r0, lsl #2
  ac:	0000015a 	andeq	r0, r0, sl, asr r1
  b0:	00810004 	addeq	r0, r1, r4
  b4:	01040000 	mrseq	r0, (UNDEF: 4)
  b8:	00000000 	andeq	r0, r0, r0
  bc:	0001630c 	andeq	r6, r1, ip, lsl #6
  c0:	0000e000 	andeq	lr, r0, r0
  c4:	0000de20 	andeq	sp, r0, r0, lsr #28
  c8:	0000d300 	andeq	sp, r0, r0, lsl #6
  cc:	06010200 	streq	r0, [r1], -r0, lsl #4
  d0:	0000009a 	muleq	r0, sl, r0
  d4:	98080102 	stmdals	r8, {r1, r8}
  d8:	02000000 	andeq	r0, r0, #0
  dc:	01360502 	teqeq	r6, r2, lsl #10
  e0:	02020000 	andeq	r0, r2, #0
  e4:	0000a607 	andeq	sl, r0, r7, lsl #12
  e8:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
  ec:	0000012d 	andeq	r0, r0, sp, lsr #2
  f0:	0001a703 	andeq	sl, r1, r3, lsl #14
  f4:	4f4f0200 	svcmi	0x004f0200
  f8:	02000000 	andeq	r0, r0, #0
  fc:	00cc0704 	sbceq	r0, ip, r4, lsl #14
 100:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
 104:	00012805 	andeq	r2, r1, r5, lsl #16
 108:	07080200 	streq	r0, [r8, -r0, lsl #4]
 10c:	000000c7 	andeq	r0, r0, r7, asr #1
 110:	69050404 	stmdbvs	r5, {r2, sl}
 114:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
 118:	00d10704 	sbcseq	r0, r1, r4, lsl #14
 11c:	a9030000 	stmdbge	r3, {}	; <UNPREDICTABLE>
 120:	03000001 	movweq	r0, #1
 124:	00004430 	andeq	r4, r0, r0, lsr r4
 128:	04100500 	ldreq	r0, [r0], #-1280	; 0xfffffb00
 12c:	0000b605 	andeq	fp, r0, r5, lsl #12
 130:	015a0600 	cmpeq	sl, r0, lsl #12
 134:	06040000 	streq	r0, [r4], -r0
 138:	00000072 	andeq	r0, r0, r2, ror r0
 13c:	01b20600 			; <UNDEFINED> instruction: 0x01b20600
 140:	07040000 	streq	r0, [r4, -r0]
 144:	00000072 	andeq	r0, r0, r2, ror r0
 148:	01520604 	cmpeq	r2, r4, lsl #12
 14c:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
 150:	00000072 	andeq	r0, r0, r2, ror r0
 154:	01480608 	cmpeq	r8, r8, lsl #12
 158:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
 15c:	00000072 	andeq	r0, r0, r2, ror r0
 160:	4003000c 	andmi	r0, r3, ip
 164:	04000001 	streq	r0, [r0], #-1
 168:	00007d0a 	andeq	r7, r0, sl, lsl #26
 16c:	01da0700 	bicseq	r0, sl, r0, lsl #14
 170:	5e010000 	cdppl	0, 0, cr0, cr1, cr0, {0}
 174:	20000176 	andcs	r0, r0, r6, ror r1
 178:	00000048 	andeq	r0, r0, r8, asr #32
 17c:	00fe9c01 	rscseq	r9, lr, r1, lsl #24
 180:	6d080000 	stcvs	0, cr0, [r8, #-0]
 184:	5e010073 	mcrpl	0, 0, r0, cr1, cr3, {3}
 188:	0000006b 	andeq	r0, r0, fp, rrx
 18c:	096c9102 	stmdbeq	ip!, {r1, r8, ip, pc}^
 190:	000001d3 	ldrdeq	r0, [r0], -r3
 194:	006b6501 	rsbeq	r6, fp, r1, lsl #10
 198:	91020000 	mrsls	r0, (UNDEF: 2)
 19c:	00690a70 	rsbeq	r0, r9, r0, ror sl
 1a0:	006b6601 	rsbeq	r6, fp, r1, lsl #12
 1a4:	91020000 	mrsls	r0, (UNDEF: 2)
 1a8:	bb070074 	bllt	1c0380 <startup-0x1fe3fc80>
 1ac:	01000001 	tsteq	r0, r1
 1b0:	00013245 	andeq	r3, r1, r5, asr #4
 1b4:	00004420 	andeq	r4, r0, r0, lsr #8
 1b8:	3b9c0100 	blcc	fe7005c0 <__aeabi_idiv0+0xde6ff760>
 1bc:	08000001 	stmdaeq	r0, {r0}
 1c0:	01007375 	tsteq	r0, r5, ror r3
 1c4:	00006b45 	andeq	r6, r0, r5, asr #22
 1c8:	6c910200 	lfmvs	f0, 4, [r1], {0}
 1cc:	0001d309 	andeq	sp, r1, r9, lsl #6
 1d0:	6b4c0100 	blvs	13005d8 <startup-0x1ecffa28>
 1d4:	02000000 	andeq	r0, r0, #0
 1d8:	690a7091 	stmdbvs	sl, {r0, r4, r7, ip, sp, lr}
 1dc:	6b4d0100 	blvs	13405e4 <startup-0x1ecbfa1c>
 1e0:	02000000 	andeq	r0, r0, #0
 1e4:	0b007491 	bleq	1d430 <startup-0x1ffe2bd0>
 1e8:	000001e6 	andeq	r0, r0, r6, ror #3
 1ec:	01203501 			; <UNDEFINED> instruction: 0x01203501
 1f0:	00122000 	andseq	r2, r2, r0
 1f4:	9c010000 	stcls	0, cr0, [r1], {-0}
 1f8:	0001c70c 	andeq	ip, r1, ip, lsl #14
 1fc:	e0070100 	and	r0, r7, r0, lsl #2
 200:	40200000 	eormi	r0, r0, r0
 204:	01000000 	mrseq	r0, (UNDEF: 0)
 208:	06fd009c 	usateq	r0, #29, ip, lsl #1
 20c:	00040000 	andeq	r0, r4, r0
 210:	00000149 	andeq	r0, r0, r9, asr #2
 214:	00000104 	andeq	r0, r0, r4, lsl #2
 218:	1a0c0000 	bne	300220 <startup-0x1fcffde0>
 21c:	c0000003 	andgt	r0, r0, r3
 220:	8c200001 	stchi	0, cr0, [r0], #-4
 224:	3200000b 	andcc	r0, r0, #11
 228:	02000002 	andeq	r0, r0, #2
 22c:	009a0601 	addseq	r0, sl, r1, lsl #12
 230:	fd030000 	stc2	0, cr0, [r3, #-0]
 234:	02000002 	andeq	r0, r0, #2
 238:	0000332b 	andeq	r3, r0, fp, lsr #6
 23c:	08010200 	stmdaeq	r1, {r9}
 240:	00000098 	muleq	r0, r8, r0
 244:	36050202 	strcc	r0, [r5], -r2, lsl #4
 248:	03000001 	movweq	r0, #1
 24c:	0000023c 	andeq	r0, r0, ip, lsr r2
 250:	004c3902 	subeq	r3, ip, r2, lsl #18
 254:	02020000 	andeq	r0, r2, #0
 258:	0000a607 	andeq	sl, r0, r7, lsl #12
 25c:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
 260:	0000012d 	andeq	r0, r0, sp, lsr #2
 264:	0001a703 	andeq	sl, r1, r3, lsl #14
 268:	654f0200 	strbvs	r0, [pc, #-512]	; 70 <startup-0x1fffff90>
 26c:	02000000 	andeq	r0, r0, #0
 270:	00cc0704 	sbceq	r0, ip, r4, lsl #14
 274:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
 278:	00012805 	andeq	r2, r1, r5, lsl #16
 27c:	07080200 	streq	r0, [r8, -r0, lsl #4]
 280:	000000c7 	andeq	r0, r0, r7, asr #1
 284:	69050404 	stmdbvs	r5, {r2, sl}
 288:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
 28c:	00d10704 	sbcseq	r0, r1, r4, lsl #14
 290:	ff030000 			; <UNDEFINED> instruction: 0xff030000
 294:	03000002 	movweq	r0, #2
 298:	00002818 	andeq	r2, r0, r8, lsl r8
 29c:	023e0300 	eorseq	r0, lr, #0, 6
 2a0:	24030000 	strcs	r0, [r3], #-0
 2a4:	00000041 	andeq	r0, r0, r1, asr #32
 2a8:	0001a903 	andeq	sl, r1, r3, lsl #18
 2ac:	5a300300 	bpl	c00eb4 <startup-0x1f3ff14c>
 2b0:	05000000 	streq	r0, [r0, #-0]
 2b4:	361c0418 			; <UNDEFINED> instruction: 0x361c0418
 2b8:	06000001 	streq	r0, [r0], -r1
 2bc:	000004e0 	andeq	r0, r0, r0, ror #9
 2c0:	009e1d04 	addseq	r1, lr, r4, lsl #26
 2c4:	06000000 	streq	r0, [r0], -r0
 2c8:	00000272 	andeq	r0, r0, r2, ror r2
 2cc:	00931e04 	addseq	r1, r3, r4, lsl #28
 2d0:	06040000 	streq	r0, [r4], -r0
 2d4:	000002ab 	andeq	r0, r0, fp, lsr #5
 2d8:	00931f04 	addseq	r1, r3, r4, lsl #30
 2dc:	06060000 	streq	r0, [r6], -r0
 2e0:	000002b6 			; <UNDEFINED> instruction: 0x000002b6
 2e4:	009e2004 	addseq	r2, lr, r4
 2e8:	06080000 	streq	r0, [r8], -r0
 2ec:	00000498 	muleq	r0, r8, r4
 2f0:	009e2104 	addseq	r2, lr, r4, lsl #2
 2f4:	060c0000 	streq	r0, [ip], -r0
 2f8:	000001f2 	strdeq	r0, [r0], -r2
 2fc:	00882204 	addeq	r2, r8, r4, lsl #4
 300:	06100000 	ldreq	r0, [r0], -r0
 304:	000003d5 	ldrdeq	r0, [r0], -r5
 308:	00882304 	addeq	r2, r8, r4, lsl #6
 30c:	06110000 	ldreq	r0, [r1], -r0
 310:	000003a3 	andeq	r0, r0, r3, lsr #7
 314:	00932404 	addseq	r2, r3, r4, lsl #8
 318:	06120000 	ldreq	r0, [r2], -r0
 31c:	00000506 	andeq	r0, r0, r6, lsl #10
 320:	00882504 	addeq	r2, r8, r4, lsl #10
 324:	06140000 	ldreq	r0, [r4], -r0
 328:	000004fe 	strdeq	r0, [r0], -lr
 32c:	00882604 	addeq	r2, r8, r4, lsl #12
 330:	06150000 	ldreq	r0, [r5], -r0
 334:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
 338:	00932704 	addseq	r2, r3, r4, lsl #14
 33c:	00160000 	andseq	r0, r6, r0
 340:	00039e03 	andeq	r9, r3, r3, lsl #28
 344:	a9280400 	stmdbge	r8!, {sl}
 348:	07000000 	streq	r0, [r0, -r0]
 34c:	000001f9 	strdeq	r0, [r0], -r9
 350:	64019101 	strvs	r9, [r1], #-257	; 0xfffffeff
 354:	e820000b 	stmda	r0!, {r0, r1, r3}
 358:	01000001 	tsteq	r0, r1
 35c:	0001cc9c 	muleq	r1, ip, ip
 360:	00780800 	rsbseq	r0, r8, r0, lsl #16
 364:	33019101 	movwcc	r9, #4353	; 0x1101
 368:	02000000 	andeq	r0, r0, #0
 36c:	79086791 	stmdbvc	r8, {r0, r4, r7, r8, r9, sl, sp, lr}
 370:	01910100 	orrseq	r0, r1, r0, lsl #2
 374:	00000033 	andeq	r0, r0, r3, lsr r0
 378:	08669102 	stmdaeq	r6!, {r1, r8, ip, pc}^
 37c:	00746573 	rsbseq	r6, r4, r3, ror r5
 380:	33019101 	movwcc	r9, #4353	; 0x1101
 384:	02000000 	andeq	r0, r0, #0
 388:	0b096591 	bleq	2599d4 <startup-0x1fda662c>
 38c:	01000002 	tsteq	r0, r2
 390:	00880196 	umulleq	r0, r8, r6, r1
 394:	91020000 	mrsls	r0, (UNDEF: 2)
 398:	0493096c 	ldreq	r0, [r3], #2412	; 0x96c
 39c:	97010000 	strls	r0, [r1, -r0]
 3a0:	00008801 	andeq	r8, r0, r1, lsl #16
 3a4:	6f910200 	svcvs	0x00910200
 3a8:	785f660a 	ldmdavc	pc, {r1, r3, r9, sl, sp, lr}^	; <UNPREDICTABLE>
 3ac:	01a60100 			; <UNDEFINED> instruction: 0x01a60100
 3b0:	00000088 	andeq	r0, r0, r8, lsl #1
 3b4:	096e9102 	stmdbeq	lr!, {r1, r8, ip, pc}^
 3b8:	00000402 	andeq	r0, r0, r2, lsl #8
 3bc:	8801a601 	stmdahi	r1, {r0, r9, sl, sp, pc}
 3c0:	02000000 	andeq	r0, r0, #0
 3c4:	11096d91 			; <UNDEFINED> instruction: 0x11096d91
 3c8:	01000002 	tsteq	r0, r2
 3cc:	008801b2 			; <UNDEFINED> instruction: 0x008801b2
 3d0:	91020000 	mrsls	r0, (UNDEF: 2)
 3d4:	dd0b006b 	stcle	0, cr0, [fp, #-428]	; 0xfffffe54
 3d8:	01000003 	tsteq	r0, r3
 3dc:	0b46018c 	bleq	1180a14 <startup-0x1ee7f5ec>
 3e0:	001e2000 	andseq	r2, lr, r0
 3e4:	9c010000 	stcls	0, cr0, [r1], {-0}
 3e8:	00025d07 	andeq	r5, r2, r7, lsl #26
 3ec:	01810100 	orreq	r0, r1, r0, lsl #2
 3f0:	20000ae0 	andcs	r0, r0, r0, ror #21
 3f4:	00000066 	andeq	r0, r0, r6, rrx
 3f8:	02139c01 	andseq	r9, r3, #256	; 0x100
 3fc:	be090000 	cdplt	0, 0, cr0, cr9, cr0, {0}
 400:	01000002 	tsteq	r0, r2
 404:	00880182 	addeq	r0, r8, r2, lsl #3
 408:	91020000 	mrsls	r0, (UNDEF: 2)
 40c:	64610a77 	strbtvs	r0, [r1], #-2679	; 0xfffff589
 410:	82010064 	andhi	r0, r1, #100	; 0x64
 414:	00008801 	andeq	r8, r0, r1, lsl #16
 418:	76910200 	ldrvc	r0, [r1], r0, lsl #4
 41c:	02e60c00 	rsceq	r0, r6, #0, 24
 420:	7c010000 	stcvc	0, cr0, [r1], {-0}
 424:	00008801 	andeq	r8, r0, r1, lsl #16
 428:	000ab600 	andeq	fp, sl, r0, lsl #12
 42c:	00002a20 	andeq	r2, r0, r0, lsr #20
 430:	3d9c0100 	ldfccs	f0, [ip]
 434:	0d000002 	stceq	0, cr0, [r0, #-8]
 438:	00000402 	andeq	r0, r0, r2, lsl #8
 43c:	33017c01 	movwcc	r7, #7169	; 0x1c01
 440:	02000000 	andeq	r0, r0, #0
 444:	07007791 			; <UNDEFINED> instruction: 0x07007791
 448:	00000307 	andeq	r0, r0, r7, lsl #6
 44c:	70017401 	andvc	r7, r1, r1, lsl #8
 450:	4620000a 	strtmi	r0, [r0], -sl
 454:	01000000 	mrseq	r0, (UNDEF: 0)
 458:	0002729c 	muleq	r2, ip, r2
 45c:	02f30d00 	rscseq	r0, r3, #0, 26
 460:	74010000 	strvc	r0, [r1], #-0
 464:	00008801 	andeq	r8, r0, r1, lsl #16
 468:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 46c:	0004020d 	andeq	r0, r4, sp, lsl #4
 470:	01740100 	cmneq	r4, r0, lsl #2
 474:	00000088 	andeq	r0, r0, r8, lsl #1
 478:	00769102 	rsbseq	r9, r6, r2, lsl #2
 47c:	00024707 	andeq	r4, r2, r7, lsl #14
 480:	016d0100 	cmneq	sp, r0, lsl #2
 484:	20000a30 	andcs	r0, r0, r0, lsr sl
 488:	00000040 	andeq	r0, r0, r0, asr #32
 48c:	02a79c01 	adceq	r9, r7, #256	; 0x100
 490:	b10d0000 	mrslt	r0, (UNDEF: 13)
 494:	01000004 	tsteq	r0, r4
 498:	0088016d 	addeq	r0, r8, sp, ror #2
 49c:	91020000 	mrsls	r0, (UNDEF: 2)
 4a0:	04020d77 	streq	r0, [r2], #-3447	; 0xfffff289
 4a4:	6d010000 	stcvs	0, cr0, [r1, #-0]
 4a8:	00008801 	andeq	r8, r0, r1, lsl #16
 4ac:	76910200 	ldrvc	r0, [r1], r0, lsl #4
 4b0:	038a0700 	orreq	r0, sl, #0, 14
 4b4:	59010000 	stmdbpl	r1, {}	; <UNPREDICTABLE>
 4b8:	0009b001 	andeq	fp, r9, r1
 4bc:	00008020 	andeq	r8, r0, r0, lsr #32
 4c0:	dc9c0100 	ldfles	f0, [ip], {0}
 4c4:	0d000002 	stceq	0, cr0, [r0, #-8]
 4c8:	0000027e 	andeq	r0, r0, lr, ror r2
 4cc:	88015901 	stmdahi	r1, {r0, r8, fp, ip, lr}
 4d0:	02000000 	andeq	r0, r0, #0
 4d4:	020d7791 	andeq	r7, sp, #38010880	; 0x2440000
 4d8:	01000004 	tsteq	r0, r4
 4dc:	00880159 	addeq	r0, r8, r9, asr r1
 4e0:	91020000 	mrsls	r0, (UNDEF: 2)
 4e4:	9e0c0076 	mcrls	0, 0, r0, cr12, cr6, {3}
 4e8:	01000002 	tsteq	r0, r2
 4ec:	00880141 	addeq	r0, r8, r1, asr #2
 4f0:	09200000 	stmdbeq	r0!, {}	; <UNPREDICTABLE>
 4f4:	00902000 	addseq	r2, r0, r0
 4f8:	9c010000 	stcls	0, cr0, [r1], {-0}
 4fc:	00000314 	andeq	r0, r0, r4, lsl r3
 500:	0004020d 	andeq	r0, r4, sp, lsl #4
 504:	01410100 	mrseq	r0, (UNDEF: 81)
 508:	00000088 	andeq	r0, r0, r8, lsl #1
 50c:	0a6f9102 	beq	1be491c <startup-0x1e41b6e4>
 510:	01007672 	tsteq	r0, r2, ror r6
 514:	0088014a 	addeq	r0, r8, sl, asr #2
 518:	91020000 	mrsls	r0, (UNDEF: 2)
 51c:	5a070077 	bpl	1c0700 <startup-0x1fe3f900>
 520:	01000004 	tsteq	r0, r4
 524:	08b6012f 	ldmeq	r6!, {r0, r1, r2, r3, r5, r8}
 528:	006a2000 	rsbeq	r2, sl, r0
 52c:	9c010000 	stcls	0, cr0, [r1], {-0}
 530:	00000338 	andeq	r0, r0, r8, lsr r3
 534:	0100630a 	tsteq	r0, sl, lsl #6
 538:	00880130 	addeq	r0, r8, r0, lsr r1
 53c:	91020000 	mrsls	r0, (UNDEF: 2)
 540:	9e0e0077 	mcrls	0, 0, r0, cr14, cr7, {3}
 544:	01000004 	tsteq	r0, r4
 548:	085a0120 	ldmdaeq	sl, {r5, r8}^
 54c:	005c2000 	subseq	r2, ip, r0
 550:	9c010000 	stcls	0, cr0, [r1], {-0}
 554:	00041f07 	andeq	r1, r4, r7, lsl #30
 558:	010d0100 	mrseq	r0, (UNDEF: 29)
 55c:	20000800 	andcs	r0, r0, r0, lsl #16
 560:	0000005a 	andeq	r0, r0, sl, asr r0
 564:	03709c01 	cmneq	r0, #256	; 0x100
 568:	020d0000 	andeq	r0, sp, #0
 56c:	01000004 	tsteq	r0, r4
 570:	0088010d 	addeq	r0, r8, sp, lsl #2
 574:	91020000 	mrsls	r0, (UNDEF: 2)
 578:	730f0077 	movwvc	r0, #61559	; 0xf077
 57c:	01000003 	tsteq	r0, r3
 580:	07a80105 	streq	r0, [r8, r5, lsl #2]!
 584:	00582000 	subseq	r2, r8, r0
 588:	9c010000 	stcls	0, cr0, [r1], {-0}
 58c:	000003a1 	andeq	r0, r0, r1, lsr #7
 590:	01007808 	tsteq	r0, r8, lsl #16
 594:	00880105 	addeq	r0, r8, r5, lsl #2
 598:	91020000 	mrsls	r0, (UNDEF: 2)
 59c:	00630a6f 	rsbeq	r0, r3, pc, ror #20
 5a0:	88010601 	stmdahi	r1, {r0, r9, sl}
 5a4:	02000000 	andeq	r0, r0, #0
 5a8:	10007791 	mulne	r0, r1, r7
 5ac:	000003af 	andeq	r0, r0, pc, lsr #7
 5b0:	074cfd01 	strbeq	pc, [ip, -r1, lsl #26]	; <UNPREDICTABLE>
 5b4:	005c2000 	subseq	r2, ip, r0
 5b8:	9c010000 	stcls	0, cr0, [r1], {-0}
 5bc:	000003cf 	andeq	r0, r0, pc, asr #7
 5c0:	01007811 	tsteq	r0, r1, lsl r8
 5c4:	000088fd 	strdeq	r8, [r0], -sp
 5c8:	6f910200 	svcvs	0x00910200
 5cc:	01006312 	tsteq	r0, r2, lsl r3
 5d0:	000088fe 	strdeq	r8, [r0], -lr
 5d4:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 5d8:	03c41300 	biceq	r1, r4, #0, 6
 5dc:	f4010000 	vst4.8	{d0-d3}, [r1], r0
 5e0:	20000710 	andcs	r0, r0, r0, lsl r7
 5e4:	0000003c 	andeq	r0, r0, ip, lsr r0
 5e8:	03f19c01 	mvnseq	r9, #256	; 0x100
 5ec:	63110000 	tstvs	r1, #0
 5f0:	33f40100 	mvnscc	r0, #0, 2
 5f4:	02000000 	andeq	r0, r0, #0
 5f8:	13007791 	movwne	r7, #1937	; 0x791
 5fc:	00000291 	muleq	r0, r1, r2
 600:	06bceb01 	ldrteq	lr, [ip], r1, lsl #22
 604:	00542000 	subseq	r2, r4, r0
 608:	9c010000 	stcls	0, cr0, [r1], {-0}
 60c:	0000042d 	andeq	r0, r0, sp, lsr #8
 610:	01007811 	tsteq	r0, r1, lsl r8
 614:	00007aeb 	andeq	r7, r0, fp, ror #21
 618:	6c910200 	lfmvs	f0, 4, [r1], {0}
 61c:	01007911 	tsteq	r0, r1, lsl r9
 620:	00007aeb 	andeq	r7, r0, fp, ror #21
 624:	68910200 	ldmvs	r1, {r9}
 628:	0002d314 	andeq	sp, r2, r4, lsl r3
 62c:	33ed0100 	mvncc	r0, #0, 2
 630:	02000000 	andeq	r0, r0, #0
 634:	15007791 	strne	r7, [r0, #-1937]	; 0xfffff86f
 638:	000003f7 	strdeq	r0, [r0], -r7
 63c:	0033e101 	eorseq	lr, r3, r1, lsl #2
 640:	06880000 	streq	r0, [r8], r0
 644:	00342000 	eorseq	r2, r4, r0
 648:	9c010000 	stcls	0, cr0, [r1], {-0}
 64c:	00000455 	andeq	r0, r0, r5, asr r4
 650:	00027914 	andeq	r7, r2, r4, lsl r9
 654:	33e20100 	mvncc	r0, #0, 2
 658:	02000000 	andeq	r0, r0, #0
 65c:	13007791 	movwne	r7, #1937	; 0x791
 660:	000004c0 	andeq	r0, r0, r0, asr #9
 664:	0658d801 	ldrbeq	sp, [r8], -r1, lsl #16
 668:	00302000 	eorseq	r2, r0, r0
 66c:	9c010000 	stcls	0, cr0, [r1], {-0}
 670:	00000479 	andeq	r0, r0, r9, ror r4
 674:	00048e16 	andeq	r8, r4, r6, lsl lr
 678:	33d80100 	bicscc	r0, r8, #0, 2
 67c:	02000000 	andeq	r0, r0, #0
 680:	15007791 	strne	r7, [r0, #-1937]	; 0xfffff86f
 684:	000004e6 	andeq	r0, r0, r6, ror #9
 688:	0033c801 	eorseq	ip, r3, r1, lsl #16
 68c:	06100000 	ldreq	r0, [r0], -r0
 690:	00482000 	subeq	r2, r8, r0
 694:	9c010000 	stcls	0, cr0, [r1], {-0}
 698:	000004a1 	andeq	r0, r0, r1, lsr #9
 69c:	00027914 	andeq	r7, r2, r4, lsl r9
 6a0:	33c90100 	biccc	r0, r9, #0, 2
 6a4:	02000000 	andeq	r0, r0, #0
 6a8:	15006f91 	strne	r6, [r0, #-3985]	; 0xfffff06f
 6ac:	0000040d 	andeq	r0, r0, sp, lsl #8
 6b0:	0033b801 	eorseq	fp, r3, r1, lsl #16
 6b4:	05c80000 	strbeq	r0, [r8]
 6b8:	00482000 	subeq	r2, r8, r0
 6bc:	9c010000 	stcls	0, cr0, [r1], {-0}
 6c0:	000004c9 	andeq	r0, r0, r9, asr #9
 6c4:	00027914 	andeq	r7, r2, r4, lsl r9
 6c8:	33b90100 			; <UNDEFINED> instruction: 0x33b90100
 6cc:	02000000 	andeq	r0, r0, #0
 6d0:	13006f91 	movwne	r6, #3985	; 0xf91
 6d4:	00000442 	andeq	r0, r0, r2, asr #8
 6d8:	059eb201 	ldreq	fp, [lr, #513]	; 0x201
 6dc:	002a2000 	eoreq	r2, sl, r0
 6e0:	9c010000 	stcls	0, cr0, [r1], {-0}
 6e4:	000004ed 	andeq	r0, r0, sp, ror #9
 6e8:	0002f316 	andeq	pc, r2, r6, lsl r3	; <UNPREDICTABLE>
 6ec:	33b20100 			; <UNDEFINED> instruction: 0x33b20100
 6f0:	02000000 	andeq	r0, r0, #0
 6f4:	13007791 	movwne	r7, #1937	; 0x791
 6f8:	0000050d 	andeq	r0, r0, sp, lsl #10
 6fc:	0574ab01 	ldrbeq	sl, [r4, #-2817]!	; 0xfffff4ff
 700:	002a2000 	eoreq	r2, sl, r0
 704:	9c010000 	stcls	0, cr0, [r1], {-0}
 708:	00000511 	andeq	r0, r0, r1, lsl r5
 70c:	00025516 	andeq	r5, r2, r6, lsl r5
 710:	33ab0100 			; <UNDEFINED> instruction: 0x33ab0100
 714:	02000000 	andeq	r0, r0, #0
 718:	10007791 	mulne	r0, r1, r7
 71c:	0000035e 	andeq	r0, r0, lr, asr r3
 720:	0524a201 	streq	sl, [r4, #-513]!	; 0xfffffdff
 724:	00502000 	subseq	r2, r0, r0
 728:	9c010000 	stcls	0, cr0, [r1], {-0}
 72c:	0000053f 	andeq	r0, r0, pc, lsr r5
 730:	01007811 	tsteq	r0, r1, lsl r8
 734:	000033a2 	andeq	r3, r0, r2, lsr #7
 738:	6f910200 	svcvs	0x00910200
 73c:	01006312 	tsteq	r0, r2, lsl r3
 740:	000033a5 	andeq	r3, r0, r5, lsr #7
 744:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 748:	02291000 	eoreq	r1, r9, #0
 74c:	99010000 	stmdbls	r1, {}	; <UNPREDICTABLE>
 750:	200004de 	ldrdcs	r0, [r0], -lr
 754:	00000046 	andeq	r0, r0, r6, asr #32
 758:	056d9c01 	strbeq	r9, [sp, #-3073]!	; 0xfffff3ff
 75c:	78110000 	ldmdavc	r1, {}	; <UNPREDICTABLE>
 760:	33990100 	orrscc	r0, r9, #0, 2
 764:	02000000 	andeq	r0, r0, #0
 768:	63126f91 	tstvs	r2, #580	; 0x244
 76c:	339c0100 	orrscc	r0, ip, #0, 2
 770:	02000000 	andeq	r0, r0, #0
 774:	17007791 			; <UNDEFINED> instruction: 0x17007791
 778:	000002db 	ldrdeq	r0, [r0], -fp
 77c:	04447a01 	strbeq	r7, [r4], #-2561	; 0xfffff5ff
 780:	009a2000 	addseq	r2, sl, r0
 784:	9c010000 	stcls	0, cr0, [r1], {-0}
 788:	00047617 	andeq	r7, r4, r7, lsl r6
 78c:	20670100 	rsbcs	r0, r7, r0, lsl #2
 790:	24200004 	strtcs	r0, [r0], #-4
 794:	01000000 	mrseq	r0, (UNDEF: 0)
 798:	046d189c 	strbteq	r1, [sp], #-2204	; 0xfffff764
 79c:	5f010000 	svcpl	0x00010000
 7a0:	00000033 	andeq	r0, r0, r3, lsr r0
 7a4:	200003ce 	andcs	r0, r0, lr, asr #7
 7a8:	00000052 	andeq	r0, r0, r2, asr r0
 7ac:	05b79c01 	ldreq	r9, [r7, #3073]!	; 0xc01
 7b0:	98160000 	ldmdals	r6, {}	; <UNPREDICTABLE>
 7b4:	01000003 	tsteq	r0, r3
 7b8:	0005b75f 	andeq	fp, r5, pc, asr r7
 7bc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 7c0:	36041900 	strcc	r1, [r4], -r0, lsl #18
 7c4:	10000001 	andne	r0, r0, r1
 7c8:	000002c3 	andeq	r0, r0, r3, asr #5
 7cc:	03b85b01 			; <UNDEFINED> instruction: 0x03b85b01
 7d0:	00162000 	andseq	r2, r6, r0
 7d4:	9c010000 	stcls	0, cr0, [r1], {-0}
 7d8:	000005e1 	andeq	r0, r0, r1, ror #11
 7dc:	00039816 	andeq	r9, r3, r6, lsl r8
 7e0:	b75b0100 	ldrblt	r0, [fp, -r0, lsl #2]
 7e4:	02000005 	andeq	r0, r0, #5
 7e8:	10007491 	mulne	r0, r1, r4
 7ec:	00000284 	andeq	r0, r0, r4, lsl #5
 7f0:	03685201 	cmneq	r8, #268435456	; 0x10000000
 7f4:	00502000 	subseq	r2, r0, r0
 7f8:	9c010000 	stcls	0, cr0, [r1], {-0}
 7fc:	00000613 	andeq	r0, r0, r3, lsl r6
 800:	00039816 	andeq	r9, r3, r6, lsl r8
 804:	b7520100 	ldrblt	r0, [r2, -r0, lsl #2]
 808:	02000005 	andeq	r0, r0, #5
 80c:	72117491 	andsvc	r7, r1, #-1862270976	; 0x91000000
 810:	0100776f 	tsteq	r0, pc, ror #14
 814:	00003352 	andeq	r3, r0, r2, asr r3
 818:	73910200 	orrsvc	r0, r1, #0, 4
 81c:	04f61000 	ldrbteq	r1, [r6], #0
 820:	37010000 	strcc	r0, [r1, -r0]
 824:	20000318 	andcs	r0, r0, r8, lsl r3
 828:	00000050 	andeq	r0, r0, r0, asr r0
 82c:	06519c01 	ldrbeq	r9, [r1], -r1, lsl #24
 830:	98160000 	ldmdals	r6, {}	; <UNPREDICTABLE>
 834:	01000003 	tsteq	r0, r3
 838:	0005b737 	andeq	fp, r5, r7, lsr r7
 83c:	4c910200 	lfmmi	f0, 4, [r1], {0}
 840:	01006311 	tsteq	r0, r1, lsl r3
 844:	00003337 	andeq	r3, r0, r7, lsr r3
 848:	4b910200 	blmi	fe441050 <__aeabi_idiv0+0xde4401f0>
 84c:	00045314 	andeq	r5, r4, r4, lsl r3
 850:	51380100 	teqpl	r8, r0, lsl #2
 854:	02000006 	andeq	r0, r0, #6
 858:	1a005091 	bne	14aa4 <startup-0x1ffeb55c>
 85c:	0000004c 	andeq	r0, r0, ip, asr #32
 860:	00000661 	andeq	r0, r0, r1, ror #12
 864:	0006611b 	andeq	r6, r6, fp, lsl r1
 868:	02000f00 	andeq	r0, r0, #0, 30
 86c:	04d70704 	ldrbeq	r0, [r7], #1796	; 0x704
 870:	f8150000 			; <UNDEFINED> instruction: 0xf8150000
 874:	01000002 	tsteq	r0, r2
 878:	00003324 	andeq	r3, r0, r4, lsr #6
 87c:	00028800 	andeq	r8, r2, r0, lsl #16
 880:	00009020 	andeq	r9, r0, r0, lsr #32
 884:	ac9c0100 	ldfges	f0, [ip], {0}
 888:	14000006 	strne	r0, [r0], #-6
 88c:	00000359 	andeq	r0, r0, r9, asr r3
 890:	06ac2501 	strteq	r2, [ip], r1, lsl #10
 894:	91020000 	mrsls	r0, (UNDEF: 2)
 898:	6f72125c 	svcvs	0x0072125c
 89c:	2b010077 	blcs	40a80 <startup-0x1ffbf580>
 8a0:	00000033 	andeq	r0, r0, r3, lsr r0
 8a4:	126f9102 	rsbne	r9, pc, #-2147483648	; 0x80000000
 8a8:	006c6f63 	rsbeq	r6, ip, r3, ror #30
 8ac:	00332b01 	eorseq	r2, r3, r1, lsl #22
 8b0:	91020000 	mrsls	r0, (UNDEF: 2)
 8b4:	331a006e 	tstcc	sl, #110	; 0x6e
 8b8:	bc000000 	stclt	0, cr0, [r0], {-0}
 8bc:	1b000006 	blne	8dc <startup-0x1ffff724>
 8c0:	00000661 	andeq	r0, r0, r1, ror #12
 8c4:	1610000f 	ldrne	r0, [r0], -pc
 8c8:	01000002 	tsteq	r0, r2
 8cc:	00022416 	andeq	r2, r2, r6, lsl r4
 8d0:	00006420 	andeq	r6, r0, r0, lsr #8
 8d4:	e09c0100 	adds	r0, ip, r0, lsl #2
 8d8:	16000006 	strne	r0, [r0], -r6
 8dc:	00000398 	muleq	r0, r8, r3
 8e0:	05b71601 	ldreq	r1, [r7, #1537]!	; 0x601
 8e4:	91020000 	mrsls	r0, (UNDEF: 2)
 8e8:	311c0074 	tstcc	ip, r4, ror r0
 8ec:	01000004 	tsteq	r0, r4
 8f0:	0001c005 	andeq	ip, r1, r5
 8f4:	00006420 	andeq	r6, r0, r0, lsr #8
 8f8:	169c0100 	ldrne	r0, [ip], r0, lsl #2
 8fc:	00000398 	muleq	r0, r8, r3
 900:	05b70501 	ldreq	r0, [r7, #1281]!	; 0x501
 904:	91020000 	mrsls	r0, (UNDEF: 2)
 908:	Address 0x00000908 is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	1117550e 	tstne	r7, lr, lsl #10
   c:	00171001 	andseq	r1, r7, r1
  10:	00240200 	eoreq	r0, r4, r0, lsl #4
  14:	0b3e0b0b 	bleq	f82c48 <startup-0x1f07d3b8>
  18:	00000e03 	andeq	r0, r0, r3, lsl #28
  1c:	0b002403 	bleq	9030 <startup-0x1fff6fd0>
  20:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  24:	04000008 	streq	r0, [r0], #-8
  28:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
  2c:	0b3a0e03 	bleq	e83840 <startup-0x1f17c7c0>
  30:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
  34:	06120111 			; <UNDEFINED> instruction: 0x06120111
  38:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
  3c:	00130119 	andseq	r0, r3, r9, lsl r1
  40:	00340500 	eorseq	r0, r4, r0, lsl #10
  44:	0b3a0803 	bleq	e82058 <startup-0x1f17dfa8>
  48:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  4c:	00001802 	andeq	r1, r0, r2, lsl #16
  50:	3f002e06 	svccc	0x00002e06
  54:	3a0e0319 	bcc	380cc0 <startup-0x1fc7f340>
  58:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
  5c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
  60:	96184006 	ldrls	r4, [r8], -r6
  64:	00001942 	andeq	r1, r0, r2, asr #18
  68:	3f002e07 	svccc	0x00002e07
  6c:	3a0e0319 	bcc	380cd8 <startup-0x1fc7f328>
  70:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
  74:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
  78:	97184006 	ldrls	r4, [r8, -r6]
  7c:	00001942 	andeq	r1, r0, r2, asr #18
  80:	01110100 	tsteq	r1, r0, lsl #2
  84:	0b130e25 	bleq	4c3920 <startup-0x1fb3c6e0>
  88:	01110e03 	tsteq	r1, r3, lsl #28
  8c:	17100612 			; <UNDEFINED> instruction: 0x17100612
  90:	24020000 	strcs	r0, [r2], #-0
  94:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  98:	000e030b 	andeq	r0, lr, fp, lsl #6
  9c:	00160300 	andseq	r0, r6, r0, lsl #6
  a0:	0b3a0e03 	bleq	e838b4 <startup-0x1f17c74c>
  a4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  a8:	24040000 	strcs	r0, [r4], #-0
  ac:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  b0:	0008030b 	andeq	r0, r8, fp, lsl #6
  b4:	01130500 	tsteq	r3, r0, lsl #10
  b8:	0b3a0b0b 	bleq	e82cec <startup-0x1f17d314>
  bc:	13010b3b 	movwne	r0, #6971	; 0x1b3b
  c0:	0d060000 	stceq	0, cr0, [r6, #-0]
  c4:	3a0e0300 	bcc	380ccc <startup-0x1fc7f334>
  c8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  cc:	000b3813 	andeq	r3, fp, r3, lsl r8
  d0:	012e0700 			; <UNDEFINED> instruction: 0x012e0700
  d4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  d8:	0b3b0b3a 	bleq	ec2dc8 <startup-0x1f13d238>
  dc:	01111927 	tsteq	r1, r7, lsr #18
  e0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  e4:	01194296 			; <UNDEFINED> instruction: 0x01194296
  e8:	08000013 	stmdaeq	r0, {r0, r1, r4}
  ec:	08030005 	stmdaeq	r3, {r0, r2}
  f0:	0b3b0b3a 	bleq	ec2de0 <startup-0x1f13d220>
  f4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  f8:	34090000 	strcc	r0, [r9], #-0
  fc:	3a0e0300 	bcc	380d04 <startup-0x1fc7f2fc>
 100:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 104:	00180213 	andseq	r0, r8, r3, lsl r2
 108:	00340a00 	eorseq	r0, r4, r0, lsl #20
 10c:	0b3a0803 	bleq	e82120 <startup-0x1f17dee0>
 110:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 114:	00001802 	andeq	r1, r0, r2, lsl #16
 118:	3f002e0b 	svccc	0x00002e0b
 11c:	3a0e0319 	bcc	380d88 <startup-0x1fc7f278>
 120:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 124:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 128:	96184006 	ldrls	r4, [r8], -r6
 12c:	00001942 	andeq	r1, r0, r2, asr #18
 130:	3f002e0c 	svccc	0x00002e0c
 134:	3a0e0319 	bcc	380da0 <startup-0x1fc7f260>
 138:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 13c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 140:	97184006 	ldrls	r4, [r8, -r6]
 144:	00001942 	andeq	r1, r0, r2, asr #18
 148:	01110100 	tsteq	r1, r0, lsl #2
 14c:	0b130e25 	bleq	4c39e8 <startup-0x1fb3c618>
 150:	01110e03 	tsteq	r1, r3, lsl #28
 154:	17100612 			; <UNDEFINED> instruction: 0x17100612
 158:	24020000 	strcs	r0, [r2], #-0
 15c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 160:	000e030b 	andeq	r0, lr, fp, lsl #6
 164:	00160300 	andseq	r0, r6, r0, lsl #6
 168:	0b3a0e03 	bleq	e8397c <startup-0x1f17c684>
 16c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 170:	24040000 	strcs	r0, [r4], #-0
 174:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 178:	0008030b 	andeq	r0, r8, fp, lsl #6
 17c:	01130500 	tsteq	r3, r0, lsl #10
 180:	0b3a0b0b 	bleq	e82db4 <startup-0x1f17d24c>
 184:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 188:	0d060000 	stceq	0, cr0, [r6, #-0]
 18c:	3a0e0300 	bcc	380d94 <startup-0x1fc7f26c>
 190:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 194:	000b3813 	andeq	r3, fp, r3, lsl r8
 198:	012e0700 			; <UNDEFINED> instruction: 0x012e0700
 19c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 1a0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 1a4:	01111927 	tsteq	r1, r7, lsr #18
 1a8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 1ac:	01194296 			; <UNDEFINED> instruction: 0x01194296
 1b0:	08000013 	stmdaeq	r0, {r0, r1, r4}
 1b4:	08030005 	stmdaeq	r3, {r0, r2}
 1b8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 1bc:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 1c0:	34090000 	strcc	r0, [r9], #-0
 1c4:	3a0e0300 	bcc	380dcc <startup-0x1fc7f234>
 1c8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 1cc:	00180213 	andseq	r0, r8, r3, lsl r2
 1d0:	00340a00 	eorseq	r0, r4, r0, lsl #20
 1d4:	0b3a0803 	bleq	e821e8 <startup-0x1f17de18>
 1d8:	1349053b 	movtne	r0, #38203	; 0x953b
 1dc:	00001802 	andeq	r1, r0, r2, lsl #16
 1e0:	3f002e0b 	svccc	0x00002e0b
 1e4:	3a0e0319 	bcc	380e50 <startup-0x1fc7f1b0>
 1e8:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 1ec:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 1f0:	97184006 	ldrls	r4, [r8, -r6]
 1f4:	00001942 	andeq	r1, r0, r2, asr #18
 1f8:	3f012e0c 	svccc	0x00012e0c
 1fc:	3a0e0319 	bcc	380e68 <startup-0x1fc7f198>
 200:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 204:	11134919 	tstne	r3, r9, lsl r9
 208:	40061201 	andmi	r1, r6, r1, lsl #4
 20c:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 210:	00001301 	andeq	r1, r0, r1, lsl #6
 214:	0300050d 	movweq	r0, #1293	; 0x50d
 218:	3b0b3a0e 	blcc	2cea58 <startup-0x1fd315a8>
 21c:	02134905 	andseq	r4, r3, #81920	; 0x14000
 220:	0e000018 	mcreq	0, 0, r0, cr0, cr8, {0}
 224:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 228:	0b3a0e03 	bleq	e83a3c <startup-0x1f17c5c4>
 22c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
 230:	06120111 			; <UNDEFINED> instruction: 0x06120111
 234:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 238:	0f000019 	svceq	0x00000019
 23c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 240:	0b3a0e03 	bleq	e83a54 <startup-0x1f17c5ac>
 244:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
 248:	06120111 			; <UNDEFINED> instruction: 0x06120111
 24c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 250:	00130119 	andseq	r0, r3, r9, lsl r1
 254:	012e1000 			; <UNDEFINED> instruction: 0x012e1000
 258:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 25c:	0b3b0b3a 	bleq	ec2f4c <startup-0x1f13d0b4>
 260:	01111927 	tsteq	r1, r7, lsr #18
 264:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 268:	01194297 			; <UNDEFINED> instruction: 0x01194297
 26c:	11000013 	tstne	r0, r3, lsl r0
 270:	08030005 	stmdaeq	r3, {r0, r2}
 274:	0b3b0b3a 	bleq	ec2f64 <startup-0x1f13d09c>
 278:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 27c:	34120000 	ldrcc	r0, [r2], #-0
 280:	3a080300 	bcc	200e88 <startup-0x1fdff178>
 284:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 288:	00180213 	andseq	r0, r8, r3, lsl r2
 28c:	012e1300 			; <UNDEFINED> instruction: 0x012e1300
 290:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 294:	0b3b0b3a 	bleq	ec2f84 <startup-0x1f13d07c>
 298:	01111927 	tsteq	r1, r7, lsr #18
 29c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 2a0:	01194296 			; <UNDEFINED> instruction: 0x01194296
 2a4:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
 2a8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 2ac:	0b3b0b3a 	bleq	ec2f9c <startup-0x1f13d064>
 2b0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 2b4:	2e150000 	cdpcs	0, 1, cr0, cr5, cr0, {0}
 2b8:	03193f01 	tsteq	r9, #1, 30
 2bc:	3b0b3a0e 	blcc	2ceafc <startup-0x1fd31504>
 2c0:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 2c4:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 2c8:	96184006 	ldrls	r4, [r8], -r6
 2cc:	13011942 	movwne	r1, #6466	; 0x1942
 2d0:	05160000 	ldreq	r0, [r6, #-0]
 2d4:	3a0e0300 	bcc	380edc <startup-0x1fc7f124>
 2d8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 2dc:	00180213 	andseq	r0, r8, r3, lsl r2
 2e0:	002e1700 	eoreq	r1, lr, r0, lsl #14
 2e4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 2e8:	0b3b0b3a 	bleq	ec2fd8 <startup-0x1f13d028>
 2ec:	01111927 	tsteq	r1, r7, lsr #18
 2f0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 2f4:	00194296 	mulseq	r9, r6, r2
 2f8:	012e1800 			; <UNDEFINED> instruction: 0x012e1800
 2fc:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 300:	0b3b0b3a 	bleq	ec2ff0 <startup-0x1f13d010>
 304:	13491927 	movtne	r1, #39207	; 0x9927
 308:	06120111 			; <UNDEFINED> instruction: 0x06120111
 30c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 310:	00130119 	andseq	r0, r3, r9, lsl r1
 314:	000f1900 	andeq	r1, pc, r0, lsl #18
 318:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 31c:	011a0000 	tsteq	sl, r0
 320:	01134901 	tsteq	r3, r1, lsl #18
 324:	1b000013 	blne	378 <startup-0x1ffffc88>
 328:	13490021 	movtne	r0, #36897	; 0x9021
 32c:	00000b2f 	andeq	r0, r0, pc, lsr #22
 330:	3f012e1c 	svccc	0x00012e1c
 334:	3a0e0319 	bcc	380fa0 <startup-0x1fc7f060>
 338:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 33c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 340:	97184006 	ldrls	r4, [r8, -r6]
 344:	00001942 	andeq	r1, r0, r2, asr #18
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	000000ce 	andeq	r0, r0, lr, asr #1
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...
  28:	0000001c 	andeq	r0, r0, ip, lsl r0
  2c:	00ac0002 	adceq	r0, ip, r2
  30:	00040000 	andeq	r0, r4, r0
  34:	00000000 	andeq	r0, r0, r0
  38:	200000e0 	andcs	r0, r0, r0, ror #1
  3c:	000000de 	ldrdeq	r0, [r0], -lr
	...
  48:	0000001c 	andeq	r0, r0, ip, lsl r0
  4c:	020a0002 	andeq	r0, sl, #2
  50:	00040000 	andeq	r0, r4, r0
  54:	00000000 	andeq	r0, r0, r0
  58:	200001c0 	andcs	r0, r0, r0, asr #3
  5c:	00000b8c 	andeq	r0, r0, ip, lsl #23
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	200000de 	ldrdcs	r0, [r0], -lr
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	000000cf 	andeq	r0, r0, pc, asr #1
   4:	00580002 	subseq	r0, r8, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	45010000 	strmi	r0, [r1, #-0]
  1c:	41442f3a 	cmpmi	r4, sl, lsr pc
  20:	37313054 			; <UNDEFINED> instruction: 0x37313054
  24:	646f432f 	strbtvs	r4, [pc], #-815	; 2c <startup-0x1fffffd4>
  28:	74694c65 	strbtvc	r4, [r9], #-3173	; 0xfffff39b
  2c:	69662065 	stmdbvs	r6!, {r0, r2, r5, r6, sp}^
  30:	2f73656c 	svccs	0x0073656c
  34:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
  38:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
  3c:	6f697461 	svcvs	0x00697461
  40:	2f72656e 	svccs	0x0072656e
  44:	70617267 	rsbvc	r7, r1, r7, ror #4
  48:	64636968 	strbtvs	r6, [r3], #-2408	; 0xfffff698
  4c:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
  50:	00007961 	andeq	r7, r0, r1, ror #18
  54:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
  58:	2e707574 	mrccs	5, 3, r7, cr0, cr4, {3}
  5c:	00010063 	andeq	r0, r1, r3, rrx
  60:	05000000 	streq	r0, [r0, #-0]
  64:	00000002 	andeq	r0, r0, r2
  68:	010a0320 	tsteq	sl, r0, lsr #6
  6c:	03025e13 	movweq	r5, #11795	; 0x2e13
  70:	00010100 	andeq	r0, r1, r0, lsl #2
  74:	00100205 	andseq	r0, r0, r5, lsl #4
  78:	13032000 	movwne	r2, #12288	; 0x3000
  7c:	3f2f2f01 	svccc	0x002f2f01
  80:	00342f3d 	eorseq	r2, r4, sp, lsr pc
  84:	4b030402 	blmi	c1094 <startup-0x1ff3ef6c>
  88:	03040200 	movweq	r0, #16896	; 0x4200
  8c:	04020073 	streq	r0, [r2], #-115	; 0xffffff8d
  90:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
  94:	0402005a 	streq	r0, [r2], #-90	; 0xffffffa6
  98:	02004b03 	andeq	r4, r0, #3072	; 0xc00
  9c:	00730304 	rsbseq	r0, r3, r4, lsl #6
  a0:	06010402 	streq	r0, [r1], -r2, lsl #8
  a4:	3d4c0658 	stclcc	6, cr0, [ip, #-352]	; 0xfffffea0
  a8:	03040200 	movweq	r0, #16896	; 0x4200
  ac:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
  b0:	02007303 	andeq	r7, r0, #201326592	; 0xc000000
  b4:	58060104 	stmdapl	r6, {r2, r8}
  b8:	02005a06 	andeq	r5, r0, #24576	; 0x6000
  bc:	004b0304 	subeq	r0, fp, r4, lsl #6
  c0:	73030402 	movwvc	r0, #13314	; 0x3402
  c4:	01040200 	mrseq	r0, R12_usr
  c8:	03065806 	movweq	r5, #26630	; 0x6806
  cc:	04024a11 	streq	r4, [r2], #-2577	; 0xfffff5ef
  d0:	5b010100 	blpl	404d8 <startup-0x1ffbfb28>
  d4:	02000001 	andeq	r0, r0, #1
  d8:	00010400 	andeq	r0, r1, r0, lsl #8
  dc:	fb010200 	blx	408e6 <startup-0x1ffbf71a>
  e0:	01000d0e 	tsteq	r0, lr, lsl #26
  e4:	00010101 	andeq	r0, r1, r1, lsl #2
  e8:	00010000 	andeq	r0, r1, r0
  ec:	3a450100 	bcc	11404f4 <startup-0x1eebfb0c>
  f0:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
  f4:	2f373130 	svccs	0x00373130
  f8:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
  fc:	6574694c 	ldrbvs	r6, [r4, #-2380]!	; 0xfffff6b4
 100:	6c696620 	stclvs	6, cr6, [r9], #-128	; 0xffffff80
 104:	4d2f7365 	stcmi	3, cr7, [pc, #-404]!	; ffffff78 <__aeabi_idiv0+0xdffff118>
 108:	616c706f 	cmnvs	ip, pc, rrx
 10c:	61726f62 	cmnvs	r2, r2, ror #30
 110:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 114:	672f7265 	strvs	r7, [pc, -r5, ror #4]!
 118:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 11c:	69646369 	stmdbvs	r4!, {r0, r3, r5, r6, r8, r9, sp, lr}^
 120:	616c7073 	smcvs	50947	; 0xc703
 124:	3a630079 	bcc	18c0310 <startup-0x1e73fcf0>
 128:	6573635c 	ldrbvs	r6, [r3, #-860]!	; 0xfffffca4
 12c:	5c707061 	ldclpl	0, cr7, [r0], #-388	; 0xfffffe7c
 130:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
 134:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
 138:	6f6f745c 	svcvs	0x006f745c
 13c:	675c736c 	ldrbvs	r7, [ip, -ip, ror #6]
 140:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
 144:	615c6d72 	cmpvs	ip, r2, ror sp
 148:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
 14c:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
 150:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
 154:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
 158:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
 15c:	63616d5c 	cmnvs	r1, #92, 26	; 0x1700
 160:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
 164:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
 168:	61657363 	cmnvs	r5, r3, ror #6
 16c:	635c7070 	cmpvs	ip, #112	; 0x70
 170:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
 174:	5c657469 	cfstrdpl	mvd7, [r5], #-420	; 0xfffffe5c
 178:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; ffffffb0 <__aeabi_idiv0+0xdffff150>
 17c:	63675c73 	cmnvs	r7, #29440	; 0x7300
 180:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
 184:	72615c6d 	rsbvc	r5, r1, #27904	; 0x6d00
 188:	6f6e2d6d 	svcvs	0x006e2d6d
 18c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
 190:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
 194:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 198:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
 19c:	00737973 	rsbseq	r7, r3, r3, ror r9
 1a0:	73797300 	cmnvc	r9, #0, 6
 1a4:	6c65645f 	cfstrdvs	mvd6, [r5], #-380	; 0xfffffe84
 1a8:	632e7961 			; <UNDEFINED> instruction: 0x632e7961
 1ac:	00000100 	andeq	r0, r0, r0, lsl #2
 1b0:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
 1b4:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
 1b8:	7079745f 	rsbsvc	r7, r9, pc, asr r4
 1bc:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
 1c0:	00000200 	andeq	r0, r0, r0, lsl #4
 1c4:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
 1c8:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
 1cc:	00030068 	andeq	r0, r3, r8, rrx
 1d0:	73797300 	cmnvc	r9, #0, 6
 1d4:	6c65645f 	cfstrdvs	mvd6, [r5], #-380	; 0xfffffe84
 1d8:	682e7961 	stmdavs	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
 1dc:	00000100 	andeq	r0, r0, r0, lsl #2
 1e0:	02050000 	andeq	r0, r5, #0
 1e4:	200000e0 	andcs	r0, r0, r0, ror #1
 1e8:	42443319 	submi	r3, r4, #1677721600	; 0x64000000
 1ec:	02004243 	andeq	r4, r0, #805306372	; 0x30000004
 1f0:	20060104 	andcs	r0, r6, r4, lsl #2
 1f4:	893d6c06 	ldmdbhi	sp!, {r1, r2, sl, fp, sp, lr}
 1f8:	032f2f2f 			; <UNDEFINED> instruction: 0x032f2f2f
 1fc:	834c3c0d 	movthi	r3, #52237	; 0xcc0d
 200:	02003e3f 	andeq	r3, r0, #1008	; 0x3f0
 204:	003e0304 	eorseq	r0, lr, r4, lsl #6
 208:	2c030402 	cfstrscs	mvf0, [r3], {2}
 20c:	01040200 	mrseq	r0, R12_usr
 210:	4e063c06 	cdpmi	12, 0, cr3, cr6, cr6, {0}
 214:	4c4a0d03 	mcrrmi	13, 0, r0, sl, cr3
 218:	005a3f83 	subseq	r3, sl, r3, lsl #31
 21c:	3e030402 	cdpcc	4, 0, cr0, cr3, cr2, {0}
 220:	03040200 	movweq	r0, #16896	; 0x4200
 224:	0402002c 	streq	r0, [r2], #-44	; 0xffffffd4
 228:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
 22c:	0004024e 	andeq	r0, r4, lr, asr #4
 230:	02ce0101 	sbceq	r0, lr, #1073741824	; 0x40000000
 234:	00020000 	andeq	r0, r2, r0
 238:	000000fa 	strdeq	r0, [r0], -sl
 23c:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 240:	0101000d 	tsteq	r1, sp
 244:	00000101 	andeq	r0, r0, r1, lsl #2
 248:	00000100 	andeq	r0, r0, r0, lsl #2
 24c:	2f3a4501 	svccs	0x003a4501
 250:	30544144 	subscc	r4, r4, r4, asr #2
 254:	432f3731 			; <UNDEFINED> instruction: 0x432f3731
 258:	4c65646f 	cfstrdmi	mvd6, [r5], #-444	; 0xfffffe44
 25c:	20657469 	rsbcs	r7, r5, r9, ror #8
 260:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0xfffff69a
 264:	6f4d2f73 	svcvs	0x004d2f73
 268:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
 26c:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
 270:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
 274:	72672f72 	rsbvc	r2, r7, #456	; 0x1c8
 278:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 27c:	73696463 	cmnvc	r9, #1660944384	; 0x63000000
 280:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 284:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
 288:	61657363 	cmnvs	r5, r3, ror #6
 28c:	635c7070 	cmpvs	ip, #112	; 0x70
 290:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
 294:	5c657469 	cfstrdpl	mvd7, [r5], #-420	; 0xfffffe5c
 298:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; d0 <startup-0x1fffff30>
 29c:	63675c73 	cmnvs	r7, #29440	; 0x7300
 2a0:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
 2a4:	72615c6d 	rsbvc	r5, r1, #27904	; 0x6d00
 2a8:	6f6e2d6d 	svcvs	0x006e2d6d
 2ac:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
 2b0:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
 2b4:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 2b8:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
 2bc:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
 2c0:	00656e69 	rsbeq	r6, r5, r9, ror #28
 2c4:	635c3a63 	cmpvs	ip, #405504	; 0x63000
 2c8:	70616573 	rsbvc	r6, r1, r3, ror r5
 2cc:	6f635c70 	svcvs	0x00635c70
 2d0:	696c6564 	stmdbvs	ip!, {r2, r5, r6, r8, sl, sp, lr}^
 2d4:	745c6574 	ldrbvc	r6, [ip], #-1396	; 0xfffffa8c
 2d8:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
 2dc:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
 2e0:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
 2e4:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
 2e8:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
 2ec:	61652d65 	cmnvs	r5, r5, ror #26
 2f0:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
 2f4:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
 2f8:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
 2fc:	00007379 	andeq	r7, r0, r9, ror r3
 300:	6f697067 	svcvs	0x00697067
 304:	0100632e 	tsteq	r0, lr, lsr #6
 308:	645f0000 	ldrbvs	r0, [pc], #-0	; 310 <startup-0x1ffffcf0>
 30c:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
 310:	745f746c 	ldrbvc	r7, [pc], #-1132	; 318 <startup-0x1ffffce8>
 314:	73657079 	cmnvc	r5, #121	; 0x79
 318:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
 31c:	735f0000 	cmpvc	pc, #0
 320:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
 324:	00682e74 	rsbeq	r2, r8, r4, ror lr
 328:	67000003 	strvs	r0, [r0, -r3]
 32c:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
 330:	00010068 	andeq	r0, r1, r8, rrx
 334:	05000000 	streq	r0, [r0, #-0]
 338:	0001c002 	andeq	ip, r1, r2
 33c:	674d1620 	strbvs	r1, [sp, -r0, lsr #12]
 340:	6786756a 	strvs	r7, [r6, sl, ror #10]
 344:	674c6875 	smlsldxvs	r6, ip, r5, r8
 348:	75777569 	ldrbvc	r7, [r7, #-1385]!	; 0xfffffa97
 34c:	6d3d7667 	ldcvs	6, cr7, [sp, #-412]!	; 0xfffffe64
 350:	83834b59 	orrhi	r4, r3, #91136	; 0x16400
 354:	04020059 	streq	r0, [r2], #-89	; 0xffffffa7
 358:	0200a702 	andeq	sl, r0, #524288	; 0x80000
 35c:	74060104 	strvc	r0, [r6], #-260	; 0xfffffefc
 360:	02006006 	andeq	r6, r0, #6
 364:	92210104 	eorls	r0, r1, #4, 2
 368:	90130375 	andsls	r0, r3, r5, ror r3
 36c:	921e404b 	andsls	r4, lr, #75	; 0x4b
 370:	037a7576 	cmneq	sl, #494927872	; 0x1d800000
 374:	1b50207a 	blne	1408564 <startup-0x1ebf7a9c>
 378:	4c4b4b4b 	mcrrmi	11, 4, r4, fp, cr11
 37c:	4c3d4b4c 			; <UNDEFINED> instruction: 0x4c3d4b4c
 380:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
 384:	06660601 	strbteq	r0, [r6], -r1, lsl #12
 388:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
 38c:	06660601 	strbteq	r0, [r6], -r1, lsl #12
 390:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
 394:	06660601 	strbteq	r0, [r6], -r1, lsl #12
 398:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
 39c:	06660601 	strbteq	r0, [r6], -r1, lsl #12
 3a0:	304c212f 	subcc	r2, ip, pc, lsr #2
 3a4:	842f4442 	strthi	r4, [pc], #-1090	; 3ac <startup-0x1ffffc54>
 3a8:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
 3ac:	06200601 	strteq	r0, [r0], -r1, lsl #12
 3b0:	3f3d3e84 	svccc	0x003d3e84
 3b4:	01040200 	mrseq	r0, R12_usr
 3b8:	84062006 	strhi	r2, [r6], #-6
 3bc:	003e3d3e 	eorseq	r3, lr, lr, lsr sp
 3c0:	06010402 	streq	r0, [r1], -r2, lsl #8
 3c4:	3e840620 	cdpcc	6, 8, cr0, cr4, cr0, {1}
 3c8:	02003e3d 	andeq	r3, r0, #976	; 0x3d0
 3cc:	20060104 	andcs	r0, r6, r4, lsl #2
 3d0:	3d3e8406 	cfldrscc	mvf8, [lr, #-24]!	; 0xffffffe8
 3d4:	596a3e3d 	stmdbpl	sl!, {r0, r2, r3, r4, r5, r9, sl, fp, ip, sp}^
 3d8:	6a7659bb 	bvs	1d96acc <startup-0x1e269534>
 3dc:	59130859 	ldmdbpl	r3, {r0, r3, r4, r6, fp}
 3e0:	3d3d6876 	ldccc	8, cr6, [sp, #-472]!	; 0xfffffe28
 3e4:	3d674c59 	stclcc	12, cr4, [r7, #-356]!	; 0xfffffe9c
 3e8:	404c593d 	submi	r5, ip, sp, lsr r9
 3ec:	5b3d3d68 	blpl	f4f994 <startup-0x1f0b066c>
 3f0:	40842f68 	addmi	r2, r4, r8, ror #30
 3f4:	5b3d3d68 	blpl	f4f99c <startup-0x1f0b0664>
 3f8:	68842f68 	stmvs	r4, {r3, r5, r6, r8, r9, sl, fp, sp}
 3fc:	3e2f4b3d 	vmovcc.16	d15[2], r4
 400:	2f3d3e68 	svccs	0x003d3e68
 404:	2f3d4b2f 	svccs	0x003d4b2f
 408:	02005976 	andeq	r5, r0, #1933312	; 0x1d8000
 40c:	3c060104 	stfccs	f0, [r6], {4}
 410:	3d673d06 	stclcc	13, cr3, [r7, #-24]!	; 0xffffffe8
 414:	3e26a776 	mcrcc	7, 1, sl, cr6, cr6, {3}
 418:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
 41c:	06200601 	strteq	r0, [r0], -r1, lsl #12
 420:	3e593d84 	cdpcc	13, 5, cr3, cr9, cr4, {4}
 424:	8359684c 	cmphi	r9, #76, 16	; 0x4c0000
 428:	687659e5 	ldmdavs	r6!, {r0, r2, r5, r6, r7, r8, fp, ip, lr}^
 42c:	59d78359 	ldmibpl	r7, {r0, r3, r4, r6, r8, r9, pc}^
 430:	10036768 	andne	r6, r3, r8, ror #14
 434:	20700374 	rsbscs	r0, r0, r4, ror r3
 438:	034a1003 	movteq	r1, #40963	; 0xa003
 43c:	223d2072 	eorscs	r2, sp, #114	; 0x72
 440:	3d223d3d 	stccc	13, cr3, [r2, #-244]!	; 0xffffff0c
 444:	223d223d 	eorscs	r2, sp, #-805306365	; 0xd0000003
 448:	3d3d2f4c 	ldccc	15, cr2, [sp, #-304]!	; 0xfffffed0
 44c:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 450:	4b4b4b4b 	blmi	12d3184 <startup-0x1ed2ce7c>
 454:	3e3e3d4b 	cdpcc	13, 3, cr3, cr14, cr11, {2}
 458:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 45c:	752f3d30 	strvc	r3, [pc, #-3376]!	; fffff734 <__aeabi_idiv0+0xdfffe8d4>
 460:	25452f3d 	strbcs	r2, [r5, #-3901]	; 0xfffff0c3
 464:	67a03d22 	strvs	r3, [r0, r2, lsr #26]!
 468:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 46c:	2f3d2f59 	svccs	0x003d2f59
 470:	4b3d3d59 	blmi	f4f9dc <startup-0x1f0b0624>
 474:	3d4b303d 	stclcc	0, cr3, [fp, #-244]	; 0xffffff0c
 478:	91a03d31 	lsrls	r3, r1, sp
 47c:	3d2f594b 			; <UNDEFINED> instruction: 0x3d2f594b
 480:	3d593d2f 	ldclcc	13, cr3, [r9, #-188]	; 0xffffff44
 484:	303d5930 	eorscc	r5, sp, r0, lsr r9
 488:	763d3d3d 			; <UNDEFINED> instruction: 0x763d3d3d
 48c:	3d593d91 	ldclcc	13, cr3, [r9, #-580]	; 0xfffffdbc
 490:	3d914c83 	ldccc	12, cr4, [r1, #524]	; 0x20c
 494:	833d3d59 	teqhi	sp, #5696	; 0x1640
 498:	6759674c 	ldrbvs	r6, [r9, -ip, asr #14]
 49c:	9f4b3e4c 	svcls	0x004b3e4c
 4a0:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
 4a4:	02004b03 	andeq	r4, r0, #3072	; 0xc00
 4a8:	00490304 	subeq	r0, r9, r4, lsl #6
 4ac:	06010402 	streq	r0, [r1], -r2, lsl #8
 4b0:	04020058 	streq	r0, [r2], #-88	; 0xffffffa8
 4b4:	00470602 	subeq	r0, r7, r2, lsl #12
 4b8:	06010402 	streq	r0, [r1], -r2, lsl #8
 4bc:	4c510658 	mrrcmi	6, 5, r0, r1, cr8
 4c0:	763d3d2f 	ldrtvc	r3, [sp], -pc, lsr #26
 4c4:	040200e6 	streq	r0, [r2], #-230	; 0xffffff1a
 4c8:	004a0602 	subeq	r0, sl, r2, lsl #12
 4cc:	4a030402 	bmi	c14dc <startup-0x1ff3eb24>
 4d0:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
 4d4:	00590658 	subseq	r0, r9, r8, asr r6
 4d8:	06010402 	streq	r0, [r1], -r2, lsl #8
 4dc:	ae5a064a 	cdpge	6, 5, cr0, cr10, cr10, {2}
 4e0:	59592108 	ldmdbpl	r9, {r3, r8, sp}^
 4e4:	59595959 	ldmdbpl	r9, {r0, r3, r4, r6, r8, fp, ip, lr}^
 4e8:	7a4b5a59 	bvc	12d6e54 <startup-0x1ed291ac>
 4ec:	4b764b4b 	blmi	1d93220 <startup-0x1e26cde0>
 4f0:	9fd7c968 	svcls	0x00d7c968
 4f4:	a0ae4bc9 	adcge	r4, lr, r9, asr #23
 4f8:	2fac5a03 	svccs	0x00ac5a03
 4fc:	02202603 	eoreq	r2, r0, #3145728	; 0x300000
 500:	01010008 	tsteq	r1, r8

Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	20554e47 	subscs	r4, r5, r7, asr #28
   4:	20393943 	eorscs	r3, r9, r3, asr #18
   8:	2e332e36 	mrccs	14, 1, r2, cr3, cr6, {1}
   c:	30322031 	eorscc	r2, r2, r1, lsr r0
  10:	32303731 	eorscc	r3, r0, #12845056	; 0xc40000
  14:	28203531 	stmdacs	r0!, {r0, r4, r5, r8, sl, ip, sp}
  18:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0xfffffa8e
  1c:	29657361 	stmdbcs	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
  20:	52415b20 	subpl	r5, r1, #32, 22	; 0x8000
  24:	6d652f4d 	stclvs	15, cr2, [r5, #-308]!	; 0xfffffecc
  28:	64646562 	strbtvs	r6, [r4], #-1378	; 0xfffffa9e
  2c:	362d6465 	strtcc	r6, [sp], -r5, ror #8
  30:	6172622d 	cmnvs	r2, sp, lsr #4
  34:	2068636e 	rsbcs	r6, r8, lr, ror #6
  38:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  3c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  40:	35343220 	ldrcc	r3, [r4, #-544]!	; 0xfffffde0
  44:	5d323135 	ldfpls	f3, [r2, #-212]!	; 0xffffff2c
  48:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
  4c:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
  50:	616d2d20 	cmnvs	sp, r0, lsr #26
  54:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
  58:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
  5c:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
  60:	6c666d2d 	stclvs	13, cr6, [r6], #-180	; 0xffffff4c
  64:	2d74616f 	ldfcse	f6, [r4, #-444]!	; 0xfffffe44
  68:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
  6c:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xfffff08d
  70:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
  74:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
  78:	616d2d20 	cmnvs	sp, r0, lsr #26
  7c:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
  80:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
  84:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
  88:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
  8c:	2d20304f 	stccs	0, cr3, [r0, #-316]!	; 0xfffffec4
  90:	3d647473 	cfstrdcc	mvd7, [r4, #-460]!	; 0xfffffe34
  94:	00393963 	eorseq	r3, r9, r3, ror #18
  98:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
  9c:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
  a0:	61686320 	cmnvs	r8, r0, lsr #6
  a4:	68730072 	ldmdavs	r3!, {r1, r4, r5, r6}^
  a8:	2074726f 	rsbscs	r7, r4, pc, ror #4
  ac:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
  b0:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
  b4:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
  b8:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
  bc:	6e69006e 	cdpvs	0, 6, cr0, cr9, cr14, {3}
  c0:	615f7469 	cmpvs	pc, r9, ror #8
  c4:	6c007070 	stcvs	0, cr7, [r0], {112}	; 0x70
  c8:	20676e6f 	rsbcs	r6, r7, pc, ror #28
  cc:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
  d0:	736e7520 	cmnvc	lr, #32, 10	; 0x8000000
  d4:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
  d8:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
  dc:	74730074 	ldrbtvc	r0, [r3], #-116	; 0xffffff8c
  e0:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
  e4:	3a450070 	bcc	11402ac <startup-0x1eebfd54>
  e8:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
  ec:	2f373130 	svccs	0x00373130
  f0:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
  f4:	6574694c 	ldrbvs	r6, [r4, #-2380]!	; 0xfffff6b4
  f8:	6c696620 	stclvs	6, cr6, [r9], #-128	; 0xffffff80
  fc:	4d2f7365 	stcmi	3, cr7, [pc, #-404]!	; ffffff70 <__aeabi_idiv0+0xdffff110>
 100:	616c706f 	cmnvs	ip, pc, rrx
 104:	61726f62 	cmnvs	r2, r2, ror #30
 108:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 10c:	672f7265 	strvs	r7, [pc, -r5, ror #4]!
 110:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 114:	69646369 	stmdbvs	r4!, {r0, r3, r5, r6, r8, r9, sp, lr}^
 118:	616c7073 	smcvs	50947	; 0xc703
 11c:	74732f79 	ldrbtvc	r2, [r3], #-3961	; 0xfffff087
 120:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
 124:	00632e70 	rsbeq	r2, r3, r0, ror lr
 128:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
 12c:	6e6f6c20 	cdpvs	12, 6, cr6, cr15, cr0, {1}
 130:	6e692067 	cdpvs	0, 6, cr2, cr9, cr7, {3}
 134:	68730074 	ldmdavs	r3!, {r2, r4, r5, r6}^
 138:	2074726f 	rsbscs	r7, r4, pc, ror #4
 13c:	00746e69 	rsbseq	r6, r4, r9, ror #28
 140:	54737953 	ldrbtpl	r7, [r3], #-2387	; 0xfffff6ad
 144:	006b6369 	rsbeq	r6, fp, r9, ror #6
 148:	5f4b5453 	svcpl	0x004b5453
 14c:	494c4143 	stmdbmi	ip, {r0, r1, r6, r8, lr}^
 150:	54530042 	ldrbpl	r0, [r3], #-66	; 0xffffffbe
 154:	41565f4b 	cmpmi	r6, fp, asr #30
 158:	5453004c 	ldrbpl	r0, [r3], #-76	; 0xffffffb4
 15c:	54435f4b 	strbpl	r5, [r3], #-3915	; 0xfffff0b5
 160:	45004c52 	strmi	r4, [r0, #-3154]	; 0xfffff3ae
 164:	41442f3a 	cmpmi	r4, sl, lsr pc
 168:	37313054 			; <UNDEFINED> instruction: 0x37313054
 16c:	646f432f 	strbtvs	r4, [pc], #-815	; 174 <startup-0x1ffffe8c>
 170:	74694c65 	strbtvc	r4, [r9], #-3173	; 0xfffff39b
 174:	69662065 	stmdbvs	r6!, {r0, r2, r5, r6, sp}^
 178:	2f73656c 	svccs	0x0073656c
 17c:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
 180:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
 184:	6f697461 	svcvs	0x00697461
 188:	2f72656e 	svccs	0x0072656e
 18c:	70617267 	rsbvc	r7, r1, r7, ror #4
 190:	64636968 	strbtvs	r6, [r3], #-2408	; 0xfffff698
 194:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 198:	732f7961 			; <UNDEFINED> instruction: 0x732f7961
 19c:	645f7379 	ldrbvs	r7, [pc], #-889	; 1a4 <startup-0x1ffffe5c>
 1a0:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 1a4:	5f00632e 	svcpl	0x0000632e
 1a8:	6e69755f 	mcrvs	5, 3, r7, cr9, cr15, {2}
 1ac:	5f323374 	svcpl	0x00323374
 1b0:	54530074 	ldrbpl	r0, [r3], #-116	; 0xffffff8c
 1b4:	4f4c5f4b 	svcmi	0x004c5f4b
 1b8:	64004441 	strvs	r4, [r0], #-1089	; 0xfffffbbf
 1bc:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 1c0:	6b696d5f 	blvs	1a5b744 <startup-0x1e5a48bc>
 1c4:	64006f72 	strvs	r6, [r0], #-3954	; 0xfffff08e
 1c8:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 1cc:	3035325f 	eorscc	r3, r5, pc, asr r2
 1d0:	6400736e 	strvs	r7, [r0], #-878	; 0xfffffc92
 1d4:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 1d8:	65640073 	strbvs	r0, [r4, #-115]!	; 0xffffff8d
 1dc:	5f79616c 	svcpl	0x0079616c
 1e0:	6c6c696d 			; <UNDEFINED> instruction: 0x6c6c696d
 1e4:	65640069 	strbvs	r0, [r4, #-105]!	; 0xffffff97
 1e8:	5f79616c 	svcpl	0x0079616c
 1ec:	6e303035 	mrcvs	0, 1, r3, cr0, cr5, {1}
 1f0:	64690073 	strbtvs	r0, [r9], #-115	; 0xffffff8d
 1f4:	776f4c72 			; <UNDEFINED> instruction: 0x776f4c72
 1f8:	78697000 	stmdavc	r9!, {ip, sp, lr}^
 1fc:	6f006c65 	svcvs	0x00006c65
 200:	65527264 	ldrbvs	r7, [r2, #-612]	; 0xfffffd9c
 204:	76726573 			; <UNDEFINED> instruction: 0x76726573
 208:	69006465 	stmdbvs	r0, {r0, r2, r5, r6, sl, sp, lr}
 20c:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
 210:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
 214:	65730070 	ldrbvs	r0, [r3, #-112]!	; 0xffffff90
 218:	5f707574 	svcpl	0x00707574
 21c:	5f726f66 	svcpl	0x00726f66
 220:	5f676573 	svcpl	0x00676573
 224:	70736964 	rsbsvc	r6, r3, r4, ror #18
 228:	63736100 	cmnvs	r3, #0, 2
 22c:	635f6969 	cmpvs	pc, #1720320	; 0x1a4000
 230:	5f6c7274 	svcpl	0x006c7274
 234:	5f746962 	svcpl	0x00746962
 238:	00746573 	rsbseq	r6, r4, r3, ror r5
 23c:	69755f5f 	ldmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
 240:	3631746e 	ldrtcc	r7, [r1], -lr, ror #8
 244:	6700745f 	smlsdvs	r0, pc, r4, r7	; <UNPREDICTABLE>
 248:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 24c:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 250:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 254:	6d6f635f 	stclvs	3, cr6, [pc, #-380]!	; e0 <startup-0x1fffff20>
 258:	646e616d 	strbtvs	r6, [lr], #-365	; 0xfffffe93
 25c:	61726700 	cmnvs	r2, r0, lsl #14
 260:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 264:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
 268:	735f7261 	cmpvc	pc, #268435462	; 0x10000006
 26c:	65657263 	strbvs	r7, [r5, #-611]!	; 0xfffffd9d
 270:	746f006e 	strbtvc	r0, [pc], #-110	; 278 <startup-0x1ffffd88>
 274:	72657079 	rsbvc	r7, r5, #121	; 0x79
 278:	61657200 	cmnvs	r5, r0, lsl #4
 27c:	61765f64 	cmnvs	r6, r4, ror #30
 280:	0065756c 	rsbeq	r7, r5, ip, ror #10
 284:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
 288:	65746176 	ldrbvs	r6, [r4, #-374]!	; 0xfffffe8a
 28c:	776f725f 			; <UNDEFINED> instruction: 0x776f725f
 290:	63736100 	cmnvs	r3, #0, 2
 294:	675f6969 	ldrbvs	r6, [pc, -r9, ror #18]
 298:	786f746f 	stmdavc	pc!, {r0, r1, r2, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
 29c:	72670079 	rsbvc	r0, r7, #121	; 0x79
 2a0:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 2a4:	65725f63 	ldrbvs	r5, [r2, #-3939]!	; 0xfffff09d
 2a8:	6f006461 	svcvs	0x00006461
 2ac:	73655274 	cmnvc	r5, #116, 4	; 0x40000007
 2b0:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0xfffffd9b
 2b4:	736f0064 	cmnvc	pc, #100	; 0x64
 2b8:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
 2bc:	61700072 	cmnvs	r0, r2, ror r0
 2c0:	64006567 	strvs	r6, [r0], #-1383	; 0xfffffa99
 2c4:	74636165 	strbtvc	r6, [r3], #-357	; 0xfffffe9b
 2c8:	74617669 	strbtvc	r7, [r1], #-1641	; 0xfffff997
 2cc:	6f725f65 	svcvs	0x00725f65
 2d0:	61007377 	tstvs	r0, r7, ror r3
 2d4:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0xfffffb9c
 2d8:	61007373 	tstvs	r0, r3, ror r3
 2dc:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 2e0:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
 2e4:	72670074 	rsbvc	r0, r7, #116	; 0x74
 2e8:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 2ec:	65725f63 	ldrbvs	r5, [r2, #-3939]!	; 0xfffff09d
 2f0:	645f6461 	ldrbvs	r6, [pc], #-1121	; 2f8 <startup-0x1ffffd08>
 2f4:	00617461 	rsbeq	r7, r1, r1, ror #8
 2f8:	6279656b 	rsbsvs	r6, r9, #448790528	; 0x1ac00000
 2fc:	755f5f00 	ldrbvc	r5, [pc, #-3840]	; fffff404 <__aeabi_idiv0+0xdfffe5a4>
 300:	38746e69 	ldmdacc	r4!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^
 304:	6700745f 	smlsdvs	r0, pc, r4, r7	; <UNPREDICTABLE>
 308:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 30c:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 310:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 314:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
 318:	3a450061 	bcc	11404a4 <startup-0x1eebfb5c>
 31c:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
 320:	2f373130 	svccs	0x00373130
 324:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
 328:	6574694c 	ldrbvs	r6, [r4, #-2380]!	; 0xfffff6b4
 32c:	6c696620 	stclvs	6, cr6, [r9], #-128	; 0xffffff80
 330:	4d2f7365 	stcmi	3, cr7, [pc, #-404]!	; 1a4 <startup-0x1ffffe5c>
 334:	616c706f 	cmnvs	ip, pc, rrx
 338:	61726f62 	cmnvs	r2, r2, ror #30
 33c:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 340:	672f7265 	strvs	r7, [pc, -r5, ror #4]!
 344:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 348:	69646369 	stmdbvs	r4!, {r0, r3, r5, r6, r8, r9, sp, lr}^
 34c:	616c7073 	smcvs	50947	; 0xc703
 350:	70672f79 	rsbvc	r2, r7, r9, ror pc
 354:	632e6f69 			; <UNDEFINED> instruction: 0x632e6f69
 358:	79656b00 	stmdbvc	r5!, {r8, r9, fp, sp, lr}^
 35c:	73610073 	cmnvc	r1, #115	; 0x73
 360:	5f696963 	svcpl	0x00696963
 364:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
 368:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 36c:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
 370:	67007261 	strvs	r7, [r0, -r1, ror #4]
 374:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 378:	635f6369 	cmpvs	pc, #-1543503871	; 0xa4000001
 37c:	5f6c7274 	svcpl	0x006c7274
 380:	5f746962 	svcpl	0x00746962
 384:	61656c63 	cmnvs	r5, r3, ror #24
 388:	72670072 	rsbvc	r0, r7, #114	; 0x72
 38c:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 390:	72775f63 	rsbsvc	r5, r7, #396	; 0x18c
 394:	00657469 	rsbeq	r7, r5, r9, ror #8
 398:	6970675f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, sp, lr}^
 39c:	5047006f 	subpl	r0, r7, pc, rrx
 3a0:	69004f49 	stmdbvs	r0, {r0, r3, r6, r8, r9, sl, fp, lr}
 3a4:	65527264 	ldrbvs	r7, [r2, #-612]	; 0xfffffd9c
 3a8:	76726573 			; <UNDEFINED> instruction: 0x76726573
 3ac:	67006465 	strvs	r6, [r0, -r5, ror #8]
 3b0:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 3b4:	635f6369 	cmpvs	pc, #-1543503871	; 0xa4000001
 3b8:	5f6c7274 	svcpl	0x006c7274
 3bc:	5f746962 	svcpl	0x00746962
 3c0:	00746573 	rsbseq	r6, r4, r3, ror r5
 3c4:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 3c8:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
 3cc:	5f657469 	svcpl	0x00657469
 3d0:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
 3d4:	72646900 	rsbvc	r6, r4, #0, 18
 3d8:	68676948 	stmdavs	r7!, {r3, r6, r8, fp, sp, lr}^
 3dc:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
 3e0:	665f7075 			; <UNDEFINED> instruction: 0x665f7075
 3e4:	675f726f 	ldrbvs	r7, [pc, -pc, ror #4]
 3e8:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 3ec:	645f6369 	ldrbvs	r6, [pc], #-873	; 3f4 <startup-0x1ffffc0c>
 3f0:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 3f4:	61007961 	tstvs	r0, r1, ror #18
 3f8:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 3fc:	6165725f 	cmnvs	r5, pc, asr r2
 400:	6f635f64 	svcvs	0x00635f64
 404:	6f72746e 	svcvs	0x0072746e
 408:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
 40c:	63736100 	cmnvs	r3, #0, 2
 410:	725f6969 	subsvc	r6, pc, #1720320	; 0x1a4000
 414:	5f646165 	svcpl	0x00646165
 418:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
 41c:	73007375 	movwvc	r7, #885	; 0x375
 420:	63656c65 	cmnvs	r5, #25856	; 0x6500
 424:	6f635f74 	svcvs	0x00635f74
 428:	6f72746e 	svcvs	0x0072746e
 42c:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
 430:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
 434:	665f7075 			; <UNDEFINED> instruction: 0x665f7075
 438:	6b5f726f 	blvs	17dcdfc <startup-0x1e823204>
 43c:	61707965 	cmnvs	r0, r5, ror #18
 440:	73610064 	cmnvc	r1, #100	; 0x64
 444:	5f696963 	svcpl	0x00696963
 448:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 44c:	61645f65 	cmnvs	r4, r5, ror #30
 450:	72006174 	andvc	r6, r0, #116, 2
 454:	6c757365 	ldclvs	3, cr7, [r5], #-404	; 0xfffffe6c
 458:	72670074 	rsbvc	r0, r7, #116	; 0x74
 45c:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 460:	61775f63 	cmnvs	r7, r3, ror #30
 464:	725f7469 	subsvc	r7, pc, #1761607680	; 0x69000000
 468:	79646165 	stmdbvc	r4!, {r0, r2, r5, r6, r8, sp, lr}^
 46c:	61657200 	cmnvs	r5, r0, lsl #4
 470:	6f635f64 	svcvs	0x00635f64
 474:	6573006c 	ldrbvs	r0, [r3, #-108]!	; 0xffffff94
 478:	5f707574 	svcpl	0x00707574
 47c:	5f726f66 	svcpl	0x00726f66
 480:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 484:	69645f69 	stmdbvs	r4!, {r0, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 488:	616c7073 	smcvs	50947	; 0xc703
 48c:	79620079 	stmdbvc	r2!, {r0, r3, r4, r5, r6}^
 490:	6d006574 	cfstr32vs	mvfx6, [r0, #-464]	; 0xfffffe30
 494:	006b7361 	rsbeq	r7, fp, r1, ror #6
 498:	64707570 	ldrbtvs	r7, [r0], #-1392	; 0xfffffa90
 49c:	72670072 	rsbvc	r0, r7, #114	; 0x72
 4a0:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 4a4:	6e695f63 	cdpvs	15, 6, cr5, cr9, cr3, {3}
 4a8:	61697469 	cmnvs	r9, r9, ror #8
 4ac:	657a696c 	ldrbvs	r6, [sl, #-2412]!	; 0xfffff694
 4b0:	6d6f6300 	stclvs	3, cr6, [pc, #-0]	; 4b8 <startup-0x1ffffb48>
 4b4:	646e616d 	strbtvs	r6, [lr], #-365	; 0xfffffe93
 4b8:	72576f54 	subsvc	r6, r7, #84, 30	; 0x150
 4bc:	00657469 	rsbeq	r7, r5, r9, ror #8
 4c0:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 4c4:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
 4c8:	5f657469 	svcpl	0x00657469
 4cc:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
 4d0:	6c6c6f72 	stclvs	15, cr6, [ip], #-456	; 0xfffffe38
 4d4:	73007265 	movwvc	r7, #613	; 0x265
 4d8:	74657a69 	strbtvc	r7, [r5], #-2665	; 0xfffff597
 4dc:	00657079 	rsbeq	r7, r5, r9, ror r0
 4e0:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xfffff093
 4e4:	73610072 	cmnvc	r1, #114	; 0x72
 4e8:	5f696963 	svcpl	0x00696963
 4ec:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 4f0:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
 4f4:	756f0061 	strbvc	r0, [pc, #-97]!	; 49b <startup-0x1ffffb65>
 4f8:	65733774 	ldrbvs	r3, [r3, #-1908]!	; 0xfffff88c
 4fc:	646f0067 	strbtvs	r0, [pc], #-103	; 504 <startup-0x1ffffafc>
 500:	67694872 			; <UNDEFINED> instruction: 0x67694872
 504:	646f0068 	strbtvs	r0, [pc], #-104	; 50c <startup-0x1ffffaf4>
 508:	776f4c72 			; <UNDEFINED> instruction: 0x776f4c72
 50c:	63736100 	cmnvs	r3, #0, 2
 510:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
 514:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 518:	646d635f 	strbtvs	r6, [sp], #-863	; 0xfffffca1
	...

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	204d5241 	subcs	r5, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d36 	eorscc	r2, r2, r6, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	70752d31 	rsbsvc	r2, r5, r1, lsr sp
  38:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
  3c:	2e362029 	cdpcs	0, 3, cr2, cr6, cr9, {1}
  40:	20312e33 	eorscs	r2, r1, r3, lsr lr
  44:	37313032 			; <UNDEFINED> instruction: 0x37313032
  48:	35313230 	ldrcc	r3, [r1, #-560]!	; 0xfffffdd0
  4c:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
  50:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
  54:	5b202965 	blpl	80a5f0 <startup-0x1f7f5a10>
  58:	2f4d5241 	svccs	0x004d5241
  5c:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
  60:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  64:	622d362d 	eorvs	r3, sp, #47185920	; 0x2d00000
  68:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
  6c:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
  70:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
  74:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
  78:	31353534 	teqcc	r5, r4, lsr r5
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	00000018 	andeq	r0, r0, r8, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	0000000e 	andeq	r0, r0, lr
  30:	40080e41 	andmi	r0, r8, r1, asr #28
  34:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  38:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  3c:	0000001c 	andeq	r0, r0, ip, lsl r0
  40:	00000000 	andeq	r0, r0, r0
  44:	2000001e 	andcs	r0, r0, lr, lsl r0
  48:	000000c0 	andeq	r0, r0, r0, asr #1
  4c:	40080e41 	andmi	r0, r8, r1, asr #28
  50:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  54:	100e4101 	andne	r4, lr, r1, lsl #2
  58:	00070d41 	andeq	r0, r7, r1, asr #26
  5c:	0000000c 	andeq	r0, r0, ip
  60:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  64:	7c020001 	stcvc	0, cr0, [r2], {1}
  68:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  6c:	00000018 	andeq	r0, r0, r8, lsl r0
  70:	0000005c 	andeq	r0, r0, ip, asr r0
  74:	200000e0 	andcs	r0, r0, r0, ror #1
  78:	00000040 	andeq	r0, r0, r0, asr #32
  7c:	40080e41 	andmi	r0, r8, r1, asr #28
  80:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  84:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  88:	00000018 	andeq	r0, r0, r8, lsl r0
  8c:	0000005c 	andeq	r0, r0, ip, asr r0
  90:	20000120 	andcs	r0, r0, r0, lsr #2
  94:	00000012 	andeq	r0, r0, r2, lsl r0
  98:	40080e41 	andmi	r0, r8, r1, asr #28
  9c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  a0:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  a4:	0000001c 	andeq	r0, r0, ip, lsl r0
  a8:	0000005c 	andeq	r0, r0, ip, asr r0
  ac:	20000132 	andcs	r0, r0, r2, lsr r1
  b0:	00000044 	andeq	r0, r0, r4, asr #32
  b4:	40080e41 	andmi	r0, r8, r1, asr #28
  b8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  bc:	180e4101 	stmdane	lr, {r0, r8, lr}
  c0:	00070d41 	andeq	r0, r7, r1, asr #26
  c4:	0000001c 	andeq	r0, r0, ip, lsl r0
  c8:	0000005c 	andeq	r0, r0, ip, asr r0
  cc:	20000176 	andcs	r0, r0, r6, ror r1
  d0:	00000048 	andeq	r0, r0, r8, asr #32
  d4:	40080e41 	andmi	r0, r8, r1, asr #28
  d8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  dc:	180e4101 	stmdane	lr, {r0, r8, lr}
  e0:	00070d41 	andeq	r0, r7, r1, asr #26
  e4:	0000000c 	andeq	r0, r0, ip
  e8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  ec:	7c020001 	stcvc	0, cr0, [r2], {1}
  f0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  f4:	0000001c 	andeq	r0, r0, ip, lsl r0
  f8:	000000e4 	andeq	r0, r0, r4, ror #1
  fc:	200001c0 	andcs	r0, r0, r0, asr #3
 100:	00000064 	andeq	r0, r0, r4, rrx
 104:	40080e41 	andmi	r0, r8, r1, asr #28
 108:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 10c:	100e4101 	andne	r4, lr, r1, lsl #2
 110:	00070d41 	andeq	r0, r7, r1, asr #26
 114:	0000001c 	andeq	r0, r0, ip, lsl r0
 118:	000000e4 	andeq	r0, r0, r4, ror #1
 11c:	20000224 	andcs	r0, r0, r4, lsr #4
 120:	00000064 	andeq	r0, r0, r4, rrx
 124:	40080e41 	andmi	r0, r8, r1, asr #28
 128:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 12c:	100e4101 	andne	r4, lr, r1, lsl #2
 130:	00070d41 	andeq	r0, r7, r1, asr #26
 134:	00000020 	andeq	r0, r0, r0, lsr #32
 138:	000000e4 	andeq	r0, r0, r4, ror #1
 13c:	20000288 	andcs	r0, r0, r8, lsl #5
 140:	00000090 	muleq	r0, r0, r0
 144:	400c0e41 	andmi	r0, ip, r1, asr #28
 148:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 14c:	018e4002 	orreq	r4, lr, r2
 150:	41280e41 			; <UNDEFINED> instruction: 0x41280e41
 154:	0000070d 	andeq	r0, r0, sp, lsl #14
 158:	00000020 	andeq	r0, r0, r0, lsr #32
 15c:	000000e4 	andeq	r0, r0, r4, ror #1
 160:	20000318 	andcs	r0, r0, r8, lsl r3
 164:	00000050 	andeq	r0, r0, r0, asr r0
 168:	400c0e41 	andmi	r0, ip, r1, asr #28
 16c:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 170:	018e4002 	orreq	r4, lr, r2
 174:	41380e41 	teqmi	r8, r1, asr #28
 178:	0000070d 	andeq	r0, r0, sp, lsl #14
 17c:	0000001c 	andeq	r0, r0, ip, lsl r0
 180:	000000e4 	andeq	r0, r0, r4, ror #1
 184:	20000368 	andcs	r0, r0, r8, ror #6
 188:	00000050 	andeq	r0, r0, r0, asr r0
 18c:	40080e41 	andmi	r0, r8, r1, asr #28
 190:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 194:	100e4101 	andne	r4, lr, r1, lsl #2
 198:	00070d41 	andeq	r0, r7, r1, asr #26
 19c:	0000001c 	andeq	r0, r0, ip, lsl r0
 1a0:	000000e4 	andeq	r0, r0, r4, ror #1
 1a4:	200003b8 			; <UNDEFINED> instruction: 0x200003b8
 1a8:	00000016 	andeq	r0, r0, r6, lsl r0
 1ac:	40080e41 	andmi	r0, r8, r1, asr #28
 1b0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1b4:	100e4101 	andne	r4, lr, r1, lsl #2
 1b8:	00070d41 	andeq	r0, r7, r1, asr #26
 1bc:	0000001c 	andeq	r0, r0, ip, lsl r0
 1c0:	000000e4 	andeq	r0, r0, r4, ror #1
 1c4:	200003ce 	andcs	r0, r0, lr, asr #7
 1c8:	00000052 	andeq	r0, r0, r2, asr r0
 1cc:	40080e41 	andmi	r0, r8, r1, asr #28
 1d0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1d4:	100e4101 	andne	r4, lr, r1, lsl #2
 1d8:	00070d41 	andeq	r0, r7, r1, asr #26
 1dc:	00000018 	andeq	r0, r0, r8, lsl r0
 1e0:	000000e4 	andeq	r0, r0, r4, ror #1
 1e4:	20000420 	andcs	r0, r0, r0, lsr #8
 1e8:	00000024 	andeq	r0, r0, r4, lsr #32
 1ec:	40080e41 	andmi	r0, r8, r1, asr #28
 1f0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1f4:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 1f8:	00000018 	andeq	r0, r0, r8, lsl r0
 1fc:	000000e4 	andeq	r0, r0, r4, ror #1
 200:	20000444 	andcs	r0, r0, r4, asr #8
 204:	0000009a 	muleq	r0, sl, r0
 208:	40080e41 	andmi	r0, r8, r1, asr #28
 20c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 210:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 214:	0000001c 	andeq	r0, r0, ip, lsl r0
 218:	000000e4 	andeq	r0, r0, r4, ror #1
 21c:	200004de 	ldrdcs	r0, [r0], -lr
 220:	00000046 	andeq	r0, r0, r6, asr #32
 224:	40080e41 	andmi	r0, r8, r1, asr #28
 228:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 22c:	180e4101 	stmdane	lr, {r0, r8, lr}
 230:	00070d41 	andeq	r0, r7, r1, asr #26
 234:	0000001c 	andeq	r0, r0, ip, lsl r0
 238:	000000e4 	andeq	r0, r0, r4, ror #1
 23c:	20000524 	andcs	r0, r0, r4, lsr #10
 240:	00000050 	andeq	r0, r0, r0, asr r0
 244:	40080e41 	andmi	r0, r8, r1, asr #28
 248:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 24c:	180e4101 	stmdane	lr, {r0, r8, lr}
 250:	00070d41 	andeq	r0, r7, r1, asr #26
 254:	0000001c 	andeq	r0, r0, ip, lsl r0
 258:	000000e4 	andeq	r0, r0, r4, ror #1
 25c:	20000574 	andcs	r0, r0, r4, ror r5
 260:	0000002a 	andeq	r0, r0, sl, lsr #32
 264:	40080e41 	andmi	r0, r8, r1, asr #28
 268:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 26c:	100e4101 	andne	r4, lr, r1, lsl #2
 270:	00070d41 	andeq	r0, r7, r1, asr #26
 274:	0000001c 	andeq	r0, r0, ip, lsl r0
 278:	000000e4 	andeq	r0, r0, r4, ror #1
 27c:	2000059e 	mulcs	r0, lr, r5
 280:	0000002a 	andeq	r0, r0, sl, lsr #32
 284:	40080e41 	andmi	r0, r8, r1, asr #28
 288:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 28c:	100e4101 	andne	r4, lr, r1, lsl #2
 290:	00070d41 	andeq	r0, r7, r1, asr #26
 294:	00000020 	andeq	r0, r0, r0, lsr #32
 298:	000000e4 	andeq	r0, r0, r4, ror #1
 29c:	200005c8 	andcs	r0, r0, r8, asr #11
 2a0:	00000048 	andeq	r0, r0, r8, asr #32
 2a4:	400c0e41 	andmi	r0, ip, r1, asr #28
 2a8:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 2ac:	018e4002 	orreq	r4, lr, r2
 2b0:	41180e41 	tstmi	r8, r1, asr #28
 2b4:	0000070d 	andeq	r0, r0, sp, lsl #14
 2b8:	00000020 	andeq	r0, r0, r0, lsr #32
 2bc:	000000e4 	andeq	r0, r0, r4, ror #1
 2c0:	20000610 	andcs	r0, r0, r0, lsl r6
 2c4:	00000048 	andeq	r0, r0, r8, asr #32
 2c8:	400c0e41 	andmi	r0, ip, r1, asr #28
 2cc:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 2d0:	018e4002 	orreq	r4, lr, r2
 2d4:	41180e41 	tstmi	r8, r1, asr #28
 2d8:	0000070d 	andeq	r0, r0, sp, lsl #14
 2dc:	0000001c 	andeq	r0, r0, ip, lsl r0
 2e0:	000000e4 	andeq	r0, r0, r4, ror #1
 2e4:	20000658 	andcs	r0, r0, r8, asr r6
 2e8:	00000030 	andeq	r0, r0, r0, lsr r0
 2ec:	40080e41 	andmi	r0, r8, r1, asr #28
 2f0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2f4:	100e4101 	andne	r4, lr, r1, lsl #2
 2f8:	00070d41 	andeq	r0, r7, r1, asr #26
 2fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 300:	000000e4 	andeq	r0, r0, r4, ror #1
 304:	20000688 	andcs	r0, r0, r8, lsl #13
 308:	00000034 	andeq	r0, r0, r4, lsr r0
 30c:	40080e41 	andmi	r0, r8, r1, asr #28
 310:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 314:	100e4101 	andne	r4, lr, r1, lsl #2
 318:	00070d41 	andeq	r0, r7, r1, asr #26
 31c:	0000001c 	andeq	r0, r0, ip, lsl r0
 320:	000000e4 	andeq	r0, r0, r4, ror #1
 324:	200006bc 			; <UNDEFINED> instruction: 0x200006bc
 328:	00000054 	andeq	r0, r0, r4, asr r0
 32c:	40080e41 	andmi	r0, r8, r1, asr #28
 330:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 334:	180e4101 	stmdane	lr, {r0, r8, lr}
 338:	00070d41 	andeq	r0, r7, r1, asr #26
 33c:	0000001c 	andeq	r0, r0, ip, lsl r0
 340:	000000e4 	andeq	r0, r0, r4, ror #1
 344:	20000710 	andcs	r0, r0, r0, lsl r7
 348:	0000003c 	andeq	r0, r0, ip, lsr r0
 34c:	40080e41 	andmi	r0, r8, r1, asr #28
 350:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 354:	100e4101 	andne	r4, lr, r1, lsl #2
 358:	00070d41 	andeq	r0, r7, r1, asr #26
 35c:	0000001c 	andeq	r0, r0, ip, lsl r0
 360:	000000e4 	andeq	r0, r0, r4, ror #1
 364:	2000074c 	andcs	r0, r0, ip, asr #14
 368:	0000005c 	andeq	r0, r0, ip, asr r0
 36c:	40080e41 	andmi	r0, r8, r1, asr #28
 370:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 374:	180e4101 	stmdane	lr, {r0, r8, lr}
 378:	00070d41 	andeq	r0, r7, r1, asr #26
 37c:	0000001c 	andeq	r0, r0, ip, lsl r0
 380:	000000e4 	andeq	r0, r0, r4, ror #1
 384:	200007a8 	andcs	r0, r0, r8, lsr #15
 388:	00000058 	andeq	r0, r0, r8, asr r0
 38c:	40080e41 	andmi	r0, r8, r1, asr #28
 390:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 394:	180e4101 	stmdane	lr, {r0, r8, lr}
 398:	00070d41 	andeq	r0, r7, r1, asr #26
 39c:	0000001c 	andeq	r0, r0, ip, lsl r0
 3a0:	000000e4 	andeq	r0, r0, r4, ror #1
 3a4:	20000800 	andcs	r0, r0, r0, lsl #16
 3a8:	0000005a 	andeq	r0, r0, sl, asr r0
 3ac:	40080e41 	andmi	r0, r8, r1, asr #28
 3b0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3b4:	100e4101 	andne	r4, lr, r1, lsl #2
 3b8:	00070d41 	andeq	r0, r7, r1, asr #26
 3bc:	00000018 	andeq	r0, r0, r8, lsl r0
 3c0:	000000e4 	andeq	r0, r0, r4, ror #1
 3c4:	2000085a 	andcs	r0, r0, sl, asr r8
 3c8:	0000005c 	andeq	r0, r0, ip, asr r0
 3cc:	40080e41 	andmi	r0, r8, r1, asr #28
 3d0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3d4:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 3d8:	0000001c 	andeq	r0, r0, ip, lsl r0
 3dc:	000000e4 	andeq	r0, r0, r4, ror #1
 3e0:	200008b6 			; <UNDEFINED> instruction: 0x200008b6
 3e4:	0000006a 	andeq	r0, r0, sl, rrx
 3e8:	40080e41 	andmi	r0, r8, r1, asr #28
 3ec:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3f0:	100e4101 	andne	r4, lr, r1, lsl #2
 3f4:	00070d41 	andeq	r0, r7, r1, asr #26
 3f8:	0000001c 	andeq	r0, r0, ip, lsl r0
 3fc:	000000e4 	andeq	r0, r0, r4, ror #1
 400:	20000920 	andcs	r0, r0, r0, lsr #18
 404:	00000090 	muleq	r0, r0, r0
 408:	40080e41 	andmi	r0, r8, r1, asr #28
 40c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 410:	180e4101 	stmdane	lr, {r0, r8, lr}
 414:	00070d41 	andeq	r0, r7, r1, asr #26
 418:	0000001c 	andeq	r0, r0, ip, lsl r0
 41c:	000000e4 	andeq	r0, r0, r4, ror #1
 420:	200009b0 			; <UNDEFINED> instruction: 0x200009b0
 424:	00000080 	andeq	r0, r0, r0, lsl #1
 428:	40080e41 	andmi	r0, r8, r1, asr #28
 42c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 430:	100e4101 	andne	r4, lr, r1, lsl #2
 434:	00070d41 	andeq	r0, r7, r1, asr #26
 438:	0000001c 	andeq	r0, r0, ip, lsl r0
 43c:	000000e4 	andeq	r0, r0, r4, ror #1
 440:	20000a30 	andcs	r0, r0, r0, lsr sl
 444:	00000040 	andeq	r0, r0, r0, asr #32
 448:	40080e41 	andmi	r0, r8, r1, asr #28
 44c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 450:	100e4101 	andne	r4, lr, r1, lsl #2
 454:	00070d41 	andeq	r0, r7, r1, asr #26
 458:	0000001c 	andeq	r0, r0, ip, lsl r0
 45c:	000000e4 	andeq	r0, r0, r4, ror #1
 460:	20000a70 	andcs	r0, r0, r0, ror sl
 464:	00000046 	andeq	r0, r0, r6, asr #32
 468:	40080e41 	andmi	r0, r8, r1, asr #28
 46c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 470:	100e4101 	andne	r4, lr, r1, lsl #2
 474:	00070d41 	andeq	r0, r7, r1, asr #26
 478:	0000001c 	andeq	r0, r0, ip, lsl r0
 47c:	000000e4 	andeq	r0, r0, r4, ror #1
 480:	20000ab6 			; <UNDEFINED> instruction: 0x20000ab6
 484:	0000002a 	andeq	r0, r0, sl, lsr #32
 488:	40080e41 	andmi	r0, r8, r1, asr #28
 48c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 490:	100e4101 	andne	r4, lr, r1, lsl #2
 494:	00070d41 	andeq	r0, r7, r1, asr #26
 498:	0000001c 	andeq	r0, r0, ip, lsl r0
 49c:	000000e4 	andeq	r0, r0, r4, ror #1
 4a0:	20000ae0 	andcs	r0, r0, r0, ror #21
 4a4:	00000066 	andeq	r0, r0, r6, rrx
 4a8:	40080e41 	andmi	r0, r8, r1, asr #28
 4ac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4b0:	100e4101 	andne	r4, lr, r1, lsl #2
 4b4:	00070d41 	andeq	r0, r7, r1, asr #26
 4b8:	00000018 	andeq	r0, r0, r8, lsl r0
 4bc:	000000e4 	andeq	r0, r0, r4, ror #1
 4c0:	20000b46 	andcs	r0, r0, r6, asr #22
 4c4:	0000001e 	andeq	r0, r0, lr, lsl r0
 4c8:	40080e41 	andmi	r0, r8, r1, asr #28
 4cc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4d0:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 4d4:	00000020 	andeq	r0, r0, r0, lsr #32
 4d8:	000000e4 	andeq	r0, r0, r4, ror #1
 4dc:	20000b64 	andcs	r0, r0, r4, ror #22
 4e0:	000001e8 	andeq	r0, r0, r8, ror #3
 4e4:	400c0e41 	andmi	r0, ip, r1, asr #28
 4e8:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 4ec:	018e4002 	orreq	r4, lr, r2
 4f0:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
 4f4:	0000070d 	andeq	r0, r0, sp, lsl #14
 4f8:	0000000c 	andeq	r0, r0, ip
 4fc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 500:	7c010001 	stcvc	0, cr0, [r1], {1}
 504:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 508:	0000000c 	andeq	r0, r0, ip
 50c:	000004f8 	strdeq	r0, [r0], -r8
 510:	20000d4d 	andcs	r0, r0, sp, asr #26
 514:	0000010a 	andeq	r0, r0, sl, lsl #2
